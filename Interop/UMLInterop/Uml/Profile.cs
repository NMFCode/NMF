//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.
    ///<p>From package UML::Packages.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Profile")]
    [DebuggerDisplayAttribute("Profile {Name}")]
    public partial class Profile : Package, IProfile, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _metaclass_reference_not_specializedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMetaclass_reference_not_specializedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _references_same_metamodelOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveReferences_same_metamodelOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _defineOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDefineOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _defineOperation_ = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDefineOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getDefinitionOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetDefinitionOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getDefinitionOperation_ = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetDefinitionOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getOwnedExtensionsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetOwnedExtensionsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getReferencedMetaclassesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetReferencedMetaclassesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getReferencedMetamodelsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetReferencedMetamodelsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isDefinedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsDefinedOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _metaclassReferenceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMetaclassReferenceReference);
        
        /// <summary>
        /// The backing field for the MetaclassReference property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IElementImport> _metaclassReference;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _metamodelReferenceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMetamodelReferenceReference);
        
        /// <summary>
        /// The backing field for the MetamodelReference property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IPackageImport> _metamodelReference;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Profile()
        {
            this._metaclassReference = new ObservableAssociationSet<IElementImport>();
            this._metaclassReference.CollectionChanging += this.MetaclassReferenceCollectionChanging;
            this._metaclassReference.CollectionChanged += this.MetaclassReferenceCollectionChanged;
            this._metamodelReference = new ObservableAssociationSet<IPackageImport>();
            this._metamodelReference.CollectionChanging += this.MetamodelReferenceCollectionChanging;
            this._metamodelReference.CollectionChanged += this.MetamodelReferenceCollectionChanged;
        }
        
        /// <summary>
        /// References a metaclass that may be extended.
        ///<p>From package UML::Packages.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("metaclassReference")]
        [DescriptionAttribute("References a metaclass that may be extended.\n<p>From package UML::Packages.</p>")]
        [CategoryAttribute("Profile")]
        [XmlElementNameAttribute("metaclassReference")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IElementImport> MetaclassReference
        {
            get
            {
                return this._metaclassReference;
            }
        }
        
        /// <summary>
        /// References a package containing (directly or indirectly) metaclasses that may be extended.
        ///<p>From package UML::Packages.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("metamodelReference")]
        [DescriptionAttribute("References a package containing (directly or indirectly) metaclasses that may be " +
            "extended.\n<p>From package UML::Packages.</p>")]
        [CategoryAttribute("Profile")]
        [XmlElementNameAttribute("metamodelReference")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IPackageImport> MetamodelReference
        {
            get
            {
                return this._metamodelReference;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProfileReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Profile")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// An element imported as a metaclassReference is not specialized or generalized in a Profile.
        ///metaclassReference.importedElement->
        ///	select(c | c.oclIsKindOf(Classifier) and
        ///		(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()
        ///and 
        ///packagedElement->
        ///    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->
        ///       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Metaclass_reference_not_specialized(object diagnostics, object context)
        {
            System.Func<IProfile, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, object, object, bool>>(_metaclass_reference_not_specializedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method metaclass_reference_not_specialized registe" +
                        "red. Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _metaclass_reference_not_specializedOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _metaclass_reference_not_specializedOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _metaclass_reference_not_specializedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMetaclass_reference_not_specializedOperation()
        {
            return ClassInstance.LookupOperation("metaclass_reference_not_specialized");
        }
        
        /// <summary>
        /// All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel.
        ///metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->
        ///  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool References_same_metamodel(object diagnostics, object context)
        {
            System.Func<IProfile, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, object, object, bool>>(_references_same_metamodelOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method references_same_metamodel registered. Use t" +
                        "he method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _references_same_metamodelOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _references_same_metamodelOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _references_same_metamodelOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveReferences_same_metamodelOperation()
        {
            return ClassInstance.LookupOperation("references_same_metamodel");
        }
        
        /// <summary>
        /// Creates and returns an instance of (the Ecore representation of) the specified classifier defined in this profile.
        /// </summary>
        /// <param name="classifier">The classifier of which to create an instance.</param>
        public IEObject Create(IClassifier classifier)
        {
            System.Func<IProfile, IClassifier, IEObject> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, IClassifier, IEObject>>(_createOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method create registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createOperation.Value, classifier);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createOperation.Value, e));
            IEObject result = handler.Invoke(this, classifier);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateOperation()
        {
            return ClassInstance.LookupOperation("create");
        }
        
        /// <summary>
        /// Defines this profile by (re)creating Ecore representations of its current contents.
        /// </summary>
        public IEPackage Define()
        {
            System.Func<IProfile, IEPackage> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, IEPackage>>(_defineOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method define registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _defineOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _defineOperation.Value, e));
            IEPackage result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _defineOperation.Value, e));
            return result;
        }
        
        /// <summary>
        /// Defines this profile by (re)creating Ecore representations of its current contents, using the specified options, diagnostics, and context.
        /// </summary>
        /// <param name="options">The options to use.</param>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public IEPackage Define(object options, object diagnostics, object context)
        {
            System.Func<IProfile, object, object, object, IEPackage> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, object, object, object, IEPackage>>(_defineOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method define registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _defineOperation.Value, options, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _defineOperation.Value, e));
            IEPackage result = handler.Invoke(this, options, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _defineOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDefineOperation()
        {
            return ClassInstance.LookupOperation("define");
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDefineOperation_()
        {
            return ClassInstance.LookupOperation("define");
        }
        
        /// <summary>
        /// Retrieves the current definition (Ecore representation) of this profile.
        /// </summary>
        public IEPackage GetDefinition()
        {
            System.Func<IProfile, IEPackage> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, IEPackage>>(_getDefinitionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getDefinition registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getDefinitionOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getDefinitionOperation.Value, e));
            IEPackage result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getDefinitionOperation.Value, e));
            return result;
        }
        
        /// <summary>
        /// Retrieves the current definition (Ecore representation) of the specified named element in this profile.
        /// </summary>
        /// <param name="namedElement">The named element whose definition to retrieve.</param>
        public IENamedElement GetDefinition(INamedElement namedElement)
        {
            System.Func<IProfile, INamedElement, IENamedElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, INamedElement, IENamedElement>>(_getDefinitionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getDefinition registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getDefinitionOperation.Value, namedElement);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getDefinitionOperation.Value, e));
            IENamedElement result = handler.Invoke(this, namedElement);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getDefinitionOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetDefinitionOperation()
        {
            return ClassInstance.LookupOperation("getDefinition");
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetDefinitionOperation_()
        {
            return ClassInstance.LookupOperation("getDefinition");
        }
        
        /// <summary>
        /// Retrieves the extensions owned by this profile, excluding non-required extensions if indicated.
        /// </summary>
        /// <param name="requiredOnly">Whether to retrieve only required extensions.</param>
        public ISetExpression<NMF.Interop.Uml.IExtension> GetOwnedExtensions(bool requiredOnly)
        {
            System.Func<IProfile, bool, ISetExpression<NMF.Interop.Uml.IExtension>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, bool, ISetExpression<NMF.Interop.Uml.IExtension>>>(_getOwnedExtensionsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getOwnedExtensions registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getOwnedExtensionsOperation.Value, requiredOnly);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getOwnedExtensionsOperation.Value, e));
            ISetExpression<NMF.Interop.Uml.IExtension> result = handler.Invoke(this, requiredOnly);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getOwnedExtensionsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetOwnedExtensionsOperation()
        {
            return ClassInstance.LookupOperation("getOwnedExtensions");
        }
        
        /// <summary>
        /// Retrieves the metaclasses referenced by this profile.
        /// </summary>
        public ISetExpression<NMF.Interop.Uml.IClass> GetReferencedMetaclasses()
        {
            System.Func<IProfile, ISetExpression<NMF.Interop.Uml.IClass>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, ISetExpression<NMF.Interop.Uml.IClass>>>(_getReferencedMetaclassesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getReferencedMetaclasses registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getReferencedMetaclassesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getReferencedMetaclassesOperation.Value, e));
            ISetExpression<NMF.Interop.Uml.IClass> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getReferencedMetaclassesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetReferencedMetaclassesOperation()
        {
            return ClassInstance.LookupOperation("getReferencedMetaclasses");
        }
        
        /// <summary>
        /// Retrieves the metamodels referenced by this profile.
        /// </summary>
        public ISetExpression<NMF.Interop.Uml.IModel> GetReferencedMetamodels()
        {
            System.Func<IProfile, ISetExpression<NMF.Interop.Uml.IModel>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, ISetExpression<NMF.Interop.Uml.IModel>>>(_getReferencedMetamodelsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getReferencedMetamodels registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getReferencedMetamodelsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getReferencedMetamodelsOperation.Value, e));
            ISetExpression<NMF.Interop.Uml.IModel> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getReferencedMetamodelsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetReferencedMetamodelsOperation()
        {
            return ClassInstance.LookupOperation("getReferencedMetamodels");
        }
        
        /// <summary>
        /// Determines whether this profile is defined.
        /// </summary>
        public bool IsDefined()
        {
            System.Func<IProfile, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IProfile, bool>>(_isDefinedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isDefined registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isDefinedOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isDefinedOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isDefinedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsDefinedOperation()
        {
            return ClassInstance.LookupOperation("isDefined");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMetaclassReferenceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Profile.ClassInstance)).Resolve("metaclassReference")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MetaclassReference property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MetaclassReferenceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MetaclassReference", e, _metaclassReferenceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MetaclassReference property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MetaclassReferenceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MetaclassReference", e, _metaclassReferenceReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMetamodelReferenceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Profile.ClassInstance)).Resolve("metamodelReference")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MetamodelReference property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MetamodelReferenceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MetamodelReference", e, _metamodelReferenceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MetamodelReference property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MetamodelReferenceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MetamodelReference", e, _metamodelReferenceReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "METACLASSREFERENCE"))
            {
                return this._metaclassReference;
            }
            if ((feature == "METAMODELREFERENCE"))
            {
                return this._metamodelReference;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Profile")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Profile class
        /// </summary>
        public class ProfileReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Profile _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProfileReferencedElementsCollection(Profile parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.MetaclassReference.Count);
                    count = (count + this._parent.MetamodelReference.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MetaclassReference.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MetamodelReference.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MetaclassReference.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MetamodelReference.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IElementImport metaclassReferenceCasted = item.As<IElementImport>();
                if ((metaclassReferenceCasted != null))
                {
                    this._parent.MetaclassReference.Add(metaclassReferenceCasted);
                }
                IPackageImport metamodelReferenceCasted = item.As<IPackageImport>();
                if ((metamodelReferenceCasted != null))
                {
                    this._parent.MetamodelReference.Add(metamodelReferenceCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MetaclassReference.Clear();
                this._parent.MetamodelReference.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.MetaclassReference.Contains(item))
                {
                    return true;
                }
                if (this._parent.MetamodelReference.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> metaclassReferenceEnumerator = this._parent.MetaclassReference.GetEnumerator();
                try
                {
                    for (
                    ; metaclassReferenceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = metaclassReferenceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    metaclassReferenceEnumerator.Dispose();
                }
                IEnumerator<IModelElement> metamodelReferenceEnumerator = this._parent.MetamodelReference.GetEnumerator();
                try
                {
                    for (
                    ; metamodelReferenceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = metamodelReferenceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    metamodelReferenceEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IElementImport elementImportItem = item.As<IElementImport>();
                if (((elementImportItem != null) 
                            && this._parent.MetaclassReference.Remove(elementImportItem)))
                {
                    return true;
                }
                IPackageImport packageImportItem = item.As<IPackageImport>();
                if (((packageImportItem != null) 
                            && this._parent.MetamodelReference.Remove(packageImportItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MetaclassReference).Concat(this._parent.MetamodelReference).GetEnumerator();
            }
        }
    }
}

