//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for ProtocolStateMachine
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ProtocolStateMachine))]
    [XmlDefaultImplementationTypeAttribute(typeof(ProtocolStateMachine))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ProtocolStateMachine")]
    public interface IProtocolStateMachine : IModelElement, IStateMachine
    {
        
        /// <summary>
        /// Conformance between ProtocolStateMachine
        ///<p>From package UML::StateMachines.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("conformance")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("specificMachine")]
        [ConstantAttribute()]
        IOrderedSetExpression<IProtocolConformance> Conformance
        {
            get;
        }
        
        /// <summary>
        /// ProtocolStateMachines cannot have deep or shallow history Pseudostates.
        ///region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies
        ///((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Deep_or_shallow_history(object diagnostics, object context);
        
        /// <summary>
        /// The states of a ProtocolStateMachine cannot have entry, exit, or do activity Behaviors.
        ///region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies
        ///(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Entry_exit_do(object diagnostics, object context);
        
        /// <summary>
        /// All Transitions of a ProtocolStateMachine must be ProtocolTransitions.
        ///region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Protocol_transitions(object diagnostics, object context);
    }
}

