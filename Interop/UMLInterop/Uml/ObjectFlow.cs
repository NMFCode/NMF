//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An ObjectFlow is an ActivityEdge that is traversed by object tokens that may hold values. Object flows also support multicast/receive, token selection from object nodes, and transformation of tokens.
    ///<p>From package UML::Activities.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ObjectFlow")]
    [DebuggerDisplayAttribute("ObjectFlow {Name}")]
    public partial class ObjectFlow : ActivityEdge, IObjectFlow, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _input_and_output_parameterOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInput_and_output_parameterOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_executable_nodesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_executable_nodesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _transformation_behaviorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveTransformation_behaviorOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _selection_behaviorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSelection_behaviorOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _compatible_typesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCompatible_typesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _same_upper_boundsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSame_upper_boundsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _targetOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveTargetOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _is_multicast_or_is_multireceiveOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIs_multicast_or_is_multireceiveOperation);
        
        /// <summary>
        /// The backing field for the IsMulticast property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isMulticast = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isMulticastAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsMulticastAttribute);
        
        /// <summary>
        /// The backing field for the IsMultireceive property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isMultireceive = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isMultireceiveAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsMultireceiveAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _selectionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSelectionReference);
        
        /// <summary>
        /// The backing field for the Selection property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBehavior _selection;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _transformationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTransformationReference);
        
        /// <summary>
        /// The backing field for the Transformation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBehavior _transformation;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Indicates whether the objects in the ObjectFlow are passed by multicasting.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isMulticast")]
        [DescriptionAttribute("Indicates whether the objects in the ObjectFlow are passed by multicasting.\n<p>Fr" +
            "om package UML::Activities.</p>")]
        [CategoryAttribute("ObjectFlow")]
        [XmlElementNameAttribute("isMulticast")]
        [XmlAttributeAttribute(true)]
        public bool IsMulticast
        {
            get
            {
                return this._isMulticast;
            }
            set
            {
                if ((this._isMulticast != value))
                {
                    bool old = this._isMulticast;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsMulticast", e, _isMulticastAttribute);
                    this._isMulticast = value;
                    this.OnPropertyChanged("IsMulticast", e, _isMulticastAttribute);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the objects in the ObjectFlow are gathered from respondents to multicasting.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isMultireceive")]
        [DescriptionAttribute("Indicates whether the objects in the ObjectFlow are gathered from respondents to " +
            "multicasting.\n<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ObjectFlow")]
        [XmlElementNameAttribute("isMultireceive")]
        [XmlAttributeAttribute(true)]
        public bool IsMultireceive
        {
            get
            {
                return this._isMultireceive;
            }
            set
            {
                if ((this._isMultireceive != value))
                {
                    bool old = this._isMultireceive;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsMultireceive", e, _isMultireceiveAttribute);
                    this._isMultireceive = value;
                    this.OnPropertyChanged("IsMultireceive", e, _isMultireceiveAttribute);
                }
            }
        }
        
        /// <summary>
        /// A Behavior used to select tokens from a source ObjectNode.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("selection")]
        [DescriptionAttribute("A Behavior used to select tokens from a source ObjectNode.\n<p>From package UML::A" +
            "ctivities.</p>")]
        [CategoryAttribute("ObjectFlow")]
        [XmlElementNameAttribute("selection")]
        [XmlAttributeAttribute(true)]
        public IBehavior Selection
        {
            get
            {
                return this._selection;
            }
            set
            {
                if ((this._selection != value))
                {
                    IBehavior old = this._selection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Selection", e, _selectionReference);
                    this._selection = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSelection;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSelection;
                    }
                    this.OnPropertyChanged("Selection", e, _selectionReference);
                }
            }
        }
        
        /// <summary>
        /// A Behavior used to change or replace object tokens flowing along the ObjectFlow.
        ///<p>From package UML::Activities.</p>
        /// </summary>
        [DisplayNameAttribute("transformation")]
        [DescriptionAttribute("A Behavior used to change or replace object tokens flowing along the ObjectFlow.\n" +
            "<p>From package UML::Activities.</p>")]
        [CategoryAttribute("ObjectFlow")]
        [XmlElementNameAttribute("transformation")]
        [XmlAttributeAttribute(true)]
        public IBehavior Transformation
        {
            get
            {
                return this._transformation;
            }
            set
            {
                if ((this._transformation != value))
                {
                    IBehavior old = this._transformation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Transformation", e, _transformationReference);
                    this._transformation = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTransformation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTransformation;
                    }
                    this.OnPropertyChanged("Transformation", e, _transformationReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ObjectFlowReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ObjectFlow")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A selection Behavior has one input Parameter and one output Parameter. The input Parameter must have the same as or a supertype of the type of the source ObjectNode, be non-unique and have multiplicity 0..*. The output Parameter must be the same or a subtype of the type of source ObjectNode. The Behavior cannot have side effects.
        ///selection<>null implies
        ///	selection.inputParameters()->size()=1 and
        ///	selection.inputParameters()->forAll(not isUnique and is(0,*)) and
        ///	selection.outputParameters()->size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Input_and_output_parameter(object diagnostics, object context)
        {
            System.Func<IObjectFlow, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectFlow, object, object, bool>>(_input_and_output_parameterOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method input_and_output_parameter registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _input_and_output_parameterOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _input_and_output_parameterOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _input_and_output_parameterOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInput_and_output_parameterOperation()
        {
            return ClassInstance.LookupOperation("input_and_output_parameter");
        }
        
        /// <summary>
        /// ObjectFlows may not have ExecutableNodes at either end.
        ///not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool No_executable_nodes(object diagnostics, object context)
        {
            System.Func<IObjectFlow, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectFlow, object, object, bool>>(_no_executable_nodesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_executable_nodes registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_executable_nodesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_executable_nodesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_executable_nodesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_executable_nodesOperation()
        {
            return ClassInstance.LookupOperation("no_executable_nodes");
        }
        
        /// <summary>
        /// A transformation Behavior has one input Parameter and one output Parameter. The input Parameter must be the same as or a supertype of the type of object token coming from the source end. The output Parameter must be the same or a subtype of the type of object token expected downstream. The Behavior cannot have side effects.
        ///transformation<>null implies
        ///	transformation.inputParameters()->size()=1 and
        ///	transformation.outputParameters()->size()=1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Transformation_behavior(object diagnostics, object context)
        {
            System.Func<IObjectFlow, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectFlow, object, object, bool>>(_transformation_behaviorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method transformation_behavior registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _transformation_behaviorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _transformation_behaviorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _transformation_behaviorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveTransformation_behaviorOperation()
        {
            return ClassInstance.LookupOperation("transformation_behavior");
        }
        
        /// <summary>
        /// An ObjectFlow may have a selection Behavior only if it has an ObjectNode as its source.
        ///selection<>null implies source.oclIsKindOf(ObjectNode)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Selection_behavior(object diagnostics, object context)
        {
            System.Func<IObjectFlow, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectFlow, object, object, bool>>(_selection_behaviorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method selection_behavior registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _selection_behaviorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _selection_behaviorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _selection_behaviorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSelection_behaviorOperation()
        {
            return ClassInstance.LookupOperation("selection_behavior");
        }
        
        /// <summary>
        /// ObjectNodes connected by an ObjectFlow, with optionally intervening ControlNodes, must have compatible types. In particular, the downstream ObjectNode type must be the same or a supertype of the upstream ObjectNode type.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Compatible_types(object diagnostics, object context)
        {
            System.Func<IObjectFlow, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectFlow, object, object, bool>>(_compatible_typesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method compatible_types registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _compatible_typesOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _compatible_typesOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _compatible_typesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCompatible_typesOperation()
        {
            return ClassInstance.LookupOperation("compatible_types");
        }
        
        /// <summary>
        /// ObjectNodes connected by an ObjectFlow, with optionally intervening ControlNodes, must have the same upperBounds.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Same_upper_bounds(object diagnostics, object context)
        {
            System.Func<IObjectFlow, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectFlow, object, object, bool>>(_same_upper_boundsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method same_upper_bounds registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _same_upper_boundsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _same_upper_boundsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _same_upper_boundsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSame_upper_boundsOperation()
        {
            return ClassInstance.LookupOperation("same_upper_bounds");
        }
        
        /// <summary>
        /// An ObjectFlow with a constant weight may not target an ObjectNode, with optionally intervening ControlNodes, that has an upper bound less than the weight.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Target(object diagnostics, object context)
        {
            System.Func<IObjectFlow, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectFlow, object, object, bool>>(_targetOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method target registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _targetOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _targetOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _targetOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveTargetOperation()
        {
            return ClassInstance.LookupOperation("target");
        }
        
        /// <summary>
        /// isMulticast and isMultireceive cannot both be true.
        ///not (isMulticast and isMultireceive)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Is_multicast_or_is_multireceive(object diagnostics, object context)
        {
            System.Func<IObjectFlow, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IObjectFlow, object, object, bool>>(_is_multicast_or_is_multireceiveOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method is_multicast_or_is_multireceive registered." +
                        " Use the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _is_multicast_or_is_multireceiveOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _is_multicast_or_is_multireceiveOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _is_multicast_or_is_multireceiveOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIs_multicast_or_is_multireceiveOperation()
        {
            return ClassInstance.LookupOperation("is_multicast_or_is_multireceive");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsMulticastAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ObjectFlow.ClassInstance)).Resolve("isMulticast")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsMultireceiveAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ObjectFlow.ClassInstance)).Resolve("isMultireceive")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSelectionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ObjectFlow.ClassInstance)).Resolve("selection")));
        }
        
        /// <summary>
        /// Handles the event that the Selection property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSelection(object sender, System.EventArgs eventArgs)
        {
            this.Selection = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTransformationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ObjectFlow.ClassInstance)).Resolve("transformation")));
        }
        
        /// <summary>
        /// Handles the event that the Transformation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformation(object sender, System.EventArgs eventArgs)
        {
            this.Transformation = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SELECTION"))
            {
                return this.Selection;
            }
            if ((reference == "TRANSFORMATION"))
            {
                return this.Transformation;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISMULTICAST"))
            {
                return this.IsMulticast;
            }
            if ((attribute == "ISMULTIRECEIVE"))
            {
                return this.IsMultireceive;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SELECTION"))
            {
                this.Selection = ((IBehavior)(value));
                return;
            }
            if ((feature == "TRANSFORMATION"))
            {
                this.Transformation = ((IBehavior)(value));
                return;
            }
            if ((feature == "ISMULTICAST"))
            {
                this.IsMulticast = ((bool)(value));
                return;
            }
            if ((feature == "ISMULTIRECEIVE"))
            {
                this.IsMultireceive = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISMULTICAST"))
            {
                return Observable.Box(new IsMulticastProxy(this));
            }
            if ((attribute == "ISMULTIRECEIVE"))
            {
                return Observable.Box(new IsMultireceiveProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SELECTION"))
            {
                return new SelectionProxy(this);
            }
            if ((reference == "TRANSFORMATION"))
            {
                return new TransformationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ObjectFlow")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ObjectFlow class
        /// </summary>
        public class ObjectFlowReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ObjectFlow _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ObjectFlowReferencedElementsCollection(ObjectFlow parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Selection != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Transformation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Selection == null))
                {
                    IBehavior selectionCasted = item.As<IBehavior>();
                    if ((selectionCasted != null))
                    {
                        this._parent.Selection = selectionCasted;
                        return;
                    }
                }
                if ((this._parent.Transformation == null))
                {
                    IBehavior transformationCasted = item.As<IBehavior>();
                    if ((transformationCasted != null))
                    {
                        this._parent.Transformation = transformationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Selection = null;
                this._parent.Transformation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Selection))
                {
                    return true;
                }
                if ((item == this._parent.Transformation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Selection != null))
                {
                    array[arrayIndex] = this._parent.Selection;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Transformation != null))
                {
                    array[arrayIndex] = this._parent.Transformation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Selection == item))
                {
                    this._parent.Selection = null;
                    return true;
                }
                if ((this._parent.Transformation == item))
                {
                    this._parent.Transformation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Selection).Concat(this._parent.Transformation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isMulticast property
        /// </summary>
        private sealed class IsMulticastProxy : ModelPropertyChange<IObjectFlow, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsMulticastProxy(IObjectFlow modelElement) : 
                    base(modelElement, "isMulticast")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsMulticast;
                }
                set
                {
                    this.ModelElement.IsMulticast = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isMultireceive property
        /// </summary>
        private sealed class IsMultireceiveProxy : ModelPropertyChange<IObjectFlow, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsMultireceiveProxy(IObjectFlow modelElement) : 
                    base(modelElement, "isMultireceive")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsMultireceive;
                }
                set
                {
                    this.ModelElement.IsMultireceive = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the selection property
        /// </summary>
        private sealed class SelectionProxy : ModelPropertyChange<IObjectFlow, IBehavior>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SelectionProxy(IObjectFlow modelElement) : 
                    base(modelElement, "selection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBehavior Value
            {
                get
                {
                    return this.ModelElement.Selection;
                }
                set
                {
                    this.ModelElement.Selection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transformation property
        /// </summary>
        private sealed class TransformationProxy : ModelPropertyChange<IObjectFlow, IBehavior>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformationProxy(IObjectFlow modelElement) : 
                    base(modelElement, "transformation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBehavior Value
            {
                get
                {
                    return this.ModelElement.Transformation;
                }
                set
                {
                    this.ModelElement.Transformation = value;
                }
            }
        }
    }
}

