//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A TimeObservation is a reference to a time instant during an execution. It points out the NamedElement in the model to observe and whether the observation is when this NamedElement is entered or when it is exited.
    ///<p>From package UML::Values.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//TimeObservation")]
    [DebuggerDisplayAttribute("TimeObservation {Name}")]
    public partial class TimeObservation : Observation, ITimeObservation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FirstEvent property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _firstEvent = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _firstEventAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFirstEventAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _eventReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEventReference);
        
        /// <summary>
        /// The backing field for the Event property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private INamedElement _event;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The value of firstEvent is related to the event. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the event Element. If firstEvent is false, then the corresponding observation event is the time instant the execution exits the event Element.
        ///<p>From package UML::Values.</p>
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("firstEvent")]
        [DescriptionAttribute(@"The value of firstEvent is related to the event. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the event Element. If firstEvent is false, then the corresponding observation event is the time instant the execution exits the event Element.
<p>From package UML::Values.</p>")]
        [CategoryAttribute("TimeObservation")]
        [XmlElementNameAttribute("firstEvent")]
        [XmlAttributeAttribute(true)]
        public bool FirstEvent
        {
            get
            {
                return this._firstEvent;
            }
            set
            {
                if ((this._firstEvent != value))
                {
                    bool old = this._firstEvent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("FirstEvent", e, _firstEventAttribute);
                    this._firstEvent = value;
                    this.OnPropertyChanged("FirstEvent", e, _firstEventAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TimeObservation is determined by the entering or exiting of the event Element during execution.
        ///<p>From package UML::Values.</p>
        /// </summary>
        [DisplayNameAttribute("event")]
        [DescriptionAttribute("The TimeObservation is determined by the entering or exiting of the event Element" +
            " during execution.\n<p>From package UML::Values.</p>")]
        [CategoryAttribute("TimeObservation")]
        [XmlElementNameAttribute("event")]
        [XmlAttributeAttribute(true)]
        public INamedElement Event
        {
            get
            {
                return this._event;
            }
            set
            {
                if ((this._event != value))
                {
                    INamedElement old = this._event;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Event", e, _eventReference);
                    this._event = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEvent;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEvent;
                    }
                    this.OnPropertyChanged("Event", e, _eventReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TimeObservationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//TimeObservation")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveFirstEventAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TimeObservation.ClassInstance)).Resolve("firstEvent")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEventReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TimeObservation.ClassInstance)).Resolve("event")));
        }
        
        /// <summary>
        /// Handles the event that the Event property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEvent(object sender, System.EventArgs eventArgs)
        {
            this.Event = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "EVENT"))
            {
                return this.Event;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FIRSTEVENT"))
            {
                return this.FirstEvent;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EVENT"))
            {
                this.Event = ((INamedElement)(value));
                return;
            }
            if ((feature == "FIRSTEVENT"))
            {
                this.FirstEvent = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FIRSTEVENT"))
            {
                return Observable.Box(new FirstEventProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EVENT"))
            {
                return new EventProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//TimeObservation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TimeObservation class
        /// </summary>
        public class TimeObservationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TimeObservation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TimeObservationReferencedElementsCollection(TimeObservation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Event != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Event == null))
                {
                    INamedElement eventCasted = item.As<INamedElement>();
                    if ((eventCasted != null))
                    {
                        this._parent.Event = eventCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Event = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Event))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Event != null))
                {
                    array[arrayIndex] = this._parent.Event;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Event == item))
                {
                    this._parent.Event = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Event).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the firstEvent property
        /// </summary>
        private sealed class FirstEventProxy : ModelPropertyChange<ITimeObservation, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FirstEventProxy(ITimeObservation modelElement) : 
                    base(modelElement, "firstEvent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.FirstEvent;
                }
                set
                {
                    this.ModelElement.FirstEvent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the event property
        /// </summary>
        private sealed class EventProxy : ModelPropertyChange<ITimeObservation, INamedElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EventProxy(ITimeObservation modelElement) : 
                    base(modelElement, "event")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override INamedElement Value
            {
                get
                {
                    return this.ModelElement.Event;
                }
                set
                {
                    this.ModelElement.Event = value;
                }
            }
        }
    }
}

