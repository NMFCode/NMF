//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A ReduceAction is an Action that reduces a collection to a single value by repeatedly combining the elements of the collection using a reducer Behavior.
    ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//ReduceAction")]
    [DebuggerDisplayAttribute("ReduceAction {Name}")]
    public partial class ReduceAction : Action, IReduceAction, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _reducer_inputs_outputOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveReducer_inputs_outputOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _input_type_is_collectionOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInput_type_is_collectionOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _output_types_are_compatibleOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOutput_types_are_compatibleOperation);
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isOrdered = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isOrderedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsOrderedAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _collectionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveCollectionReference);
        
        /// <summary>
        /// The backing field for the Collection property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IInputPin _collection;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _reducerReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReducerReference);
        
        /// <summary>
        /// The backing field for the Reducer property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBehavior _reducer;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _resultReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveResultReference);
        
        /// <summary>
        /// The backing field for the Result property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IOutputPin _result;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Indicates whether the order of the input collection should determine the order in which the reducer Behavior is applied to its elements.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isOrdered")]
        [DescriptionAttribute("Indicates whether the order of the input collection should determine the order in" +
            " which the reducer Behavior is applied to its elements.\n<p>From package UML::Act" +
            "ions.</p>")]
        [CategoryAttribute("ReduceAction")]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        public bool IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    bool old = this._isOrdered;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsOrdered", e, _isOrderedAttribute);
                    this._isOrdered = value;
                    this.OnPropertyChanged("IsOrdered", e, _isOrderedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The InputPin that provides the collection to be reduced.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("collection")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IInputPin Collection
        {
            get
            {
                return this._collection;
            }
            set
            {
                if ((this._collection != value))
                {
                    IInputPin old = this._collection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Collection", e, _collectionReference);
                    this._collection = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetCollection;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetCollection;
                    }
                    this.OnPropertyChanged("Collection", e, _collectionReference);
                }
            }
        }
        
        /// <summary>
        /// A Behavior that is repreatedly applied to two elements of the input collection to produce a value that is of the same type as elements of the collection.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("reducer")]
        [DescriptionAttribute("A Behavior that is repreatedly applied to two elements of the input collection to" +
            " produce a value that is of the same type as elements of the collection.\n<p>From" +
            " package UML::Actions.</p>")]
        [CategoryAttribute("ReduceAction")]
        [XmlElementNameAttribute("reducer")]
        [XmlAttributeAttribute(true)]
        public IBehavior Reducer
        {
            get
            {
                return this._reducer;
            }
            set
            {
                if ((this._reducer != value))
                {
                    IBehavior old = this._reducer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Reducer", e, _reducerReference);
                    this._reducer = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReducer;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReducer;
                    }
                    this.OnPropertyChanged("Reducer", e, _reducerReference);
                }
            }
        }
        
        /// <summary>
        /// The output pin on which the result value is placed.
        ///&lt;p&gt;From package UML::Actions.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("result")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IOutputPin Result
        {
            get
            {
                return this._result;
            }
            set
            {
                if ((this._result != value))
                {
                    IOutputPin old = this._result;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Result", e, _resultReference);
                    this._result = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetResult;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetResult;
                    }
                    this.OnPropertyChanged("Result", e, _resultReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ReduceActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReduceActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ReduceAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// The reducer Behavior must have two input ownedParameters and one output ownedParameter, where the type of the output Parameter and the type of elements of the input collection conform to the types of the input Parameters.
        ///let inputs: OrderedSet(Parameter) = reducer.inputParameters() in
        ///let outputs: OrderedSet(Parameter) = reducer.outputParameters() in
        ///inputs-&gt;size()=2 and outputs-&gt;size()=1 and
        ///inputs.type-&gt;forAll(t | 
        ///	outputs.type-&gt;forAll(conformsTo(t)) and 
        ///	-- Note that the following only checks the case when the collection is via multiple tokens.
        ///	collection.upperBound()&gt;1 implies collection.type.conformsTo(t))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Reducer_inputs_output(object diagnostics, object context)
        {
            System.Func<IReduceAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReduceAction, object, object, bool>>(_reducer_inputs_outputOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method reducer_inputs_output registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _reducer_inputs_outputOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _reducer_inputs_outputOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _reducer_inputs_outputOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveReducer_inputs_outputOperation()
        {
            return ClassInstance.LookupOperation("reducer_inputs_output");
        }
        
        /// <summary>
        /// The type of the collection InputPin must be a collection.
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Input_type_is_collection(object diagnostics, object context)
        {
            System.Func<IReduceAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReduceAction, object, object, bool>>(_input_type_is_collectionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method input_type_is_collection registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _input_type_is_collectionOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _input_type_is_collectionOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _input_type_is_collectionOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInput_type_is_collectionOperation()
        {
            return ClassInstance.LookupOperation("input_type_is_collection");
        }
        
        /// <summary>
        /// The type of the output of the reducer Behavior must conform to the type of the result OutputPin.
        ///reducer.outputParameters().type-&gt;forAll(conformsTo(result.type))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Output_types_are_compatible(object diagnostics, object context)
        {
            System.Func<IReduceAction, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IReduceAction, object, object, bool>>(_output_types_are_compatibleOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method output_types_are_compatible registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _output_types_are_compatibleOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _output_types_are_compatibleOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _output_types_are_compatibleOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOutput_types_are_compatibleOperation()
        {
            return ClassInstance.LookupOperation("output_types_are_compatible");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsOrderedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReduceAction.ClassInstance)).Resolve("isOrdered")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveCollectionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReduceAction.ClassInstance)).Resolve("collection")));
        }
        
        /// <summary>
        /// Handles the event that the Collection property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCollection(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Collection))
            {
                this.Collection = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveReducerReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReduceAction.ClassInstance)).Resolve("reducer")));
        }
        
        /// <summary>
        /// Handles the event that the Reducer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReducer(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Reducer))
            {
                this.Reducer = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveResultReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.ReduceAction.ClassInstance)).Resolve("result")));
        }
        
        /// <summary>
        /// Handles the event that the Result property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResult(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Result))
            {
                this.Result = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Collection))
            {
                return ModelHelper.CreatePath("collection");
            }
            if ((element == this.Result))
            {
                return ModelHelper.CreatePath("result");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "COLLECTION"))
            {
                return this.Collection;
            }
            if ((reference == "REDUCER"))
            {
                return this.Reducer;
            }
            if ((reference == "RESULT"))
            {
                return this.Result;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISORDERED"))
            {
                return this.IsOrdered;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COLLECTION"))
            {
                this.Collection = ((IInputPin)(value));
                return;
            }
            if ((feature == "REDUCER"))
            {
                this.Reducer = ((IBehavior)(value));
                return;
            }
            if ((feature == "RESULT"))
            {
                this.Result = ((IOutputPin)(value));
                return;
            }
            if ((feature == "ISORDERED"))
            {
                this.IsOrdered = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISORDERED"))
            {
                return Observable.Box(new IsOrderedProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "COLLECTION"))
            {
                return new CollectionProxy(this);
            }
            if ((reference == "REDUCER"))
            {
                return new ReducerProxy(this);
            }
            if ((reference == "RESULT"))
            {
                return new ResultProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//ReduceAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReduceAction class
        /// </summary>
        public class ReduceActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReduceAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReduceActionChildrenCollection(ReduceAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Collection != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Result != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Collection == null))
                {
                    IInputPin collectionCasted = item.As<IInputPin>();
                    if ((collectionCasted != null))
                    {
                        this._parent.Collection = collectionCasted;
                        return;
                    }
                }
                if ((this._parent.Result == null))
                {
                    IOutputPin resultCasted = item.As<IOutputPin>();
                    if ((resultCasted != null))
                    {
                        this._parent.Result = resultCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Collection = null;
                this._parent.Result = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Collection))
                {
                    return true;
                }
                if ((item == this._parent.Result))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Collection != null))
                {
                    array[arrayIndex] = this._parent.Collection;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Result != null))
                {
                    array[arrayIndex] = this._parent.Result;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Collection == item))
                {
                    this._parent.Collection = null;
                    return true;
                }
                if ((this._parent.Result == item))
                {
                    this._parent.Result = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Collection).Concat(this._parent.Result).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReduceAction class
        /// </summary>
        public class ReduceActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReduceAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReduceActionReferencedElementsCollection(ReduceAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Collection != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Reducer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Result != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Collection == null))
                {
                    IInputPin collectionCasted = item.As<IInputPin>();
                    if ((collectionCasted != null))
                    {
                        this._parent.Collection = collectionCasted;
                        return;
                    }
                }
                if ((this._parent.Reducer == null))
                {
                    IBehavior reducerCasted = item.As<IBehavior>();
                    if ((reducerCasted != null))
                    {
                        this._parent.Reducer = reducerCasted;
                        return;
                    }
                }
                if ((this._parent.Result == null))
                {
                    IOutputPin resultCasted = item.As<IOutputPin>();
                    if ((resultCasted != null))
                    {
                        this._parent.Result = resultCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Collection = null;
                this._parent.Reducer = null;
                this._parent.Result = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Collection))
                {
                    return true;
                }
                if ((item == this._parent.Reducer))
                {
                    return true;
                }
                if ((item == this._parent.Result))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Collection != null))
                {
                    array[arrayIndex] = this._parent.Collection;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Reducer != null))
                {
                    array[arrayIndex] = this._parent.Reducer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Result != null))
                {
                    array[arrayIndex] = this._parent.Result;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Collection == item))
                {
                    this._parent.Collection = null;
                    return true;
                }
                if ((this._parent.Reducer == item))
                {
                    this._parent.Reducer = null;
                    return true;
                }
                if ((this._parent.Result == item))
                {
                    this._parent.Result = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Collection).Concat(this._parent.Reducer).Concat(this._parent.Result).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<IReduceAction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(IReduceAction modelElement) : 
                    base(modelElement, "isOrdered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the collection property
        /// </summary>
        private sealed class CollectionProxy : ModelPropertyChange<IReduceAction, IInputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CollectionProxy(IReduceAction modelElement) : 
                    base(modelElement, "collection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPin Value
            {
                get
                {
                    return this.ModelElement.Collection;
                }
                set
                {
                    this.ModelElement.Collection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reducer property
        /// </summary>
        private sealed class ReducerProxy : ModelPropertyChange<IReduceAction, IBehavior>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReducerProxy(IReduceAction modelElement) : 
                    base(modelElement, "reducer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBehavior Value
            {
                get
                {
                    return this.ModelElement.Reducer;
                }
                set
                {
                    this.ModelElement.Reducer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the result property
        /// </summary>
        private sealed class ResultProxy : ModelPropertyChange<IReduceAction, IOutputPin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResultProxy(IReduceAction modelElement) : 
                    base(modelElement, "result")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutputPin Value
            {
                get
                {
                    return this.ModelElement.Result;
                }
                set
                {
                    this.ModelElement.Result = value;
                }
            }
        }
    }
}
