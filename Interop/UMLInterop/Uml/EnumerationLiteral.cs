//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// An EnumerationLiteral is a user-defined data value for an Enumeration.
    ///<p>From package UML::SimpleClassifiers.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//EnumerationLiteral")]
    [DebuggerDisplayAttribute("EnumerationLiteral {Name}")]
    public partial class EnumerationLiteral : InstanceSpecification, IEnumerationLiteral, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getClassifiersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetClassifiersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getClassifierOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetClassifierOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _enumerationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveEnumerationReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The Enumeration that this EnumerationLiteral is a member of.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("enumeration")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedLiteral")]
        public NMF.Interop.Uml.IEnumeration Enumeration
        {
            get
            {
                return ModelHelper.CastAs<NMF.Interop.Uml.IEnumeration>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EnumerationLiteralReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//EnumerationLiteral")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public ISetExpression<IClassifier> GetClassifiers()
        {
            System.Func<IEnumerationLiteral, ISetExpression<IClassifier>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IEnumerationLiteral, ISetExpression<IClassifier>>>(_getClassifiersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getClassifiers registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getClassifiersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getClassifiersOperation.Value, e));
            ISetExpression<IClassifier> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getClassifiersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetClassifiersOperation()
        {
            return ClassInstance.LookupOperation("getClassifiers");
        }
        
        /// <summary>
        /// Derivation of Enumeration::/classifier
        ///result = (enumeration)
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        public NMF.Interop.Uml.IEnumeration GetClassifier()
        {
            System.Func<IEnumerationLiteral, NMF.Interop.Uml.IEnumeration> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IEnumerationLiteral, NMF.Interop.Uml.IEnumeration>>(_getClassifierOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getClassifier registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getClassifierOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getClassifierOperation.Value, e));
            NMF.Interop.Uml.IEnumeration result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getClassifierOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetClassifierOperation()
        {
            return ClassInstance.LookupOperation("getClassifier");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveEnumerationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.EnumerationLiteral.ClassInstance)).Resolve("enumeration")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            NMF.Interop.Uml.IEnumeration oldEnumeration = ModelHelper.CastAs<NMF.Interop.Uml.IEnumeration>(oldParent);
            NMF.Interop.Uml.IEnumeration newEnumeration = ModelHelper.CastAs<NMF.Interop.Uml.IEnumeration>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldEnumeration, newEnumeration);
            this.OnPropertyChanging("Enumeration", e, _enumerationReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            NMF.Interop.Uml.IEnumeration oldEnumeration = ModelHelper.CastAs<NMF.Interop.Uml.IEnumeration>(oldParent);
            NMF.Interop.Uml.IEnumeration newEnumeration = ModelHelper.CastAs<NMF.Interop.Uml.IEnumeration>(newParent);
            if ((oldEnumeration != null))
            {
                oldEnumeration.OwnedLiteral.Remove(this);
            }
            if ((newEnumeration != null))
            {
                newEnumeration.OwnedLiteral.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldEnumeration, newEnumeration);
            this.OnPropertyChanged("Enumeration", e, _enumerationReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ENUMERATION"))
            {
                return this.Enumeration;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENUMERATION"))
            {
                this.Enumeration = ((NMF.Interop.Uml.IEnumeration)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ENUMERATION"))
            {
                return new EnumerationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//EnumerationLiteral")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EnumerationLiteral class
        /// </summary>
        public class EnumerationLiteralReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EnumerationLiteral _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EnumerationLiteralReferencedElementsCollection(EnumerationLiteral parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Enumeration != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Enumeration == null))
                {
                    NMF.Interop.Uml.IEnumeration enumerationCasted = item.As<NMF.Interop.Uml.IEnumeration>();
                    if ((enumerationCasted != null))
                    {
                        this._parent.Enumeration = enumerationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Enumeration = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Enumeration))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Enumeration != null))
                {
                    array[arrayIndex] = this._parent.Enumeration;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Enumeration == item))
                {
                    this._parent.Enumeration = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Enumeration).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the enumeration property
        /// </summary>
        private sealed class EnumerationProxy : ModelPropertyChange<IEnumerationLiteral, NMF.Interop.Uml.IEnumeration>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnumerationProxy(IEnumerationLiteral modelElement) : 
                    base(modelElement, "enumeration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Uml.IEnumeration Value
            {
                get
                {
                    return this.ModelElement.Enumeration;
                }
                set
                {
                    this.ModelElement.Enumeration = value;
                }
            }
        }
    }
}

