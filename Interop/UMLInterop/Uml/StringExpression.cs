//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A StringExpression is an Expression that specifies a String value that is derived by concatenating a sequence of operands with String values or a sequence of subExpressions, some of which might be template parameters.
    ///<p>From package UML::Values.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//StringExpression")]
    [DebuggerDisplayAttribute("StringExpression {Name}")]
    public partial class StringExpression : Expression, IStringExpression, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _operandsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOperandsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _subexpressionsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSubexpressionsOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _owningExpressionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwningExpressionReference);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _subExpressionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSubExpressionReference);
        
        /// <summary>
        /// The backing field for the SubExpression property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private StringExpressionSubExpressionCollection _subExpression;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isTemplateOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsTemplateOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _parameterableElementsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveParameterableElementsOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _templateBindingReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTemplateBindingReference);
        
        /// <summary>
        /// The backing field for the TemplateBinding property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TemplateableElementTemplateBindingCollection _templateBinding;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedTemplateSignatureReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedTemplateSignatureReference);
        
        /// <summary>
        /// The backing field for the OwnedTemplateSignature property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITemplateSignature _ownedTemplateSignature;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public StringExpression()
        {
            this._subExpression = new StringExpressionSubExpressionCollection(this);
            this._subExpression.CollectionChanging += this.SubExpressionCollectionChanging;
            this._subExpression.CollectionChanged += this.SubExpressionCollectionChanged;
            this._templateBinding = new TemplateableElementTemplateBindingCollection(this);
            this._templateBinding.CollectionChanging += this.TemplateBindingCollectionChanging;
            this._templateBinding.CollectionChanged += this.TemplateBindingCollectionChanged;
        }
        
        /// <summary>
        /// The StringExpression of which this StringExpression is a subExpression.
        ///<p>From package UML::Values.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("owningExpression")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("subExpression")]
        public IStringExpression OwningExpression
        {
            get
            {
                return ModelHelper.CastAs<IStringExpression>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The StringExpressions that constitute this StringExpression.
        ///<p>From package UML::Values.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("subExpression")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("owningExpression")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IStringExpression> SubExpression
        {
            get
            {
                return this._subExpression;
            }
        }
        
        /// <summary>
        /// The optional TemplateBindings from this TemplateableElement to one or more templates.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("templateBinding")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("boundElement")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ITemplateBinding> TemplateBinding
        {
            get
            {
                return this._templateBinding;
            }
        }
        
        /// <summary>
        /// The optional TemplateSignature specifying the formal TemplateParameters for this TemplateableElement. If a TemplateableElement has a TemplateSignature, then it is a template.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedTemplateSignature")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("template")]
        public ITemplateSignature OwnedTemplateSignature
        {
            get
            {
                return this._ownedTemplateSignature;
            }
            set
            {
                if ((this._ownedTemplateSignature != value))
                {
                    ITemplateSignature old = this._ownedTemplateSignature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("OwnedTemplateSignature", e, _ownedTemplateSignatureReference);
                    this._ownedTemplateSignature = value;
                    if ((old != null))
                    {
                        old.Template = null;
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetOwnedTemplateSignature;
                    }
                    if ((value != null))
                    {
                        value.Template = this;
                        value.Parent = this;
                        value.ParentChanged += this.OnResetOwnedTemplateSignature;
                    }
                    this.OnPropertyChanged("OwnedTemplateSignature", e, _ownedTemplateSignatureReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new StringExpressionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StringExpressionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StringExpression")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// All the operands of a StringExpression must be LiteralStrings
        ///operand->forAll (oclIsKindOf (LiteralString))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Operands(object diagnostics, object context)
        {
            System.Func<IStringExpression, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStringExpression, object, object, bool>>(_operandsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method operands registered. Use the method broker " +
                        "to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _operandsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _operandsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _operandsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOperandsOperation()
        {
            return ClassInstance.LookupOperation("operands");
        }
        
        /// <summary>
        /// If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to define a collating sequence between operands and subexpressions).
        ///if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Subexpressions(object diagnostics, object context)
        {
            System.Func<IStringExpression, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IStringExpression, object, object, bool>>(_subexpressionsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method subexpressions registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _subexpressionsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _subexpressionsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _subexpressionsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSubexpressionsOperation()
        {
            return ClassInstance.LookupOperation("subexpressions");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwningExpressionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StringExpression.ClassInstance)).Resolve("owningExpression")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IStringExpression oldOwningExpression = ModelHelper.CastAs<IStringExpression>(oldParent);
            IStringExpression newOwningExpression = ModelHelper.CastAs<IStringExpression>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwningExpression, newOwningExpression);
            this.OnPropertyChanging("OwningExpression", e, _owningExpressionReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IStringExpression oldOwningExpression = ModelHelper.CastAs<IStringExpression>(oldParent);
            IStringExpression newOwningExpression = ModelHelper.CastAs<IStringExpression>(newParent);
            if ((oldOwningExpression != null))
            {
                oldOwningExpression.SubExpression.Remove(this);
            }
            if ((newOwningExpression != null))
            {
                newOwningExpression.SubExpression.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldOwningExpression, newOwningExpression);
            this.OnPropertyChanged("OwningExpression", e, _owningExpressionReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSubExpressionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.StringExpression.ClassInstance)).Resolve("subExpression")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SubExpression property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubExpressionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SubExpression", e, _subExpressionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SubExpression property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubExpressionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SubExpression", e, _subExpressionReference);
        }
        
        /// <summary>
        /// The query isTemplate() returns whether this TemplateableElement is actually a template.
        ///result = (ownedTemplateSignature <> null)
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        public bool IsTemplate()
        {
            System.Func<ITemplateableElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ITemplateableElement, bool>>(_isTemplateOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isTemplate registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isTemplateOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isTemplateOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isTemplateOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsTemplateOperation()
        {
            return ClassInstance.LookupOperation("isTemplate");
        }
        
        /// <summary>
        /// The query parameterableElements() returns the set of ParameterableElements that may be used as the parameteredElements for a TemplateParameter of this TemplateableElement. By default, this set includes all the ownedElements. Subclasses may override this operation if they choose to restrict the set of ParameterableElements.
        ///result = (self.allOwnedElements()->select(oclIsKindOf(ParameterableElement)).oclAsType(ParameterableElement)->asSet())
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        public ISetExpression<IParameterableElement> ParameterableElements()
        {
            System.Func<ITemplateableElement, ISetExpression<IParameterableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ITemplateableElement, ISetExpression<IParameterableElement>>>(_parameterableElementsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method parameterableElements registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _parameterableElementsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _parameterableElementsOperation.Value, e));
            ISetExpression<IParameterableElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _parameterableElementsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveParameterableElementsOperation()
        {
            return ClassInstance.LookupOperation("parameterableElements");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTemplateBindingReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateableElement.ClassInstance)).Resolve("templateBinding")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TemplateBinding property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TemplateBindingCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("TemplateBinding", e, _templateBindingReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TemplateBinding property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TemplateBindingCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TemplateBinding", e, _templateBindingReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedTemplateSignatureReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateableElement.ClassInstance)).Resolve("ownedTemplateSignature")));
        }
        
        /// <summary>
        /// Handles the event that the OwnedTemplateSignature property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOwnedTemplateSignature(object sender, System.EventArgs eventArgs)
        {
            this.OwnedTemplateSignature = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int subExpressionIndex = ModelHelper.IndexOfReference(this.SubExpression, element);
            if ((subExpressionIndex != -1))
            {
                return ModelHelper.CreatePath("subExpression", subExpressionIndex);
            }
            int templateBindingIndex = ModelHelper.IndexOfReference(this.TemplateBinding, element);
            if ((templateBindingIndex != -1))
            {
                return ModelHelper.CreatePath("templateBinding", templateBindingIndex);
            }
            if ((element == this.OwnedTemplateSignature))
            {
                return ModelHelper.CreatePath("ownedTemplateSignature");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OWNINGEXPRESSION"))
            {
                return this.OwningExpression;
            }
            if ((reference == "SUBEXPRESSION"))
            {
                if ((index < this.SubExpression.Count))
                {
                    return this.SubExpression[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "TEMPLATEBINDING"))
            {
                if ((index < this.TemplateBinding.Count))
                {
                    return this.TemplateBinding[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDTEMPLATESIGNATURE"))
            {
                return this.OwnedTemplateSignature;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SUBEXPRESSION"))
            {
                return this._subExpression;
            }
            if ((feature == "TEMPLATEBINDING"))
            {
                return this._templateBinding;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OWNINGEXPRESSION"))
            {
                this.OwningExpression = ((IStringExpression)(value));
                return;
            }
            if ((feature == "OWNEDTEMPLATESIGNATURE"))
            {
                this.OwnedTemplateSignature = ((ITemplateSignature)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OWNINGEXPRESSION"))
            {
                return new OwningExpressionProxy(this);
            }
            if ((reference == "OWNEDTEMPLATESIGNATURE"))
            {
                return new OwnedTemplateSignatureProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._subExpression))
            {
                return "subExpression";
            }
            if ((container == this._templateBinding))
            {
                return "templateBinding";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//StringExpression")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StringExpression class
        /// </summary>
        public class StringExpressionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StringExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StringExpressionChildrenCollection(StringExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.SubExpression.Count);
                    count = (count + this._parent.TemplateBinding.Count);
                    if ((this._parent.OwnedTemplateSignature != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SubExpression.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TemplateBinding.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SubExpression.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TemplateBinding.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IStringExpression subExpressionCasted = item.As<IStringExpression>();
                if ((subExpressionCasted != null))
                {
                    this._parent.SubExpression.Add(subExpressionCasted);
                }
                ITemplateBinding templateBindingCasted = item.As<ITemplateBinding>();
                if ((templateBindingCasted != null))
                {
                    this._parent.TemplateBinding.Add(templateBindingCasted);
                }
                if ((this._parent.OwnedTemplateSignature == null))
                {
                    ITemplateSignature ownedTemplateSignatureCasted = item.As<ITemplateSignature>();
                    if ((ownedTemplateSignatureCasted != null))
                    {
                        this._parent.OwnedTemplateSignature = ownedTemplateSignatureCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SubExpression.Clear();
                this._parent.TemplateBinding.Clear();
                this._parent.OwnedTemplateSignature = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.SubExpression.Contains(item))
                {
                    return true;
                }
                if (this._parent.TemplateBinding.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.OwnedTemplateSignature))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> subExpressionEnumerator = this._parent.SubExpression.GetEnumerator();
                try
                {
                    for (
                    ; subExpressionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subExpressionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subExpressionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> templateBindingEnumerator = this._parent.TemplateBinding.GetEnumerator();
                try
                {
                    for (
                    ; templateBindingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = templateBindingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    templateBindingEnumerator.Dispose();
                }
                if ((this._parent.OwnedTemplateSignature != null))
                {
                    array[arrayIndex] = this._parent.OwnedTemplateSignature;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IStringExpression stringExpressionItem = item.As<IStringExpression>();
                if (((stringExpressionItem != null) 
                            && this._parent.SubExpression.Remove(stringExpressionItem)))
                {
                    return true;
                }
                ITemplateBinding templateBindingItem = item.As<ITemplateBinding>();
                if (((templateBindingItem != null) 
                            && this._parent.TemplateBinding.Remove(templateBindingItem)))
                {
                    return true;
                }
                if ((this._parent.OwnedTemplateSignature == item))
                {
                    this._parent.OwnedTemplateSignature = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SubExpression).Concat(this._parent.TemplateBinding).Concat(this._parent.OwnedTemplateSignature).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StringExpression class
        /// </summary>
        public class StringExpressionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StringExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StringExpressionReferencedElementsCollection(StringExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OwningExpression != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.SubExpression.Count);
                    count = (count + this._parent.TemplateBinding.Count);
                    if ((this._parent.OwnedTemplateSignature != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.SubExpression.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TemplateBinding.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.SubExpression.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TemplateBinding.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OwningExpression == null))
                {
                    IStringExpression owningExpressionCasted = item.As<IStringExpression>();
                    if ((owningExpressionCasted != null))
                    {
                        this._parent.OwningExpression = owningExpressionCasted;
                        return;
                    }
                }
                IStringExpression subExpressionCasted = item.As<IStringExpression>();
                if ((subExpressionCasted != null))
                {
                    this._parent.SubExpression.Add(subExpressionCasted);
                }
                ITemplateBinding templateBindingCasted = item.As<ITemplateBinding>();
                if ((templateBindingCasted != null))
                {
                    this._parent.TemplateBinding.Add(templateBindingCasted);
                }
                if ((this._parent.OwnedTemplateSignature == null))
                {
                    ITemplateSignature ownedTemplateSignatureCasted = item.As<ITemplateSignature>();
                    if ((ownedTemplateSignatureCasted != null))
                    {
                        this._parent.OwnedTemplateSignature = ownedTemplateSignatureCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwningExpression = null;
                this._parent.SubExpression.Clear();
                this._parent.TemplateBinding.Clear();
                this._parent.OwnedTemplateSignature = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OwningExpression))
                {
                    return true;
                }
                if (this._parent.SubExpression.Contains(item))
                {
                    return true;
                }
                if (this._parent.TemplateBinding.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.OwnedTemplateSignature))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OwningExpression != null))
                {
                    array[arrayIndex] = this._parent.OwningExpression;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> subExpressionEnumerator = this._parent.SubExpression.GetEnumerator();
                try
                {
                    for (
                    ; subExpressionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subExpressionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subExpressionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> templateBindingEnumerator = this._parent.TemplateBinding.GetEnumerator();
                try
                {
                    for (
                    ; templateBindingEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = templateBindingEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    templateBindingEnumerator.Dispose();
                }
                if ((this._parent.OwnedTemplateSignature != null))
                {
                    array[arrayIndex] = this._parent.OwnedTemplateSignature;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OwningExpression == item))
                {
                    this._parent.OwningExpression = null;
                    return true;
                }
                IStringExpression stringExpressionItem = item.As<IStringExpression>();
                if (((stringExpressionItem != null) 
                            && this._parent.SubExpression.Remove(stringExpressionItem)))
                {
                    return true;
                }
                ITemplateBinding templateBindingItem = item.As<ITemplateBinding>();
                if (((templateBindingItem != null) 
                            && this._parent.TemplateBinding.Remove(templateBindingItem)))
                {
                    return true;
                }
                if ((this._parent.OwnedTemplateSignature == item))
                {
                    this._parent.OwnedTemplateSignature = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwningExpression).Concat(this._parent.SubExpression).Concat(this._parent.TemplateBinding).Concat(this._parent.OwnedTemplateSignature).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the owningExpression property
        /// </summary>
        private sealed class OwningExpressionProxy : ModelPropertyChange<IStringExpression, IStringExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwningExpressionProxy(IStringExpression modelElement) : 
                    base(modelElement, "owningExpression")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStringExpression Value
            {
                get
                {
                    return this.ModelElement.OwningExpression;
                }
                set
                {
                    this.ModelElement.OwningExpression = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ownedTemplateSignature property
        /// </summary>
        private sealed class OwnedTemplateSignatureProxy : ModelPropertyChange<ITemplateableElement, ITemplateSignature>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OwnedTemplateSignatureProxy(ITemplateableElement modelElement) : 
                    base(modelElement, "ownedTemplateSignature")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITemplateSignature Value
            {
                get
                {
                    return this.ModelElement.OwnedTemplateSignature;
                }
                set
                {
                    this.ModelElement.OwnedTemplateSignature = value;
                }
            }
        }
    }
}

