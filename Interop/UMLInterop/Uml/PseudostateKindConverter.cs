//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    public class PseudostateKindConverter : TypeConverter
    {
        
        public override bool CanConvertFrom(ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        public override bool CanConvertTo(ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(PseudostateKind);
            }
            string valueString = value.ToString();
            if ((valueString == "initial"))
            {
                return PseudostateKind.Initial;
            }
            if ((valueString == "deepHistory"))
            {
                return PseudostateKind.DeepHistory;
            }
            if ((valueString == "shallowHistory"))
            {
                return PseudostateKind.ShallowHistory;
            }
            if ((valueString == "join"))
            {
                return PseudostateKind.Join;
            }
            if ((valueString == "fork"))
            {
                return PseudostateKind.Fork;
            }
            if ((valueString == "junction"))
            {
                return PseudostateKind.Junction;
            }
            if ((valueString == "choice"))
            {
                return PseudostateKind.Choice;
            }
            if ((valueString == "entryPoint"))
            {
                return PseudostateKind.EntryPoint;
            }
            if ((valueString == "exitPoint"))
            {
                return PseudostateKind.ExitPoint;
            }
            if ((valueString == "terminate"))
            {
                return PseudostateKind.Terminate;
            }
            return default(PseudostateKind);
        }
        
        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            PseudostateKind valueCasted = ((PseudostateKind)(value));
            if ((valueCasted == PseudostateKind.Initial))
            {
                return "initial";
            }
            if ((valueCasted == PseudostateKind.DeepHistory))
            {
                return "deepHistory";
            }
            if ((valueCasted == PseudostateKind.ShallowHistory))
            {
                return "shallowHistory";
            }
            if ((valueCasted == PseudostateKind.Join))
            {
                return "join";
            }
            if ((valueCasted == PseudostateKind.Fork))
            {
                return "fork";
            }
            if ((valueCasted == PseudostateKind.Junction))
            {
                return "junction";
            }
            if ((valueCasted == PseudostateKind.Choice))
            {
                return "choice";
            }
            if ((valueCasted == PseudostateKind.EntryPoint))
            {
                return "entryPoint";
            }
            if ((valueCasted == PseudostateKind.ExitPoint))
            {
                return "exitPoint";
            }
            if ((valueCasted == PseudostateKind.Terminate))
            {
                return "terminate";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}

