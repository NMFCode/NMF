//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A BehavioralFeature is a feature of a Classifier that specifies an aspect of the behavior of its instances.  A BehavioralFeature is implemented (realized) by a Behavior. A BehavioralFeature specifies that a Classifier will respond to a designated request by invoking its implementing method.
    ///<p>From package UML::Classification.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//BehavioralFeature")]
    [DebuggerDisplayAttribute("BehavioralFeature {Name}")]
    public abstract partial class BehavioralFeature : Namespace, IBehavioralFeature, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _abstract_no_methodOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAbstract_no_methodOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createReturnResultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateReturnResultOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _inputParametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInputParametersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _outputParametersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOutputParametersOperation);
        
        /// <summary>
        /// The backing field for the Concurrency property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private CallConcurrencyKind _concurrency = CallConcurrencyKind.Sequential;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _concurrencyAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveConcurrencyAttribute);
        
        /// <summary>
        /// The backing field for the IsAbstract property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isAbstract = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isAbstractAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsAbstractAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _methodReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMethodReference);
        
        /// <summary>
        /// The backing field for the Method property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private BehavioralFeatureMethodCollection _method;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedParameterReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedParameterReference);
        
        /// <summary>
        /// The backing field for the OwnedParameter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<NMF.Interop.Uml.IParameter> _ownedParameter;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedParameterSetReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedParameterSetReference);
        
        /// <summary>
        /// The backing field for the OwnedParameterSet property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IParameterSet> _ownedParameterSet;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _raisedExceptionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRaisedExceptionReference);
        
        /// <summary>
        /// The backing field for the RaisedException property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<NMF.Interop.Uml.IType> _raisedException;
        
        /// <summary>
        /// The backing field for the IsStatic property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isStatic = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isStaticAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsStaticAttribute);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _redefinition_consistentOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRedefinition_consistentOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _non_leaf_redefinitionOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNon_leaf_redefinitionOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _redefinition_context_validOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveRedefinition_context_validOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isConsistentWithOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsConsistentWithOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isRedefinitionContextValidOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsRedefinitionContextValidOperation);
        
        /// <summary>
        /// The backing field for the IsLeaf property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isLeaf = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isLeafAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsLeafAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public BehavioralFeature()
        {
            this._method = new BehavioralFeatureMethodCollection(this);
            this._method.CollectionChanging += this.MethodCollectionChanging;
            this._method.CollectionChanged += this.MethodCollectionChanged;
            this._ownedParameter = new ObservableCompositionOrderedSet<NMF.Interop.Uml.IParameter>(this);
            this._ownedParameter.CollectionChanging += this.OwnedParameterCollectionChanging;
            this._ownedParameter.CollectionChanged += this.OwnedParameterCollectionChanged;
            this._ownedParameterSet = new ObservableCompositionOrderedSet<IParameterSet>(this);
            this._ownedParameterSet.CollectionChanging += this.OwnedParameterSetCollectionChanging;
            this._ownedParameterSet.CollectionChanged += this.OwnedParameterSetCollectionChanged;
            this._raisedException = new ObservableAssociationSet<NMF.Interop.Uml.IType>();
            this._raisedException.CollectionChanging += this.RaisedExceptionCollectionChanging;
            this._raisedException.CollectionChanged += this.RaisedExceptionCollectionChanged;
        }
        
        /// <summary>
        /// Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a Class with isActive being false). Active instances control access to their own BehavioralFeatures.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(CallConcurrencyKind.Sequential)]
        [DisplayNameAttribute("concurrency")]
        [DescriptionAttribute("Specifies the semantics of concurrent calls to the same passive instance (i.e., a" +
            "n instance originating from a Class with isActive being false). Active instances" +
            " control access to their own BehavioralFeatures.\n<p>From package UML::Classifica" +
            "tion.</p>")]
        [CategoryAttribute("BehavioralFeature")]
        [XmlElementNameAttribute("concurrency")]
        [XmlAttributeAttribute(true)]
        public CallConcurrencyKind Concurrency
        {
            get
            {
                return this._concurrency;
            }
            set
            {
                if ((this._concurrency != value))
                {
                    CallConcurrencyKind old = this._concurrency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Concurrency", e, _concurrencyAttribute);
                    this._concurrency = value;
                    this.OnPropertyChanged("Concurrency", e, _concurrencyAttribute);
                }
            }
        }
        
        /// <summary>
        /// If true, then the BehavioralFeature does not have an implementation, and one must be supplied by a more specific Classifier. If false, the BehavioralFeature must have an implementation in the Classifier or one must be inherited.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isAbstract")]
        [DescriptionAttribute(@"If true, then the BehavioralFeature does not have an implementation, and one must be supplied by a more specific Classifier. If false, the BehavioralFeature must have an implementation in the Classifier or one must be inherited.
<p>From package UML::Classification.</p>")]
        [CategoryAttribute("BehavioralFeature")]
        [XmlElementNameAttribute("isAbstract")]
        [XmlAttributeAttribute(true)]
        public bool IsAbstract
        {
            get
            {
                return this._isAbstract;
            }
            set
            {
                if ((this._isAbstract != value))
                {
                    bool old = this._isAbstract;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsAbstract", e, _isAbstractAttribute);
                    this._isAbstract = value;
                    this.OnPropertyChanged("IsAbstract", e, _isAbstractAttribute);
                }
            }
        }
        
        /// <summary>
        /// A Behavior that implements the BehavioralFeature. There may be at most one Behavior for a particular pairing of a Classifier (as owner of the Behavior) and a BehavioralFeature (as specification of the Behavior).
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("method")]
        [DescriptionAttribute("A Behavior that implements the BehavioralFeature. There may be at most one Behavi" +
            "or for a particular pairing of a Classifier (as owner of the Behavior) and a Beh" +
            "avioralFeature (as specification of the Behavior).\n<p>From package UML::Classifi" +
            "cation.</p>")]
        [CategoryAttribute("BehavioralFeature")]
        [XmlElementNameAttribute("method")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("specification")]
        [ConstantAttribute()]
        public ISetExpression<IBehavior> Method
        {
            get
            {
                return this._method;
            }
        }
        
        /// <summary>
        /// The ordered set of formal Parameters of this BehavioralFeature.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedParameter")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Interop.Uml.IParameter> OwnedParameter
        {
            get
            {
                return this._ownedParameter;
            }
        }
        
        /// <summary>
        /// The ParameterSets owned by this BehavioralFeature.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedParameterSet")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IParameterSet> OwnedParameterSet
        {
            get
            {
                return this._ownedParameterSet;
            }
        }
        
        /// <summary>
        /// The Types representing exceptions that may be raised during an invocation of this BehavioralFeature.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("raisedException")]
        [DescriptionAttribute("The Types representing exceptions that may be raised during an invocation of this" +
            " BehavioralFeature.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("BehavioralFeature")]
        [XmlElementNameAttribute("raisedException")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<NMF.Interop.Uml.IType> RaisedException
        {
            get
            {
                return this._raisedException;
            }
        }
        
        /// <summary>
        /// Specifies whether this Feature characterizes individual instances classified by the Classifier (false) or the Classifier itself (true).
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isStatic")]
        [DescriptionAttribute("Specifies whether this Feature characterizes individual instances classified by t" +
            "he Classifier (false) or the Classifier itself (true).\n<p>From package UML::Clas" +
            "sification.</p>")]
        [CategoryAttribute("Feature")]
        [XmlElementNameAttribute("isStatic")]
        [XmlAttributeAttribute(true)]
        public bool IsStatic
        {
            get
            {
                return this._isStatic;
            }
            set
            {
                if ((this._isStatic != value))
                {
                    bool old = this._isStatic;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsStatic", e, _isStaticAttribute);
                    this._isStatic = value;
                    this.OnPropertyChanged("IsStatic", e, _isStaticAttribute);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether it is possible to further redefine a RedefinableElement. If the value is true, then it is not possible to further redefine the RedefinableElement.
        ///<p>From package UML::Classification.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isLeaf")]
        [DescriptionAttribute("Indicates whether it is possible to further redefine a RedefinableElement. If the" +
            " value is true, then it is not possible to further redefine the RedefinableEleme" +
            "nt.\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("RedefinableElement")]
        [XmlElementNameAttribute("isLeaf")]
        [XmlAttributeAttribute(true)]
        public bool IsLeaf
        {
            get
            {
                return this._isLeaf;
            }
            set
            {
                if ((this._isLeaf != value))
                {
                    bool old = this._isLeaf;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsLeaf", e, _isLeafAttribute);
                    this._isLeaf = value;
                    this.OnPropertyChanged("IsLeaf", e, _isLeafAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new BehavioralFeatureChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BehavioralFeatureReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//BehavioralFeature")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// When isAbstract is true there are no methods.
        ///isAbstract implies method->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Abstract_no_method(object diagnostics, object context)
        {
            System.Func<IBehavioralFeature, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavioralFeature, object, object, bool>>(_abstract_no_methodOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method abstract_no_method registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _abstract_no_methodOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _abstract_no_methodOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _abstract_no_methodOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAbstract_no_methodOperation()
        {
            return ClassInstance.LookupOperation("abstract_no_method");
        }
        
        /// <summary>
        /// Creates a return result parameter with the specified name and type.
        /// </summary>
        /// <param name="name">The name for the new return result, or null.</param>
        /// <param name="type">The type for the new return result, or null.</param>
        public NMF.Interop.Uml.IParameter CreateReturnResult(string name, NMF.Interop.Uml.IType type)
        {
            System.Func<IBehavioralFeature, string, NMF.Interop.Uml.IType, NMF.Interop.Uml.IParameter> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavioralFeature, string, NMF.Interop.Uml.IType, NMF.Interop.Uml.IParameter>>(_createReturnResultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createReturnResult registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createReturnResultOperation.Value, name, type);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createReturnResultOperation.Value, e));
            NMF.Interop.Uml.IParameter result = handler.Invoke(this, name, type);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createReturnResultOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateReturnResultOperation()
        {
            return ClassInstance.LookupOperation("createReturnResult");
        }
        
        /// <summary>
        /// The ownedParameters with direction in and inout.
        ///result = (ownedParameter->select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout))
        ///<p>From package UML::Classification.</p>
        /// </summary>
        public IOrderedSetExpression<NMF.Interop.Uml.IParameter> InputParameters()
        {
            System.Func<IBehavioralFeature, IOrderedSetExpression<NMF.Interop.Uml.IParameter>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavioralFeature, IOrderedSetExpression<NMF.Interop.Uml.IParameter>>>(_inputParametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method inputParameters registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _inputParametersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _inputParametersOperation.Value, e));
            IOrderedSetExpression<NMF.Interop.Uml.IParameter> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _inputParametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInputParametersOperation()
        {
            return ClassInstance.LookupOperation("inputParameters");
        }
        
        /// <summary>
        /// The ownedParameters with direction out, inout, or return.
        ///result = (ownedParameter->select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))
        ///<p>From package UML::Classification.</p>
        /// </summary>
        public IOrderedSetExpression<NMF.Interop.Uml.IParameter> OutputParameters()
        {
            System.Func<IBehavioralFeature, IOrderedSetExpression<NMF.Interop.Uml.IParameter>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavioralFeature, IOrderedSetExpression<NMF.Interop.Uml.IParameter>>>(_outputParametersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method outputParameters registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _outputParametersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _outputParametersOperation.Value, e));
            IOrderedSetExpression<NMF.Interop.Uml.IParameter> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _outputParametersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOutputParametersOperation()
        {
            return ClassInstance.LookupOperation("outputParameters");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveConcurrencyAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BehavioralFeature.ClassInstance)).Resolve("concurrency")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsAbstractAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BehavioralFeature.ClassInstance)).Resolve("isAbstract")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMethodReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BehavioralFeature.ClassInstance)).Resolve("method")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Method property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MethodCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Method", e, _methodReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Method property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MethodCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Method", e, _methodReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedParameterReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BehavioralFeature.ClassInstance)).Resolve("ownedParameter")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedParameter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedParameter", e, _ownedParameterReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedParameter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedParameter", e, _ownedParameterReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedParameterSetReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BehavioralFeature.ClassInstance)).Resolve("ownedParameterSet")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedParameterSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterSetCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedParameterSet", e, _ownedParameterSetReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedParameterSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterSetCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedParameterSet", e, _ownedParameterSetReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRaisedExceptionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BehavioralFeature.ClassInstance)).Resolve("raisedException")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RaisedException property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RaisedExceptionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RaisedException", e, _raisedExceptionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RaisedException property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RaisedExceptionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RaisedException", e, _raisedExceptionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsStaticAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Feature.ClassInstance)).Resolve("isStatic")));
        }
        
        /// <summary>
        /// A redefining element must be consistent with each redefined element.
        ///redefinedElement->forAll(re | re.isConsistentWith(self))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Redefinition_consistent(object diagnostics, object context)
        {
            System.Func<IRedefinableElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, object, object, bool>>(_redefinition_consistentOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method redefinition_consistent registered. Use the" +
                        " method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _redefinition_consistentOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _redefinition_consistentOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _redefinition_consistentOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRedefinition_consistentOperation()
        {
            return ClassInstance.LookupOperation("redefinition_consistent");
        }
        
        /// <summary>
        /// A RedefinableElement can only redefine non-leaf RedefinableElements.
        ///redefinedElement->forAll(re | not re.isLeaf)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Non_leaf_redefinition(object diagnostics, object context)
        {
            System.Func<IRedefinableElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, object, object, bool>>(_non_leaf_redefinitionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method non_leaf_redefinition registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _non_leaf_redefinitionOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _non_leaf_redefinitionOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _non_leaf_redefinitionOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNon_leaf_redefinitionOperation()
        {
            return ClassInstance.LookupOperation("non_leaf_redefinition");
        }
        
        /// <summary>
        /// At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element.
        ///redefinedElement->forAll(re | self.isRedefinitionContextValid(re))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Redefinition_context_valid(object diagnostics, object context)
        {
            System.Func<IRedefinableElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, object, object, bool>>(_redefinition_context_validOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method redefinition_context_valid registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _redefinition_context_validOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _redefinition_context_validOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _redefinition_context_validOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveRedefinition_context_validOperation()
        {
            return ClassInstance.LookupOperation("redefinition_context_valid");
        }
        
        /// <summary>
        /// The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.
        ///redefiningElement.isRedefinitionContextValid(self)
        ///result = (false)
        ///<p>From package UML::Classification.</p>
        /// </summary>
        /// <param name="redefiningElement"></param>
        public bool IsConsistentWith(IRedefinableElement redefiningElement)
        {
            System.Func<IRedefinableElement, IRedefinableElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, IRedefinableElement, bool>>(_isConsistentWithOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isConsistentWith registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isConsistentWithOperation.Value, redefiningElement);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isConsistentWithOperation.Value, e));
            bool result = handler.Invoke(this, redefiningElement);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isConsistentWithOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsConsistentWithOperation()
        {
            return ClassInstance.LookupOperation("isConsistentWith");
        }
        
        /// <summary>
        /// The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.
        ///result = (redefinitionContext->exists(c | c.allParents()->includesAll(redefinedElement.redefinitionContext)))
        ///<p>From package UML::Classification.</p>
        /// </summary>
        /// <param name="redefinedElement"></param>
        public bool IsRedefinitionContextValid(IRedefinableElement redefinedElement)
        {
            System.Func<IRedefinableElement, IRedefinableElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IRedefinableElement, IRedefinableElement, bool>>(_isRedefinitionContextValidOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isRedefinitionContextValid registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isRedefinitionContextValidOperation.Value, redefinedElement);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isRedefinitionContextValidOperation.Value, e));
            bool result = handler.Invoke(this, redefinedElement);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isRedefinitionContextValidOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsRedefinitionContextValidOperation()
        {
            return ClassInstance.LookupOperation("isRedefinitionContextValid");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsLeafAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.RedefinableElement.ClassInstance)).Resolve("isLeaf")));
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int ownedParameterIndex = ModelHelper.IndexOfReference(this.OwnedParameter, element);
            if ((ownedParameterIndex != -1))
            {
                return ModelHelper.CreatePath("ownedParameter", ownedParameterIndex);
            }
            int ownedParameterSetIndex = ModelHelper.IndexOfReference(this.OwnedParameterSet, element);
            if ((ownedParameterSetIndex != -1))
            {
                return ModelHelper.CreatePath("ownedParameterSet", ownedParameterSetIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OWNEDPARAMETER"))
            {
                if ((index < this.OwnedParameter.Count))
                {
                    return this.OwnedParameter[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDPARAMETERSET"))
            {
                if ((index < this.OwnedParameterSet.Count))
                {
                    return this.OwnedParameterSet[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONCURRENCY"))
            {
                return this.Concurrency;
            }
            if ((attribute == "ISABSTRACT"))
            {
                return this.IsAbstract;
            }
            if ((attribute == "ISSTATIC"))
            {
                return this.IsStatic;
            }
            if ((attribute == "ISLEAF"))
            {
                return this.IsLeaf;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "METHOD"))
            {
                return this._method;
            }
            if ((feature == "OWNEDPARAMETER"))
            {
                return this._ownedParameter;
            }
            if ((feature == "OWNEDPARAMETERSET"))
            {
                return this._ownedParameterSet;
            }
            if ((feature == "RAISEDEXCEPTION"))
            {
                return this._raisedException;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONCURRENCY"))
            {
                this.Concurrency = ((CallConcurrencyKind)(value));
                return;
            }
            if ((feature == "ISABSTRACT"))
            {
                this.IsAbstract = ((bool)(value));
                return;
            }
            if ((feature == "ISSTATIC"))
            {
                this.IsStatic = ((bool)(value));
                return;
            }
            if ((feature == "ISLEAF"))
            {
                this.IsLeaf = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CONCURRENCY"))
            {
                return Observable.Box(new ConcurrencyProxy(this));
            }
            if ((attribute == "ISABSTRACT"))
            {
                return Observable.Box(new IsAbstractProxy(this));
            }
            if ((attribute == "ISSTATIC"))
            {
                return Observable.Box(new IsStaticProxy(this));
            }
            if ((attribute == "ISLEAF"))
            {
                return Observable.Box(new IsLeafProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._ownedParameter))
            {
                return "ownedParameter";
            }
            if ((container == this._ownedParameterSet))
            {
                return "ownedParameterSet";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//BehavioralFeature")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BehavioralFeature class
        /// </summary>
        public class BehavioralFeatureChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BehavioralFeature _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BehavioralFeatureChildrenCollection(BehavioralFeature parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OwnedParameter.Count);
                    count = (count + this._parent.OwnedParameterSet.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedParameterSet.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedParameterSet.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                NMF.Interop.Uml.IParameter ownedParameterCasted = item.As<NMF.Interop.Uml.IParameter>();
                if ((ownedParameterCasted != null))
                {
                    this._parent.OwnedParameter.Add(ownedParameterCasted);
                }
                IParameterSet ownedParameterSetCasted = item.As<IParameterSet>();
                if ((ownedParameterSetCasted != null))
                {
                    this._parent.OwnedParameterSet.Add(ownedParameterSetCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwnedParameter.Clear();
                this._parent.OwnedParameterSet.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OwnedParameter.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedParameterSet.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ownedParameterEnumerator = this._parent.OwnedParameter.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedParameterSetEnumerator = this._parent.OwnedParameterSet.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterSetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterSetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterSetEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                NMF.Interop.Uml.IParameter parameterItem = item.As<NMF.Interop.Uml.IParameter>();
                if (((parameterItem != null) 
                            && this._parent.OwnedParameter.Remove(parameterItem)))
                {
                    return true;
                }
                IParameterSet parameterSetItem = item.As<IParameterSet>();
                if (((parameterSetItem != null) 
                            && this._parent.OwnedParameterSet.Remove(parameterSetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwnedParameter).Concat(this._parent.OwnedParameterSet).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BehavioralFeature class
        /// </summary>
        public class BehavioralFeatureReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BehavioralFeature _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BehavioralFeatureReferencedElementsCollection(BehavioralFeature parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Method.Count);
                    count = (count + this._parent.OwnedParameter.Count);
                    count = (count + this._parent.OwnedParameterSet.Count);
                    count = (count + this._parent.RaisedException.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Method.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedParameterSet.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RaisedException.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Method.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedParameterSet.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RaisedException.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IBehavior methodCasted = item.As<IBehavior>();
                if ((methodCasted != null))
                {
                    this._parent.Method.Add(methodCasted);
                }
                NMF.Interop.Uml.IParameter ownedParameterCasted = item.As<NMF.Interop.Uml.IParameter>();
                if ((ownedParameterCasted != null))
                {
                    this._parent.OwnedParameter.Add(ownedParameterCasted);
                }
                IParameterSet ownedParameterSetCasted = item.As<IParameterSet>();
                if ((ownedParameterSetCasted != null))
                {
                    this._parent.OwnedParameterSet.Add(ownedParameterSetCasted);
                }
                NMF.Interop.Uml.IType raisedExceptionCasted = item.As<NMF.Interop.Uml.IType>();
                if ((raisedExceptionCasted != null))
                {
                    this._parent.RaisedException.Add(raisedExceptionCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Method.Clear();
                this._parent.OwnedParameter.Clear();
                this._parent.OwnedParameterSet.Clear();
                this._parent.RaisedException.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Method.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedParameter.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedParameterSet.Contains(item))
                {
                    return true;
                }
                if (this._parent.RaisedException.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> methodEnumerator = this._parent.Method.GetEnumerator();
                try
                {
                    for (
                    ; methodEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = methodEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    methodEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedParameterEnumerator = this._parent.OwnedParameter.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedParameterSetEnumerator = this._parent.OwnedParameterSet.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterSetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterSetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterSetEnumerator.Dispose();
                }
                IEnumerator<IModelElement> raisedExceptionEnumerator = this._parent.RaisedException.GetEnumerator();
                try
                {
                    for (
                    ; raisedExceptionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = raisedExceptionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    raisedExceptionEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IBehavior behaviorItem = item.As<IBehavior>();
                if (((behaviorItem != null) 
                            && this._parent.Method.Remove(behaviorItem)))
                {
                    return true;
                }
                NMF.Interop.Uml.IParameter parameterItem = item.As<NMF.Interop.Uml.IParameter>();
                if (((parameterItem != null) 
                            && this._parent.OwnedParameter.Remove(parameterItem)))
                {
                    return true;
                }
                IParameterSet parameterSetItem = item.As<IParameterSet>();
                if (((parameterSetItem != null) 
                            && this._parent.OwnedParameterSet.Remove(parameterSetItem)))
                {
                    return true;
                }
                NMF.Interop.Uml.IType typeItem = item.As<NMF.Interop.Uml.IType>();
                if (((typeItem != null) 
                            && this._parent.RaisedException.Remove(typeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Method).Concat(this._parent.OwnedParameter).Concat(this._parent.OwnedParameterSet).Concat(this._parent.RaisedException).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the concurrency property
        /// </summary>
        private sealed class ConcurrencyProxy : ModelPropertyChange<IBehavioralFeature, CallConcurrencyKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConcurrencyProxy(IBehavioralFeature modelElement) : 
                    base(modelElement, "concurrency")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override CallConcurrencyKind Value
            {
                get
                {
                    return this.ModelElement.Concurrency;
                }
                set
                {
                    this.ModelElement.Concurrency = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IBehavioralFeature, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IBehavioralFeature modelElement) : 
                    base(modelElement, "isAbstract")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isStatic property
        /// </summary>
        private sealed class IsStaticProxy : ModelPropertyChange<IFeature, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsStaticProxy(IFeature modelElement) : 
                    base(modelElement, "isStatic")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsStatic;
                }
                set
                {
                    this.ModelElement.IsStatic = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isLeaf property
        /// </summary>
        private sealed class IsLeafProxy : ModelPropertyChange<IRedefinableElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsLeafProxy(IRedefinableElement modelElement) : 
                    base(modelElement, "isLeaf")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsLeaf;
                }
                set
                {
                    this.ModelElement.IsLeaf = value;
                }
            }
        }
    }
}

