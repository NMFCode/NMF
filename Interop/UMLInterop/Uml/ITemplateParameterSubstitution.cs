//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for TemplateParameterSubstitution
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TemplateParameterSubstitution))]
    [XmlDefaultImplementationTypeAttribute(typeof(TemplateParameterSubstitution))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateParameterSubstitution")]
    public interface ITemplateParameterSubstitution : IModelElement, IElement
    {
        
        /// <summary>
        /// The formal TemplateParameter that is associated with this TemplateParameterSubstitution.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("formal")]
        [DescriptionAttribute("The formal TemplateParameter that is associated with this TemplateParameterSubsti" +
            "tution.\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("TemplateParameterSubstitution")]
        [XmlElementNameAttribute("formal")]
        [XmlAttributeAttribute(true)]
        ITemplateParameter Formal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("ownedActual")]
        [DescriptionAttribute("The ParameterableElement that is owned by this TemplateParameterSubstitution as i" +
            "ts actual parameter.\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("TemplateParameterSubstitution")]
        [XmlElementNameAttribute("ownedActual")]
        [XmlAttributeAttribute(true)]
        IParameterableElement OwnedActual
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TemplateBinding that owns this TemplateParameterSubstitution.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("templateBinding")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("parameterSubstitution")]
        ITemplateBinding TemplateBinding
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.
        ///&lt;p&gt;From package UML::CommonStructure.&lt;/p&gt;
        /// </summary>
        [DisplayNameAttribute("actual")]
        [DescriptionAttribute("The ParameterableElement that is the actual parameter for this TemplateParameterS" +
            "ubstitution.\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("TemplateParameterSubstitution")]
        [XmlElementNameAttribute("actual")]
        [XmlAttributeAttribute(true)]
        IParameterableElement Actual
        {
            get;
            set;
        }
        
        /// <summary>
        /// The actual ParameterableElement must be compatible with the formal TemplateParameter, e.g., the actual ParameterableElement for a Class TemplateParameter must be a Class.
        ///actual-&gt;forAll(a | a.isCompatibleWith(formal.parameteredElement))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Must_be_compatible(object diagnostics, object context);
    }
}
