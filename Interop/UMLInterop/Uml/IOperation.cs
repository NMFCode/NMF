//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for Operation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Operation))]
    [XmlDefaultImplementationTypeAttribute(typeof(Operation))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Operation")]
    public interface IOperation : IModelElement, ITemplateableElement, IParameterableElement, IBehavioralFeature
    {
        
        /// <summary>
        /// Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isQuery")]
        [DescriptionAttribute("Specifies whether an execution of the BehavioralFeature leaves the state of the s" +
            "ystem unchanged (isQuery=true) or whether side effects may occur (isQuery=false)" +
            ".\n<p>From package UML::Classification.</p>")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("isQuery")]
        [XmlAttributeAttribute(true)]
        bool IsQuery
        {
            get;
            set;
        }
        
        /// <summary>
        /// An optional Constraint on the result values of an invocation of this Operation.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("bodyCondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IConstraint BodyCondition
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Class that owns this operation, if any.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("class")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedOperation")]
        NMF.Interop.Uml.IClass Class
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DataType that owns this Operation, if any.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("datatype")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedOperation")]
        NMF.Interop.Uml.IDataType Datatype
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Interface that owns this Operation, if any.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("interface")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedOperation")]
        IInterface Interface
        {
            get;
            set;
        }
        
        /// <summary>
        /// An optional set of Constraints specifying the state of the system when the Operation is completed.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("postcondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IConstraint> Postcondition
        {
            get;
        }
        
        /// <summary>
        /// An optional set of Constraints on the state of the system when the Operation is invoked.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("precondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IConstraint> Precondition
        {
            get;
        }
        
        /// <summary>
        /// The Operations that are redefined by this Operation.
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedOperation")]
        [DescriptionAttribute("The Operations that are redefined by this Operation.\n<p>From package UML::Classif" +
            "ication.</p>")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("redefinedOperation")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<NMF.Interop.Uml.IOperation> RedefinedOperation
        {
            get;
        }
        
        /// <summary>
        /// An Operation can have at most one return parameter; i.e., an owned parameter with the direction set to &apos;return.&apos;
        ///self.ownedParameter-&gt;select(direction = ParameterDirectionKind::return)-&gt;size() &lt;= 1
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool At_most_one_return(object diagnostics, object context);
        
        /// <summary>
        /// A bodyCondition can only be specified for a query Operation.
        ///bodyCondition &lt;&gt; null implies isQuery
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Only_body_for_query(object diagnostics, object context);
        
        /// <summary>
        /// Retrieves the (only) return result parameter for this operation.
        /// </summary>
        NMF.Interop.Uml.IParameter GetReturnResult();
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newIsOrdered"></param>
        void SetIsOrdered(bool newIsOrdered);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newIsUnique"></param>
        void SetIsUnique(bool newIsUnique);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newLower"></param>
        void SetLower(int newLower);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newType"></param>
        void SetType(NMF.Interop.Uml.IType newType);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="newUpper"></param>
        void SetUpper(object newUpper);
        
        /// <summary>
        /// If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower has no value.
        ///result = (if returnResult()-&gt;notEmpty() then returnResult()-&gt;any(true).lower else null endif)
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        int GetLower();
        
        /// <summary>
        /// The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty set
        ///result = (ownedParameter-&gt;select (direction = ParameterDirectionKind::return)-&gt;asSet())
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        ISetExpression<NMF.Interop.Uml.IParameter> ReturnResult();
        
        /// <summary>
        /// If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type has no value.
        ///result = (if returnResult()-&gt;notEmpty() then returnResult()-&gt;any(true).type else null endif)
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        NMF.Interop.Uml.IType GetType();
        
        /// <summary>
        /// If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper has no value.
        ///result = (if returnResult()-&gt;notEmpty() then returnResult()-&gt;any(true).upper else null endif)
        ///&lt;p&gt;From package UML::Classification.&lt;/p&gt;
        /// </summary>
        void GetUpper();
    }
}
