//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// The public interface for OpaqueAction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OpaqueAction))]
    [XmlDefaultImplementationTypeAttribute(typeof(OpaqueAction))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//OpaqueAction")]
    public interface IOpaqueAction : IModelElement, IAction
    {
        
        /// <summary>
        /// Provides a textual specification of the functionality of the Action, in one or more languages other than UML.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("body")]
        [DescriptionAttribute("Provides a textual specification of the functionality of the Action, in one or mo" +
            "re languages other than UML.\n<p>From package UML::Actions.</p>")]
        [CategoryAttribute("OpaqueAction")]
        [XmlElementNameAttribute("body")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IListExpression<string> Body
        {
            get;
        }
        
        /// <summary>
        /// If provided, a specification of the language used for each of the body Strings.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("language")]
        [DescriptionAttribute("If provided, a specification of the language used for each of the body Strings.\n<" +
            "p>From package UML::Actions.</p>")]
        [CategoryAttribute("OpaqueAction")]
        [XmlElementNameAttribute("language")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<string> Language
        {
            get;
        }
        
        /// <summary>
        /// The InputPins providing inputs to the OpaqueAction.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("inputValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IInputPin> InputValue
        {
            get;
        }
        
        /// <summary>
        /// The OutputPins on which the OpaqueAction provides outputs.
        ///<p>From package UML::Actions.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("outputValue")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IOutputPin> OutputValue
        {
            get;
        }
        
        /// <summary>
        /// If the language attribute is not empty, then the size of the body and language lists must be the same.
        ///language->notEmpty() implies (_'body'->size() = language->size())
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        bool Language_body_size(object diagnostics, object context);
    }
}

