//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A Class classifies a set of objects and specifies the features that characterize the structure and behavior of those objects.  A Class may have an internal structure and Ports.
    ///<p>From package UML::StructuredClassifiers.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//Class")]
    [DebuggerDisplayAttribute("Class {Name}")]
    public partial class Class : EncapsulatedClassifier, NMF.Interop.Uml.IClass, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _passive_classOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrievePassive_classOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _createOwnedOperationOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveCreateOwnedOperationOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isMetaclassOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsMetaclassOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getExtensionsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetExtensionsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getSuperClassesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetSuperClassesOperation);
        
        /// <summary>
        /// The backing field for the IsActive property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isActive = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isActiveAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsActiveAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedOperationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedOperationReference);
        
        /// <summary>
        /// The backing field for the OwnedOperation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ClassOwnedOperationCollection _ownedOperation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nestedClassifierReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNestedClassifierReference);
        
        /// <summary>
        /// The backing field for the NestedClassifier property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IClassifier> _nestedClassifier;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedReceptionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedReceptionReference);
        
        /// <summary>
        /// The backing field for the OwnedReception property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IReception> _ownedReception;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _class_behaviorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveClass_behaviorOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getAllImplementedInterfacesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetAllImplementedInterfacesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getImplementedInterfacesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetImplementedInterfacesOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _classifierBehaviorReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveClassifierBehaviorReference);
        
        /// <summary>
        /// The backing field for the ClassifierBehavior property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBehavior _classifierBehavior;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _interfaceRealizationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveInterfaceRealizationReference);
        
        /// <summary>
        /// The backing field for the InterfaceRealization property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private BehavioredClassifierInterfaceRealizationCollection _interfaceRealization;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedBehaviorReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedBehaviorReference);
        
        /// <summary>
        /// The backing field for the OwnedBehavior property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IBehavior> _ownedBehavior;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Class()
        {
            this._ownedOperation = new ClassOwnedOperationCollection(this);
            this._ownedOperation.CollectionChanging += this.OwnedOperationCollectionChanging;
            this._ownedOperation.CollectionChanged += this.OwnedOperationCollectionChanged;
            this._nestedClassifier = new ObservableCompositionOrderedSet<IClassifier>(this);
            this._nestedClassifier.CollectionChanging += this.NestedClassifierCollectionChanging;
            this._nestedClassifier.CollectionChanged += this.NestedClassifierCollectionChanged;
            this._ownedReception = new ObservableCompositionOrderedSet<IReception>(this);
            this._ownedReception.CollectionChanging += this.OwnedReceptionCollectionChanging;
            this._ownedReception.CollectionChanged += this.OwnedReceptionCollectionChanged;
            this._interfaceRealization = new BehavioredClassifierInterfaceRealizationCollection(this);
            this._interfaceRealization.CollectionChanging += this.InterfaceRealizationCollectionChanging;
            this._interfaceRealization.CollectionChanged += this.InterfaceRealizationCollectionChanged;
            this._ownedBehavior = new ObservableCompositionOrderedSet<IBehavior>(this);
            this._ownedBehavior.CollectionChanging += this.OwnedBehaviorCollectionChanging;
            this._ownedBehavior.CollectionChanged += this.OwnedBehaviorCollectionChanged;
        }
        
        /// <summary>
        /// Determines whether an object specified by this Class is active or not. If true, then the owning Class is referred to as an active Class. If false, then such a Class is referred to as a passive Class.
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isActive")]
        [DescriptionAttribute("Determines whether an object specified by this Class is active or not. If true, t" +
            "hen the owning Class is referred to as an active Class. If false, then such a Cl" +
            "ass is referred to as a passive Class.\n<p>From package UML::StructuredClassifier" +
            "s.</p>")]
        [CategoryAttribute("Class")]
        [XmlElementNameAttribute("isActive")]
        [XmlAttributeAttribute(true)]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    bool old = this._isActive;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsActive", e, _isActiveAttribute);
                    this._isActive = value;
                    this.OnPropertyChanged("IsActive", e, _isActiveAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Operations owned by the Class.
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedOperation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("class")]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Interop.Uml.IOperation> OwnedOperation
        {
            get
            {
                return this._ownedOperation;
            }
        }
        
        /// <summary>
        /// The Classifiers owned by the Class that are not ownedBehaviors.
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestedClassifier")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IClassifier> NestedClassifier
        {
            get
            {
                return this._nestedClassifier;
            }
        }
        
        /// <summary>
        /// The Receptions owned by the Class.
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedReception")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IReception> OwnedReception
        {
            get
            {
                return this._ownedReception;
            }
        }
        
        /// <summary>
        /// A Behavior that specifies the behavior of the BehavioredClassifier itself.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [DisplayNameAttribute("classifierBehavior")]
        [DescriptionAttribute("A Behavior that specifies the behavior of the BehavioredClassifier itself.\n<p>Fro" +
            "m package UML::SimpleClassifiers.</p>")]
        [CategoryAttribute("BehavioredClassifier")]
        [XmlElementNameAttribute("classifierBehavior")]
        [XmlAttributeAttribute(true)]
        public IBehavior ClassifierBehavior
        {
            get
            {
                return this._classifierBehavior;
            }
            set
            {
                if ((this._classifierBehavior != value))
                {
                    IBehavior old = this._classifierBehavior;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("ClassifierBehavior", e, _classifierBehaviorReference);
                    this._classifierBehavior = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetClassifierBehavior;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetClassifierBehavior;
                    }
                    this.OnPropertyChanged("ClassifierBehavior", e, _classifierBehaviorReference);
                }
            }
        }
        
        /// <summary>
        /// The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("interfaceRealization")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("implementingClassifier")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IInterfaceRealization> InterfaceRealization
        {
            get
            {
                return this._interfaceRealization;
            }
        }
        
        /// <summary>
        /// Behaviors owned by a BehavioredClassifier.
        ///<p>From package UML::SimpleClassifiers.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedBehavior")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IBehavior> OwnedBehavior
        {
            get
            {
                return this._ownedBehavior;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ClassChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Class")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Only an active Class may own Receptions and have a classifierBehavior.
        ///not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Passive_class(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Uml.IClass, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IClass, object, object, bool>>(_passive_classOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method passive_class registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _passive_classOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _passive_classOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _passive_classOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrievePassive_classOperation()
        {
            return ClassInstance.LookupOperation("passive_class");
        }
        
        /// <summary>
        /// Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this class.
        /// </summary>
        /// <param name="name">The name for the new operation, or null.</param>
        /// <param name="parameterNames">The parameter names for the new operation, or null.</param>
        /// <param name="parameterTypes">The parameter types for the new operation, or null.</param>
        /// <param name="returnType">The return type for the new operation, or null.</param>
        public NMF.Interop.Uml.IOperation CreateOwnedOperation(string name, IEnumerable<string> parameterNames, IEnumerable<NMF.Interop.Uml.IType> parameterTypes, NMF.Interop.Uml.IType returnType)
        {
            System.Func<NMF.Interop.Uml.IClass, string, IEnumerable<string>, IEnumerable<NMF.Interop.Uml.IType>, NMF.Interop.Uml.IType, NMF.Interop.Uml.IOperation> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IClass, string, IEnumerable<string>, IEnumerable<NMF.Interop.Uml.IType>, NMF.Interop.Uml.IType, NMF.Interop.Uml.IOperation>>(_createOwnedOperationOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method createOwnedOperation registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _createOwnedOperationOperation.Value, name, parameterNames, parameterTypes, returnType);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _createOwnedOperationOperation.Value, e));
            NMF.Interop.Uml.IOperation result = handler.Invoke(this, name, parameterNames, parameterTypes, returnType);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _createOwnedOperationOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveCreateOwnedOperationOperation()
        {
            return ClassInstance.LookupOperation("createOwnedOperation");
        }
        
        /// <summary>
        /// Determines whether this class is a metaclass.
        /// </summary>
        public bool IsMetaclass()
        {
            System.Func<NMF.Interop.Uml.IClass, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IClass, bool>>(_isMetaclassOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isMetaclass registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isMetaclassOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isMetaclassOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isMetaclassOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsMetaclassOperation()
        {
            return ClassInstance.LookupOperation("isMetaclass");
        }
        
        /// <summary>
        /// Derivation for Class::/extension : Extension
        ///result = (Extension.allInstances()->select(ext | 
        ///  let endTypes : Sequence(Classifier) = ext.memberEnd->collect(type.oclAsType(Classifier)) in
        ///  endTypes->includes(self) or endTypes.allParents()->includes(self) ))
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        public ISetExpression<NMF.Interop.Uml.IExtension> GetExtensions()
        {
            System.Func<NMF.Interop.Uml.IClass, ISetExpression<NMF.Interop.Uml.IExtension>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IClass, ISetExpression<NMF.Interop.Uml.IExtension>>>(_getExtensionsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getExtensions registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getExtensionsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getExtensionsOperation.Value, e));
            ISetExpression<NMF.Interop.Uml.IExtension> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getExtensionsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetExtensionsOperation()
        {
            return ClassInstance.LookupOperation("getExtensions");
        }
        
        /// <summary>
        /// Derivation for Class::/superClass : Class
        ///result = (self.general()->select(oclIsKindOf(Class))->collect(oclAsType(Class))->asSet())
        ///<p>From package UML::StructuredClassifiers.</p>
        /// </summary>
        public ISetExpression<NMF.Interop.Uml.IClass> GetSuperClasses()
        {
            System.Func<NMF.Interop.Uml.IClass, ISetExpression<NMF.Interop.Uml.IClass>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Uml.IClass, ISetExpression<NMF.Interop.Uml.IClass>>>(_getSuperClassesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getSuperClasses registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getSuperClassesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getSuperClassesOperation.Value, e));
            ISetExpression<NMF.Interop.Uml.IClass> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getSuperClassesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetSuperClassesOperation()
        {
            return ClassInstance.LookupOperation("getSuperClasses");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsActiveAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Class.ClassInstance)).Resolve("isActive")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Class.ClassInstance)).Resolve("ownedOperation")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedOperationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedOperation", e, _ownedOperationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedOperationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedOperation", e, _ownedOperationReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNestedClassifierReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Class.ClassInstance)).Resolve("nestedClassifier")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NestedClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedClassifierCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("NestedClassifier", e, _nestedClassifierReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NestedClassifier property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedClassifierCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NestedClassifier", e, _nestedClassifierReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedReceptionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.Class.ClassInstance)).Resolve("ownedReception")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedReception property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedReceptionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedReception", e, _ownedReceptionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedReception property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedReceptionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedReception", e, _ownedReceptionReference);
        }
        
        /// <summary>
        /// If a behavior is classifier behavior, it does not have a specification.
        ///classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Class_behavior(object diagnostics, object context)
        {
            System.Func<IBehavioredClassifier, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavioredClassifier, object, object, bool>>(_class_behaviorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method class_behavior registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _class_behaviorOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _class_behaviorOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _class_behaviorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveClass_behaviorOperation()
        {
            return ClassInstance.LookupOperation("class_behavior");
        }
        
        /// <summary>
        /// Retrieves all the interfaces on which this behaviored classifier or any of its parents has an interface realization dependency.
        /// </summary>
        public ISetExpression<IInterface> GetAllImplementedInterfaces()
        {
            System.Func<IBehavioredClassifier, ISetExpression<IInterface>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavioredClassifier, ISetExpression<IInterface>>>(_getAllImplementedInterfacesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getAllImplementedInterfaces registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getAllImplementedInterfacesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getAllImplementedInterfacesOperation.Value, e));
            ISetExpression<IInterface> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getAllImplementedInterfacesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetAllImplementedInterfacesOperation()
        {
            return ClassInstance.LookupOperation("getAllImplementedInterfaces");
        }
        
        /// <summary>
        /// Retrieves the interfaces on which this behaviored classifier has an interface realization dependency.
        /// </summary>
        public ISetExpression<IInterface> GetImplementedInterfaces()
        {
            System.Func<IBehavioredClassifier, ISetExpression<IInterface>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IBehavioredClassifier, ISetExpression<IInterface>>>(_getImplementedInterfacesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getImplementedInterfaces registered. Use th" +
                        "e method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getImplementedInterfacesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getImplementedInterfacesOperation.Value, e));
            ISetExpression<IInterface> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getImplementedInterfacesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetImplementedInterfacesOperation()
        {
            return ClassInstance.LookupOperation("getImplementedInterfaces");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveClassifierBehaviorReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BehavioredClassifier.ClassInstance)).Resolve("classifierBehavior")));
        }
        
        /// <summary>
        /// Handles the event that the ClassifierBehavior property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClassifierBehavior(object sender, System.EventArgs eventArgs)
        {
            this.ClassifierBehavior = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveInterfaceRealizationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BehavioredClassifier.ClassInstance)).Resolve("interfaceRealization")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InterfaceRealization property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InterfaceRealizationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("InterfaceRealization", e, _interfaceRealizationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InterfaceRealization property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InterfaceRealizationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InterfaceRealization", e, _interfaceRealizationReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedBehaviorReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.BehavioredClassifier.ClassInstance)).Resolve("ownedBehavior")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedBehavior property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedBehaviorCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedBehavior", e, _ownedBehaviorReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedBehavior property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedBehaviorCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedBehavior", e, _ownedBehaviorReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int ownedOperationIndex = ModelHelper.IndexOfReference(this.OwnedOperation, element);
            if ((ownedOperationIndex != -1))
            {
                return ModelHelper.CreatePath("ownedOperation", ownedOperationIndex);
            }
            int nestedClassifierIndex = ModelHelper.IndexOfReference(this.NestedClassifier, element);
            if ((nestedClassifierIndex != -1))
            {
                return ModelHelper.CreatePath("nestedClassifier", nestedClassifierIndex);
            }
            int ownedReceptionIndex = ModelHelper.IndexOfReference(this.OwnedReception, element);
            if ((ownedReceptionIndex != -1))
            {
                return ModelHelper.CreatePath("ownedReception", ownedReceptionIndex);
            }
            int interfaceRealizationIndex = ModelHelper.IndexOfReference(this.InterfaceRealization, element);
            if ((interfaceRealizationIndex != -1))
            {
                return ModelHelper.CreatePath("interfaceRealization", interfaceRealizationIndex);
            }
            int ownedBehaviorIndex = ModelHelper.IndexOfReference(this.OwnedBehavior, element);
            if ((ownedBehaviorIndex != -1))
            {
                return ModelHelper.CreatePath("ownedBehavior", ownedBehaviorIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OWNEDOPERATION"))
            {
                if ((index < this.OwnedOperation.Count))
                {
                    return this.OwnedOperation[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "NESTEDCLASSIFIER"))
            {
                if ((index < this.NestedClassifier.Count))
                {
                    return this.NestedClassifier[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDRECEPTION"))
            {
                if ((index < this.OwnedReception.Count))
                {
                    return this.OwnedReception[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "CLASSIFIERBEHAVIOR"))
            {
                return this.ClassifierBehavior;
            }
            if ((reference == "INTERFACEREALIZATION"))
            {
                if ((index < this.InterfaceRealization.Count))
                {
                    return this.InterfaceRealization[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "OWNEDBEHAVIOR"))
            {
                if ((index < this.OwnedBehavior.Count))
                {
                    return this.OwnedBehavior[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISACTIVE"))
            {
                return this.IsActive;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OWNEDOPERATION"))
            {
                return this._ownedOperation;
            }
            if ((feature == "NESTEDCLASSIFIER"))
            {
                return this._nestedClassifier;
            }
            if ((feature == "OWNEDRECEPTION"))
            {
                return this._ownedReception;
            }
            if ((feature == "INTERFACEREALIZATION"))
            {
                return this._interfaceRealization;
            }
            if ((feature == "OWNEDBEHAVIOR"))
            {
                return this._ownedBehavior;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CLASSIFIERBEHAVIOR"))
            {
                this.ClassifierBehavior = ((IBehavior)(value));
                return;
            }
            if ((feature == "ISACTIVE"))
            {
                this.IsActive = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISACTIVE"))
            {
                return Observable.Box(new IsActiveProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CLASSIFIERBEHAVIOR"))
            {
                return new ClassifierBehaviorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._ownedOperation))
            {
                return "ownedOperation";
            }
            if ((container == this._nestedClassifier))
            {
                return "nestedClassifier";
            }
            if ((container == this._ownedReception))
            {
                return "ownedReception";
            }
            if ((container == this._interfaceRealization))
            {
                return "interfaceRealization";
            }
            if ((container == this._ownedBehavior))
            {
                return "ownedBehavior";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//Class")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Class class
        /// </summary>
        public class ClassChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Class _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassChildrenCollection(Class parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OwnedOperation.Count);
                    count = (count + this._parent.NestedClassifier.Count);
                    count = (count + this._parent.OwnedReception.Count);
                    count = (count + this._parent.InterfaceRealization.Count);
                    count = (count + this._parent.OwnedBehavior.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NestedClassifier.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedReception.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.InterfaceRealization.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedBehavior.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NestedClassifier.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedReception.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.InterfaceRealization.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedBehavior.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                NMF.Interop.Uml.IOperation ownedOperationCasted = item.As<NMF.Interop.Uml.IOperation>();
                if ((ownedOperationCasted != null))
                {
                    this._parent.OwnedOperation.Add(ownedOperationCasted);
                }
                IClassifier nestedClassifierCasted = item.As<IClassifier>();
                if ((nestedClassifierCasted != null))
                {
                    this._parent.NestedClassifier.Add(nestedClassifierCasted);
                }
                IReception ownedReceptionCasted = item.As<IReception>();
                if ((ownedReceptionCasted != null))
                {
                    this._parent.OwnedReception.Add(ownedReceptionCasted);
                }
                IInterfaceRealization interfaceRealizationCasted = item.As<IInterfaceRealization>();
                if ((interfaceRealizationCasted != null))
                {
                    this._parent.InterfaceRealization.Add(interfaceRealizationCasted);
                }
                IBehavior ownedBehaviorCasted = item.As<IBehavior>();
                if ((ownedBehaviorCasted != null))
                {
                    this._parent.OwnedBehavior.Add(ownedBehaviorCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwnedOperation.Clear();
                this._parent.NestedClassifier.Clear();
                this._parent.OwnedReception.Clear();
                this._parent.InterfaceRealization.Clear();
                this._parent.OwnedBehavior.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OwnedOperation.Contains(item))
                {
                    return true;
                }
                if (this._parent.NestedClassifier.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedReception.Contains(item))
                {
                    return true;
                }
                if (this._parent.InterfaceRealization.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedBehavior.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ownedOperationEnumerator = this._parent.OwnedOperation.GetEnumerator();
                try
                {
                    for (
                    ; ownedOperationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedOperationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedOperationEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nestedClassifierEnumerator = this._parent.NestedClassifier.GetEnumerator();
                try
                {
                    for (
                    ; nestedClassifierEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedClassifierEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedClassifierEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedReceptionEnumerator = this._parent.OwnedReception.GetEnumerator();
                try
                {
                    for (
                    ; ownedReceptionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedReceptionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedReceptionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> interfaceRealizationEnumerator = this._parent.InterfaceRealization.GetEnumerator();
                try
                {
                    for (
                    ; interfaceRealizationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = interfaceRealizationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    interfaceRealizationEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedBehaviorEnumerator = this._parent.OwnedBehavior.GetEnumerator();
                try
                {
                    for (
                    ; ownedBehaviorEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedBehaviorEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedBehaviorEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                NMF.Interop.Uml.IOperation operationItem = item.As<NMF.Interop.Uml.IOperation>();
                if (((operationItem != null) 
                            && this._parent.OwnedOperation.Remove(operationItem)))
                {
                    return true;
                }
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.NestedClassifier.Remove(classifierItem)))
                {
                    return true;
                }
                IReception receptionItem = item.As<IReception>();
                if (((receptionItem != null) 
                            && this._parent.OwnedReception.Remove(receptionItem)))
                {
                    return true;
                }
                IInterfaceRealization interfaceRealizationItem = item.As<IInterfaceRealization>();
                if (((interfaceRealizationItem != null) 
                            && this._parent.InterfaceRealization.Remove(interfaceRealizationItem)))
                {
                    return true;
                }
                IBehavior behaviorItem = item.As<IBehavior>();
                if (((behaviorItem != null) 
                            && this._parent.OwnedBehavior.Remove(behaviorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwnedOperation).Concat(this._parent.NestedClassifier).Concat(this._parent.OwnedReception).Concat(this._parent.InterfaceRealization).Concat(this._parent.OwnedBehavior).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Class class
        /// </summary>
        public class ClassReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Class _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassReferencedElementsCollection(Class parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OwnedOperation.Count);
                    count = (count + this._parent.NestedClassifier.Count);
                    count = (count + this._parent.OwnedReception.Count);
                    if ((this._parent.ClassifierBehavior != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.InterfaceRealization.Count);
                    count = (count + this._parent.OwnedBehavior.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NestedClassifier.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedReception.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.InterfaceRealization.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedBehavior.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OwnedOperation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NestedClassifier.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedReception.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.InterfaceRealization.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedBehavior.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                NMF.Interop.Uml.IOperation ownedOperationCasted = item.As<NMF.Interop.Uml.IOperation>();
                if ((ownedOperationCasted != null))
                {
                    this._parent.OwnedOperation.Add(ownedOperationCasted);
                }
                IClassifier nestedClassifierCasted = item.As<IClassifier>();
                if ((nestedClassifierCasted != null))
                {
                    this._parent.NestedClassifier.Add(nestedClassifierCasted);
                }
                IReception ownedReceptionCasted = item.As<IReception>();
                if ((ownedReceptionCasted != null))
                {
                    this._parent.OwnedReception.Add(ownedReceptionCasted);
                }
                if ((this._parent.ClassifierBehavior == null))
                {
                    IBehavior classifierBehaviorCasted = item.As<IBehavior>();
                    if ((classifierBehaviorCasted != null))
                    {
                        this._parent.ClassifierBehavior = classifierBehaviorCasted;
                        return;
                    }
                }
                IInterfaceRealization interfaceRealizationCasted = item.As<IInterfaceRealization>();
                if ((interfaceRealizationCasted != null))
                {
                    this._parent.InterfaceRealization.Add(interfaceRealizationCasted);
                }
                IBehavior ownedBehaviorCasted = item.As<IBehavior>();
                if ((ownedBehaviorCasted != null))
                {
                    this._parent.OwnedBehavior.Add(ownedBehaviorCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OwnedOperation.Clear();
                this._parent.NestedClassifier.Clear();
                this._parent.OwnedReception.Clear();
                this._parent.ClassifierBehavior = null;
                this._parent.InterfaceRealization.Clear();
                this._parent.OwnedBehavior.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OwnedOperation.Contains(item))
                {
                    return true;
                }
                if (this._parent.NestedClassifier.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedReception.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ClassifierBehavior))
                {
                    return true;
                }
                if (this._parent.InterfaceRealization.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedBehavior.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ownedOperationEnumerator = this._parent.OwnedOperation.GetEnumerator();
                try
                {
                    for (
                    ; ownedOperationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedOperationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedOperationEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nestedClassifierEnumerator = this._parent.NestedClassifier.GetEnumerator();
                try
                {
                    for (
                    ; nestedClassifierEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedClassifierEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedClassifierEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedReceptionEnumerator = this._parent.OwnedReception.GetEnumerator();
                try
                {
                    for (
                    ; ownedReceptionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedReceptionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedReceptionEnumerator.Dispose();
                }
                if ((this._parent.ClassifierBehavior != null))
                {
                    array[arrayIndex] = this._parent.ClassifierBehavior;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> interfaceRealizationEnumerator = this._parent.InterfaceRealization.GetEnumerator();
                try
                {
                    for (
                    ; interfaceRealizationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = interfaceRealizationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    interfaceRealizationEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedBehaviorEnumerator = this._parent.OwnedBehavior.GetEnumerator();
                try
                {
                    for (
                    ; ownedBehaviorEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedBehaviorEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedBehaviorEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                NMF.Interop.Uml.IOperation operationItem = item.As<NMF.Interop.Uml.IOperation>();
                if (((operationItem != null) 
                            && this._parent.OwnedOperation.Remove(operationItem)))
                {
                    return true;
                }
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.NestedClassifier.Remove(classifierItem)))
                {
                    return true;
                }
                IReception receptionItem = item.As<IReception>();
                if (((receptionItem != null) 
                            && this._parent.OwnedReception.Remove(receptionItem)))
                {
                    return true;
                }
                if ((this._parent.ClassifierBehavior == item))
                {
                    this._parent.ClassifierBehavior = null;
                    return true;
                }
                IInterfaceRealization interfaceRealizationItem = item.As<IInterfaceRealization>();
                if (((interfaceRealizationItem != null) 
                            && this._parent.InterfaceRealization.Remove(interfaceRealizationItem)))
                {
                    return true;
                }
                IBehavior behaviorItem = item.As<IBehavior>();
                if (((behaviorItem != null) 
                            && this._parent.OwnedBehavior.Remove(behaviorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OwnedOperation).Concat(this._parent.NestedClassifier).Concat(this._parent.OwnedReception).Concat(this._parent.ClassifierBehavior).Concat(this._parent.InterfaceRealization).Concat(this._parent.OwnedBehavior).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isActive property
        /// </summary>
        private sealed class IsActiveProxy : ModelPropertyChange<NMF.Interop.Uml.IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsActiveProxy(NMF.Interop.Uml.IClass modelElement) : 
                    base(modelElement, "isActive")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsActive;
                }
                set
                {
                    this.ModelElement.IsActive = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classifierBehavior property
        /// </summary>
        private sealed class ClassifierBehaviorProxy : ModelPropertyChange<IBehavioredClassifier, IBehavior>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassifierBehaviorProxy(IBehavioredClassifier modelElement) : 
                    base(modelElement, "classifierBehavior")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBehavior Value
            {
                get
                {
                    return this.ModelElement.ClassifierBehavior;
                }
                set
                {
                    this.ModelElement.ClassifierBehavior = value;
                }
            }
        }
    }
}

