//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Uml
{
    
    
    /// <summary>
    /// A TemplateBinding is a DirectedRelationship between a TemplateableElement and a template. A TemplateBinding specifies the TemplateParameterSubstitutions of actual parameters for the formal parameters of the template.
    ///<p>From package UML::CommonStructure.</p>
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/uml2/5.0.0/UML")]
    [XmlNamespacePrefixAttribute("uml")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateBinding")]
    public partial class TemplateBinding : DirectedRelationship, ITemplateBinding, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _parameter_substitution_formalOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveParameter_substitution_formalOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _one_parameter_substitutionOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOne_parameter_substitutionOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _parameterSubstitutionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveParameterSubstitutionReference);
        
        /// <summary>
        /// The backing field for the ParameterSubstitution property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TemplateBindingParameterSubstitutionCollection _parameterSubstitution;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _signatureReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSignatureReference);
        
        /// <summary>
        /// The backing field for the Signature property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITemplateSignature _signature;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _boundElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveBoundElementReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public TemplateBinding()
        {
            this._parameterSubstitution = new TemplateBindingParameterSubstitutionCollection(this);
            this._parameterSubstitution.CollectionChanging += this.ParameterSubstitutionCollectionChanging;
            this._parameterSubstitution.CollectionChanged += this.ParameterSubstitutionCollectionChanged;
        }
        
        /// <summary>
        /// The TemplateParameterSubstitutions owned by this TemplateBinding.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("parameterSubstitution")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("templateBinding")]
        [ConstantAttribute()]
        public IOrderedSetExpression<ITemplateParameterSubstitution> ParameterSubstitution
        {
            get
            {
                return this._parameterSubstitution;
            }
        }
        
        /// <summary>
        /// The TemplateSignature for the template that is the target of this TemplateBinding.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [DisplayNameAttribute("signature")]
        [DescriptionAttribute("The TemplateSignature for the template that is the target of this TemplateBinding" +
            ".\n<p>From package UML::CommonStructure.</p>")]
        [CategoryAttribute("TemplateBinding")]
        [XmlElementNameAttribute("signature")]
        [XmlAttributeAttribute(true)]
        public ITemplateSignature Signature
        {
            get
            {
                return this._signature;
            }
            set
            {
                if ((this._signature != value))
                {
                    ITemplateSignature old = this._signature;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Signature", e, _signatureReference);
                    this._signature = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSignature;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSignature;
                    }
                    this.OnPropertyChanged("Signature", e, _signatureReference);
                }
            }
        }
        
        /// <summary>
        /// The TemplateableElement that is bound by this TemplateBinding.
        ///<p>From package UML::CommonStructure.</p>
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("boundElement")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("templateBinding")]
        public ITemplateableElement BoundElement
        {
            get
            {
                return ModelHelper.CastAs<ITemplateableElement>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new TemplateBindingChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TemplateBindingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateBinding")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Each parameterSubstitution must refer to a formal TemplateParameter of the target TemplateSignature.
        ///parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool Parameter_substitution_formal(object diagnostics, object context)
        {
            System.Func<ITemplateBinding, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ITemplateBinding, object, object, bool>>(_parameter_substitution_formalOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method parameter_substitution_formal registered. U" +
                        "se the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _parameter_substitution_formalOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _parameter_substitution_formalOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _parameter_substitution_formalOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveParameter_substitution_formalOperation()
        {
            return ClassInstance.LookupOperation("parameter_substitution_formal");
        }
        
        /// <summary>
        /// A TemplateBiinding contains at most one TemplateParameterSubstitution for each formal TemplateParameter of the target TemplateSignature.
        ///signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)
        /// </summary>
        /// <param name="diagnostics">The chain of diagnostics to which problems are to be appended.</param>
        /// <param name="context">The cache of context-specific information.</param>
        public bool One_parameter_substitution(object diagnostics, object context)
        {
            System.Func<ITemplateBinding, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ITemplateBinding, object, object, bool>>(_one_parameter_substitutionOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method one_parameter_substitution registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _one_parameter_substitutionOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _one_parameter_substitutionOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _one_parameter_substitutionOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOne_parameter_substitutionOperation()
        {
            return ClassInstance.LookupOperation("one_parameter_substitution");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveParameterSubstitutionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateBinding.ClassInstance)).Resolve("parameterSubstitution")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ParameterSubstitution property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParameterSubstitutionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ParameterSubstitution", e, _parameterSubstitutionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ParameterSubstitution property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParameterSubstitutionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ParameterSubstitution", e, _parameterSubstitutionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSignatureReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateBinding.ClassInstance)).Resolve("signature")));
        }
        
        /// <summary>
        /// Handles the event that the Signature property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSignature(object sender, System.EventArgs eventArgs)
        {
            this.Signature = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveBoundElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Uml.TemplateBinding.ClassInstance)).Resolve("boundElement")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ITemplateableElement oldBoundElement = ModelHelper.CastAs<ITemplateableElement>(oldParent);
            ITemplateableElement newBoundElement = ModelHelper.CastAs<ITemplateableElement>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldBoundElement, newBoundElement);
            this.OnPropertyChanging("BoundElement", e, _boundElementReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ITemplateableElement oldBoundElement = ModelHelper.CastAs<ITemplateableElement>(oldParent);
            ITemplateableElement newBoundElement = ModelHelper.CastAs<ITemplateableElement>(newParent);
            if ((oldBoundElement != null))
            {
                oldBoundElement.TemplateBinding.Remove(this);
            }
            if ((newBoundElement != null))
            {
                newBoundElement.TemplateBinding.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldBoundElement, newBoundElement);
            this.OnPropertyChanged("BoundElement", e, _boundElementReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int parameterSubstitutionIndex = ModelHelper.IndexOfReference(this.ParameterSubstitution, element);
            if ((parameterSubstitutionIndex != -1))
            {
                return ModelHelper.CreatePath("parameterSubstitution", parameterSubstitutionIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PARAMETERSUBSTITUTION"))
            {
                if ((index < this.ParameterSubstitution.Count))
                {
                    return this.ParameterSubstitution[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "SIGNATURE"))
            {
                return this.Signature;
            }
            if ((reference == "BOUNDELEMENT"))
            {
                return this.BoundElement;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PARAMETERSUBSTITUTION"))
            {
                return this._parameterSubstitution;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SIGNATURE"))
            {
                this.Signature = ((ITemplateSignature)(value));
                return;
            }
            if ((feature == "BOUNDELEMENT"))
            {
                this.BoundElement = ((ITemplateableElement)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SIGNATURE"))
            {
                return new SignatureProxy(this);
            }
            if ((reference == "BOUNDELEMENT"))
            {
                return new BoundElementProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._parameterSubstitution))
            {
                return "parameterSubstitution";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/uml2/5.0.0/UML#//TemplateBinding")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TemplateBinding class
        /// </summary>
        public class TemplateBindingChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TemplateBinding _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TemplateBindingChildrenCollection(TemplateBinding parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ParameterSubstitution.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ParameterSubstitution.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ParameterSubstitution.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITemplateParameterSubstitution parameterSubstitutionCasted = item.As<ITemplateParameterSubstitution>();
                if ((parameterSubstitutionCasted != null))
                {
                    this._parent.ParameterSubstitution.Add(parameterSubstitutionCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ParameterSubstitution.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ParameterSubstitution.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> parameterSubstitutionEnumerator = this._parent.ParameterSubstitution.GetEnumerator();
                try
                {
                    for (
                    ; parameterSubstitutionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parameterSubstitutionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parameterSubstitutionEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITemplateParameterSubstitution templateParameterSubstitutionItem = item.As<ITemplateParameterSubstitution>();
                if (((templateParameterSubstitutionItem != null) 
                            && this._parent.ParameterSubstitution.Remove(templateParameterSubstitutionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ParameterSubstitution).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TemplateBinding class
        /// </summary>
        public class TemplateBindingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TemplateBinding _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TemplateBindingReferencedElementsCollection(TemplateBinding parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ParameterSubstitution.Count);
                    if ((this._parent.Signature != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BoundElement != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ParameterSubstitution.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ParameterSubstitution.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITemplateParameterSubstitution parameterSubstitutionCasted = item.As<ITemplateParameterSubstitution>();
                if ((parameterSubstitutionCasted != null))
                {
                    this._parent.ParameterSubstitution.Add(parameterSubstitutionCasted);
                }
                if ((this._parent.Signature == null))
                {
                    ITemplateSignature signatureCasted = item.As<ITemplateSignature>();
                    if ((signatureCasted != null))
                    {
                        this._parent.Signature = signatureCasted;
                        return;
                    }
                }
                if ((this._parent.BoundElement == null))
                {
                    ITemplateableElement boundElementCasted = item.As<ITemplateableElement>();
                    if ((boundElementCasted != null))
                    {
                        this._parent.BoundElement = boundElementCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ParameterSubstitution.Clear();
                this._parent.Signature = null;
                this._parent.BoundElement = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ParameterSubstitution.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Signature))
                {
                    return true;
                }
                if ((item == this._parent.BoundElement))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> parameterSubstitutionEnumerator = this._parent.ParameterSubstitution.GetEnumerator();
                try
                {
                    for (
                    ; parameterSubstitutionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parameterSubstitutionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parameterSubstitutionEnumerator.Dispose();
                }
                if ((this._parent.Signature != null))
                {
                    array[arrayIndex] = this._parent.Signature;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BoundElement != null))
                {
                    array[arrayIndex] = this._parent.BoundElement;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITemplateParameterSubstitution templateParameterSubstitutionItem = item.As<ITemplateParameterSubstitution>();
                if (((templateParameterSubstitutionItem != null) 
                            && this._parent.ParameterSubstitution.Remove(templateParameterSubstitutionItem)))
                {
                    return true;
                }
                if ((this._parent.Signature == item))
                {
                    this._parent.Signature = null;
                    return true;
                }
                if ((this._parent.BoundElement == item))
                {
                    this._parent.BoundElement = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ParameterSubstitution).Concat(this._parent.Signature).Concat(this._parent.BoundElement).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the signature property
        /// </summary>
        private sealed class SignatureProxy : ModelPropertyChange<ITemplateBinding, ITemplateSignature>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SignatureProxy(ITemplateBinding modelElement) : 
                    base(modelElement, "signature")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITemplateSignature Value
            {
                get
                {
                    return this.ModelElement.Signature;
                }
                set
                {
                    this.ModelElement.Signature = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the boundElement property
        /// </summary>
        private sealed class BoundElementProxy : ModelPropertyChange<ITemplateBinding, ITemplateableElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BoundElementProxy(ITemplateBinding modelElement) : 
                    base(modelElement, "boundElement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITemplateableElement Value
            {
                get
                {
                    return this.ModelElement.BoundElement;
                }
                set
                {
                    this.ModelElement.BoundElement = value;
                }
            }
        }
    }
}

