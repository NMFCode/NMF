//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// Constraint contains a ValueSpecification that specifies additional semantics for one or more elements. Certain kinds of constraints (such as an association &quot;xor&quot; constraint) are predefined in UML, others may be user-defined. A user-defined Constraint is described using a specified language, whose syntax and interpretation is a tool responsibility. One predefined language for writing constraints is OCL. In some situations, a programming language such as Java may be appropriate for expressing a constraint. In other situations natural language may be used.
    ///
    ///
    ///
    ///Constraint is a condition (a Boolean expression) that restricts the extension of the associated element beyond what is imposed by the other language constructs applied to the element. Constraint contains an optional name, although they are commonly unnamed.
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Constraint")]
    [DebuggerDisplayAttribute("Constraint {Name}")]
    public partial class Constraint : PackageableElement, IConstraint, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _not_apply_to_selfOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNot_apply_to_selfOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _value_specification_booleanOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveValue_specification_booleanOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _constrainedElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveConstrainedElementReference);
        
        /// <summary>
        /// The backing field for the ConstrainedElement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationOrderedSet<IElement> _constrainedElement;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _specificationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSpecificationReference);
        
        /// <summary>
        /// The backing field for the Specification property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IValueSpecification _specification;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _namespaceReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNamespaceReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Constraint()
        {
            this._constrainedElement = new ObservableAssociationOrderedSet<IElement>();
            this._constrainedElement.CollectionChanging += this.ConstrainedElementCollectionChanging;
            this._constrainedElement.CollectionChanged += this.ConstrainedElementCollectionChanged;
        }
        
        /// <summary>
        /// The ordered set of Elements referenced by this Constraint.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("constrainedElement")]
        [DescriptionAttribute("The ordered set of Elements referenced by this Constraint.")]
        [CategoryAttribute("Constraint")]
        [XmlElementNameAttribute("constrainedElement")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<IElement> ConstrainedElement
        {
            get
            {
                return this._constrainedElement;
            }
        }
        
        /// <summary>
        /// A condition that must be true when evaluated in order for the constraint to be satisfied. Subsets Element::ownedElement.
        ///
        ///
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("specification")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IValueSpecification Specification
        {
            get
            {
                return this._specification;
            }
            set
            {
                if ((this._specification != value))
                {
                    IValueSpecification old = this._specification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Specification", e, _specificationReference);
                    this._specification = value;
                    if ((old != null))
                    {
                        if ((old.Parent == this))
                        {
                            old.Parent = null;
                        }
                        old.ParentChanged -= this.OnResetSpecification;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetSpecification;
                    }
                    this.OnPropertyChanged("Specification", e, _specificationReference);
                }
            }
        }
        
        /// <summary>
        /// The namespace property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("namespace")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedRule")]
        public NMF.Interop.Legacy.Cmof.INamespace Namespace
        {
            get
            {
                return ModelHelper.CastAs<NMF.Interop.Legacy.Cmof.INamespace>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ConstraintChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConstraintReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Constraint")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A constraint cannot be applied to itself.
        ///not constrainedElement-&gt;includes(self)
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Not_apply_to_self(object diagnostics, object context)
        {
            System.Func<IConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConstraint, object, object, bool>>(_not_apply_to_selfOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method not_apply_to_self registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _not_apply_to_selfOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _not_apply_to_selfOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _not_apply_to_selfOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNot_apply_to_selfOperation()
        {
            return ClassInstance.LookupOperation("not_apply_to_self");
        }
        
        /// <summary>
        /// The value specification for a constraint must evaluate to a boolean value.
        ///self.specification().booleanValue().isOclKindOf(Boolean)
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Value_specification_boolean(object diagnostics, object context)
        {
            System.Func<IConstraint, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IConstraint, object, object, bool>>(_value_specification_booleanOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method value_specification_boolean registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _value_specification_booleanOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _value_specification_booleanOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _value_specification_booleanOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveValue_specification_booleanOperation()
        {
            return ClassInstance.LookupOperation("value_specification_boolean");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveConstrainedElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Constraint.ClassInstance)).Resolve("constrainedElement")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConstrainedElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConstrainedElementCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ConstrainedElement", e, _constrainedElementReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConstrainedElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConstrainedElementCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConstrainedElement", e, _constrainedElementReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSpecificationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Constraint.ClassInstance)).Resolve("specification")));
        }
        
        /// <summary>
        /// Handles the event that the Specification property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSpecification(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Specification))
            {
                this.Specification = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNamespaceReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Constraint.ClassInstance)).Resolve("namespace")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            NMF.Interop.Legacy.Cmof.INamespace oldNamespace = ModelHelper.CastAs<NMF.Interop.Legacy.Cmof.INamespace>(oldParent);
            NMF.Interop.Legacy.Cmof.INamespace newNamespace = ModelHelper.CastAs<NMF.Interop.Legacy.Cmof.INamespace>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldNamespace, newNamespace);
            this.OnPropertyChanging("Namespace", e, _namespaceReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            NMF.Interop.Legacy.Cmof.INamespace oldNamespace = ModelHelper.CastAs<NMF.Interop.Legacy.Cmof.INamespace>(oldParent);
            NMF.Interop.Legacy.Cmof.INamespace newNamespace = ModelHelper.CastAs<NMF.Interop.Legacy.Cmof.INamespace>(newParent);
            if ((oldNamespace != null))
            {
                oldNamespace.OwnedRule.Remove(this);
            }
            if ((newNamespace != null))
            {
                newNamespace.OwnedRule.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldNamespace, newNamespace);
            this.OnPropertyChanged("Namespace", e, _namespaceReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Specification))
            {
                return ModelHelper.CreatePath("specification");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CONSTRAINEDELEMENT"))
            {
                if ((index < this.ConstrainedElement.Count))
                {
                    return this.ConstrainedElement[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "SPECIFICATION"))
            {
                return this.Specification;
            }
            if ((reference == "NAMESPACE"))
            {
                return this.Namespace;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONSTRAINEDELEMENT"))
            {
                return this._constrainedElement;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SPECIFICATION"))
            {
                this.Specification = ((IValueSpecification)(value));
                return;
            }
            if ((feature == "NAMESPACE"))
            {
                this.Namespace = ((NMF.Interop.Legacy.Cmof.INamespace)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SPECIFICATION"))
            {
                return new SpecificationProxy(this);
            }
            if ((reference == "NAMESPACE"))
            {
                return new NamespaceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Constraint")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Constraint class
        /// </summary>
        public class ConstraintChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Constraint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConstraintChildrenCollection(Constraint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Specification != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Specification == null))
                {
                    IValueSpecification specificationCasted = item.As<IValueSpecification>();
                    if ((specificationCasted != null))
                    {
                        this._parent.Specification = specificationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Specification = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Specification))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Specification != null))
                {
                    array[arrayIndex] = this._parent.Specification;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Specification == item))
                {
                    this._parent.Specification = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Specification).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Constraint class
        /// </summary>
        public class ConstraintReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Constraint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConstraintReferencedElementsCollection(Constraint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ConstrainedElement.Count);
                    if ((this._parent.Specification != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Namespace != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.ConstrainedElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.ConstrainedElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IElement constrainedElementCasted = item.As<IElement>();
                if ((constrainedElementCasted != null))
                {
                    this._parent.ConstrainedElement.Add(constrainedElementCasted);
                }
                if ((this._parent.Specification == null))
                {
                    IValueSpecification specificationCasted = item.As<IValueSpecification>();
                    if ((specificationCasted != null))
                    {
                        this._parent.Specification = specificationCasted;
                        return;
                    }
                }
                if ((this._parent.Namespace == null))
                {
                    NMF.Interop.Legacy.Cmof.INamespace namespaceCasted = item.As<NMF.Interop.Legacy.Cmof.INamespace>();
                    if ((namespaceCasted != null))
                    {
                        this._parent.Namespace = namespaceCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConstrainedElement.Clear();
                this._parent.Specification = null;
                this._parent.Namespace = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ConstrainedElement.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Specification))
                {
                    return true;
                }
                if ((item == this._parent.Namespace))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> constrainedElementEnumerator = this._parent.ConstrainedElement.GetEnumerator();
                try
                {
                    for (
                    ; constrainedElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = constrainedElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    constrainedElementEnumerator.Dispose();
                }
                if ((this._parent.Specification != null))
                {
                    array[arrayIndex] = this._parent.Specification;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Namespace != null))
                {
                    array[arrayIndex] = this._parent.Namespace;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IElement elementItem = item.As<IElement>();
                if (((elementItem != null) 
                            && this._parent.ConstrainedElement.Remove(elementItem)))
                {
                    return true;
                }
                if ((this._parent.Specification == item))
                {
                    this._parent.Specification = null;
                    return true;
                }
                if ((this._parent.Namespace == item))
                {
                    this._parent.Namespace = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConstrainedElement).Concat(this._parent.Specification).Concat(this._parent.Namespace).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specification property
        /// </summary>
        private sealed class SpecificationProxy : ModelPropertyChange<IConstraint, IValueSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecificationProxy(IConstraint modelElement) : 
                    base(modelElement, "specification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueSpecification Value
            {
                get
                {
                    return this.ModelElement.Specification;
                }
                set
                {
                    this.ModelElement.Specification = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the namespace property
        /// </summary>
        private sealed class NamespaceProxy : ModelPropertyChange<IConstraint, NMF.Interop.Legacy.Cmof.INamespace>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NamespaceProxy(IConstraint modelElement) : 
                    base(modelElement, "namespace")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Legacy.Cmof.INamespace Value
            {
                get
                {
                    return this.ModelElement.Namespace;
                }
                set
                {
                    this.ModelElement.Namespace = value;
                }
            }
        }
    }
}
