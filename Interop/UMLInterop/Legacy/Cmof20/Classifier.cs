//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// A classifier is a type. It can specify a generalization hierarchy by referencing its general classifiers.  A classifier is also a namespace whose members can include features. Classifier is an abstract metaclass.
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Classifier")]
    [DebuggerDisplayAttribute("Classifier {Name}")]
    public abstract partial class Classifier : Namespace, IClassifier, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_cycles_in_generalizationOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_cycles_in_generalizationOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _specialize_typeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSpecialize_typeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _allFeaturesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAllFeaturesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getGeneralsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetGeneralsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _parentsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveParentsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getInheritedMembersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetInheritedMembersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _allParentsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAllParentsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _inheritableMembersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInheritableMembersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _hasVisibilityOfOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveHasVisibilityOfOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _inheritOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveInheritOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _maySpecializeTypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMaySpecializeTypeOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _generalReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveGeneralReference);
        
        /// <summary>
        /// The backing field for the General property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IClassifier> _general;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _conformsToOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveConformsToOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isInstanceOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsInstanceOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _packageReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePackageReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Classifier()
        {
            this._general = new ObservableAssociationSet<IClassifier>();
            this._general.CollectionChanging += this.GeneralCollectionChanging;
            this._general.CollectionChanged += this.GeneralCollectionChanged;
        }
        
        /// <summary>
        /// References the general classifier in the Generalization relationship. Subsets DirectedRelationship::target.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("general")]
        [DescriptionAttribute("References the general classifier in the Generalization relationship. Subsets Dir" +
            "ectedRelationship::target.")]
        [CategoryAttribute("Classifier")]
        [XmlElementNameAttribute("general")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IClassifier> General
        {
            get
            {
                return this._general;
            }
        }
        
        /// <summary>
        /// References the owning package of a package. Subsets NamedElement::namespace and redefines Basic::Package::nestingPackage.
        ///Specifies the owning package of this classifier, if any.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("package")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedType")]
        public IPackage Package
        {
            get
            {
                return ModelHelper.CastAs<IPackage>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ClassifierChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassifierReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Classifier")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.
        ///not self.allParents()-&gt;includes(self)
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool No_cycles_in_generalization(object diagnostics, object context)
        {
            System.Func<IClassifier, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, object, object, bool>>(_no_cycles_in_generalizationOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_cycles_in_generalization registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_cycles_in_generalizationOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_cycles_in_generalizationOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_cycles_in_generalizationOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_cycles_in_generalizationOperation()
        {
            return ClassInstance.LookupOperation("no_cycles_in_generalization");
        }
        
        /// <summary>
        /// A classifier may only specialize classifiers of a valid type.
        ///self.parents()-&gt;forAll(c | self.maySpecializeType(c))
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Specialize_type(object diagnostics, object context)
        {
            System.Func<IClassifier, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, object, object, bool>>(_specialize_typeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method specialize_type registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _specialize_typeOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _specialize_typeOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _specialize_typeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSpecialize_typeOperation()
        {
            return ClassInstance.LookupOperation("specialize_type");
        }
        
        /// <summary>
        /// The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.
        ///result = member-&gt;select(oclIsKindOf(Feature))
        /// </summary>
        public ISetExpression<IFeature> AllFeatures()
        {
            System.Func<IClassifier, ISetExpression<IFeature>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, ISetExpression<IFeature>>>(_allFeaturesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method allFeatures registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _allFeaturesOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _allFeaturesOperation.Value, e));
            ISetExpression<IFeature> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _allFeaturesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAllFeaturesOperation()
        {
            return ClassInstance.LookupOperation("allFeatures");
        }
        
        /// <summary>
        /// The general classifiers are the classifiers referenced by the generalization relationships.
        ///result = self.parents()
        /// </summary>
        public ISetExpression<IClassifier> GetGenerals()
        {
            System.Func<IClassifier, ISetExpression<IClassifier>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, ISetExpression<IClassifier>>>(_getGeneralsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getGenerals registered. Use the method brok" +
                        "er to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getGeneralsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getGeneralsOperation.Value, e));
            ISetExpression<IClassifier> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getGeneralsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetGeneralsOperation()
        {
            return ClassInstance.LookupOperation("getGenerals");
        }
        
        /// <summary>
        /// The query parents() gives all of the immediate ancestors of a generalized Classifier.
        ///result = generalization.general
        /// </summary>
        public ISetExpression<IClassifier> Parents()
        {
            System.Func<IClassifier, ISetExpression<IClassifier>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, ISetExpression<IClassifier>>>(_parentsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method parents registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _parentsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _parentsOperation.Value, e));
            ISetExpression<IClassifier> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _parentsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveParentsOperation()
        {
            return ClassInstance.LookupOperation("parents");
        }
        
        /// <summary>
        /// The inheritedMember association is derived by inheriting the inheritable members of the parents.
        ///result = self.inherit(self.parents()-&gt;collect(p | p.inheritableMembers(self))
        /// </summary>
        public ISetExpression<INamedElement> GetInheritedMembers()
        {
            System.Func<IClassifier, ISetExpression<INamedElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, ISetExpression<INamedElement>>>(_getInheritedMembersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getInheritedMembers registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getInheritedMembersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getInheritedMembersOperation.Value, e));
            ISetExpression<INamedElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getInheritedMembersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetInheritedMembersOperation()
        {
            return ClassInstance.LookupOperation("getInheritedMembers");
        }
        
        /// <summary>
        /// The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.
        ///result = self.parents()-&gt;union(self.parents()-&gt;collect(p | p.allParents())
        /// </summary>
        public ISetExpression<IClassifier> AllParents()
        {
            System.Func<IClassifier, ISetExpression<IClassifier>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, ISetExpression<IClassifier>>>(_allParentsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method allParents registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _allParentsOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _allParentsOperation.Value, e));
            ISetExpression<IClassifier> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _allParentsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAllParentsOperation()
        {
            return ClassInstance.LookupOperation("allParents");
        }
        
        /// <summary>
        /// The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.
        ///c.allParents()-&gt;includes(self)
        ///result = member-&gt;select(m | c.hasVisibilityOf(m))
        /// </summary>
        /// <param name="c"></param>
        public ISetExpression<INamedElement> InheritableMembers(IClassifier c)
        {
            System.Func<IClassifier, IClassifier, ISetExpression<INamedElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, IClassifier, ISetExpression<INamedElement>>>(_inheritableMembersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method inheritableMembers registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _inheritableMembersOperation.Value, c);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _inheritableMembersOperation.Value, e));
            ISetExpression<INamedElement> result = handler.Invoke(this, c);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _inheritableMembersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInheritableMembersOperation()
        {
            return ClassInstance.LookupOperation("inheritableMembers");
        }
        
        /// <summary>
        /// The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.
        ///self.allParents()-&gt;collect(c | c.member)-&gt;includes(n)
        ///result = if (self.inheritedMember-&gt;includes(n)) then (n.visibility &lt;&gt; #private) else true
        /// </summary>
        /// <param name="n"></param>
        public bool HasVisibilityOf(INamedElement n)
        {
            System.Func<IClassifier, INamedElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, INamedElement, bool>>(_hasVisibilityOfOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method hasVisibilityOf registered. Use the method " +
                        "broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _hasVisibilityOfOperation.Value, n);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _hasVisibilityOfOperation.Value, e));
            bool result = handler.Invoke(this, n);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _hasVisibilityOfOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveHasVisibilityOfOperation()
        {
            return ClassInstance.LookupOperation("hasVisibilityOf");
        }
        
        /// <summary>
        /// The inherit operation is overridden to exclude redefined properties.
        ///result = inhs
        /// </summary>
        /// <param name="inhs"></param>
        public ISetExpression<INamedElement> Inherit(IEnumerable<INamedElement> inhs)
        {
            System.Func<IClassifier, IEnumerable<INamedElement>, ISetExpression<INamedElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, IEnumerable<INamedElement>, ISetExpression<INamedElement>>>(_inheritOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method inherit registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _inheritOperation.Value, inhs);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _inheritOperation.Value, e));
            ISetExpression<INamedElement> result = handler.Invoke(this, inhs);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _inheritOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveInheritOperation()
        {
            return ClassInstance.LookupOperation("inherit");
        }
        
        /// <summary>
        /// The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.
        ///result = self.oclIsKindOf(c.oclType)
        /// </summary>
        /// <param name="c"></param>
        public bool MaySpecializeType(IClassifier c)
        {
            System.Func<IClassifier, IClassifier, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IClassifier, IClassifier, bool>>(_maySpecializeTypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method maySpecializeType registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _maySpecializeTypeOperation.Value, c);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _maySpecializeTypeOperation.Value, e));
            bool result = handler.Invoke(this, c);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _maySpecializeTypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMaySpecializeTypeOperation()
        {
            return ClassInstance.LookupOperation("maySpecializeType");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveGeneralReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Classifier.ClassInstance)).Resolve("general")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the General property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("General", e, _generalReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the General property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneralCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("General", e, _generalReference);
        }
        
        /// <summary>
        /// The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.
        ///result = false
        /// </summary>
        /// <param name="other"></param>
        public bool ConformsTo(NMF.Interop.Legacy.Cmof.IType other)
        {
            System.Func<NMF.Interop.Legacy.Cmof.IType, NMF.Interop.Legacy.Cmof.IType, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IType, NMF.Interop.Legacy.Cmof.IType, bool>>(_conformsToOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method conformsTo registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _conformsToOperation.Value, other);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _conformsToOperation.Value, e));
            bool result = handler.Invoke(this, other);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _conformsToOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveConformsToOperation()
        {
            return ClassInstance.LookupOperation("conformsTo");
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="object"></param>
        public bool IsInstance(object @object)
        {
            System.Func<NMF.Interop.Legacy.Cmof.IType, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IType, object, bool>>(_isInstanceOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isInstance registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isInstanceOperation.Value, @object);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isInstanceOperation.Value, e));
            bool result = handler.Invoke(this, @object);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isInstanceOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsInstanceOperation()
        {
            return ClassInstance.LookupOperation("isInstance");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePackageReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Type.ClassInstance)).Resolve("package")));
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IPackage oldPackage = ModelHelper.CastAs<IPackage>(oldParent);
            IPackage newPackage = ModelHelper.CastAs<IPackage>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldPackage, newPackage);
            this.OnPropertyChanging("Package", e, _packageReference);
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IPackage oldPackage = ModelHelper.CastAs<IPackage>(oldParent);
            IPackage newPackage = ModelHelper.CastAs<IPackage>(newParent);
            if ((oldPackage != null))
            {
                oldPackage.OwnedType.Remove(this);
            }
            if ((newPackage != null))
            {
                newPackage.OwnedType.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldPackage, newPackage);
            this.OnPropertyChanged("Package", e, _packageReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PACKAGE"))
            {
                return this.Package;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GENERAL"))
            {
                return this._general;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PACKAGE"))
            {
                this.Package = ((IPackage)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PACKAGE"))
            {
                return new PackageProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Classifier")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Classifier class
        /// </summary>
        public class ClassifierChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Classifier _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassifierChildrenCollection(Classifier parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Classifier class
        /// </summary>
        public class ClassifierReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Classifier _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassifierReferencedElementsCollection(Classifier parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.General.Count);
                    if ((this._parent.Package != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.General.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.General.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IClassifier generalCasted = item.As<IClassifier>();
                if ((generalCasted != null))
                {
                    this._parent.General.Add(generalCasted);
                }
                if ((this._parent.Package == null))
                {
                    IPackage packageCasted = item.As<IPackage>();
                    if ((packageCasted != null))
                    {
                        this._parent.Package = packageCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.General.Clear();
                this._parent.Package = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.General.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Package))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> generalEnumerator = this._parent.General.GetEnumerator();
                try
                {
                    for (
                    ; generalEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = generalEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    generalEnumerator.Dispose();
                }
                if ((this._parent.Package != null))
                {
                    array[arrayIndex] = this._parent.Package;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IClassifier classifierItem = item.As<IClassifier>();
                if (((classifierItem != null) 
                            && this._parent.General.Remove(classifierItem)))
                {
                    return true;
                }
                if ((this._parent.Package == item))
                {
                    this._parent.Package = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.General).Concat(this._parent.Package).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the package property
        /// </summary>
        private sealed class PackageProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IType, IPackage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PackageProxy(NMF.Interop.Legacy.Cmof.IType modelElement) : 
                    base(modelElement, "package")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPackage Value
            {
                get
                {
                    return this.ModelElement.Package;
                }
                set
                {
                    this.ModelElement.Package = value;
                }
            }
        }
    }
}
