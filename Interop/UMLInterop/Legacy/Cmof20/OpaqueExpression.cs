//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NMF.Interop.Legacy.Cmof
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    using System.Globalization;
    
    
    /// <summary>
    /// An opaque expression contains language-specific text strings used to describe a value or values, and an optional specification of the languages.
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//OpaqueExpression")]
    [DebuggerDisplayAttribute("OpaqueExpression {Name}")]
    public partial class OpaqueExpression : ValueSpecification, IOpaqueExpression, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Body property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableOrderedSet<string> _body;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _bodyAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveBodyAttribute);
        
        /// <summary>
        /// The backing field for the Language property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableOrderedSet<string> _language;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _languageAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLanguageAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public OpaqueExpression()
        {
            this._body = new ObservableOrderedSet<string>();
            this._body.CollectionChanging += this.BodyCollectionChanging;
            this._body.CollectionChanged += this.BodyCollectionChanged;
            this._language = new ObservableOrderedSet<string>();
            this._language.CollectionChanging += this.LanguageCollectionChanging;
            this._language.CollectionChanged += this.LanguageCollectionChanged;
        }
        
        /// <summary>
        /// The text of the expression, possibly in multiple languages.
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("body")]
        [DescriptionAttribute("The text of the expression, possibly in multiple languages.")]
        [CategoryAttribute("OpaqueExpression")]
        [XmlElementNameAttribute("body")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<string> Body
        {
            get
            {
                return this._body;
            }
        }
        
        /// <summary>
        /// Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the language. If languages are unspecified, it might be implicit from the expression body or the context. Languages are matched to body strings by order.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("language")]
        [DescriptionAttribute(@"Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the language. If languages are unspecified, it might be implicit from the expression body or the context. Languages are matched to body strings by order.")]
        [CategoryAttribute("OpaqueExpression")]
        [XmlElementNameAttribute("language")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<string> Language
        {
            get
            {
                return this._language;
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//OpaqueExpression")));
                }
                return _classInstance;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveBodyAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.OpaqueExpression.ClassInstance)).Resolve("body")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Body property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BodyCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Body", e, _bodyAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Body property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BodyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Body", e, _bodyAttribute);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLanguageAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.OpaqueExpression.ClassInstance)).Resolve("language")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Language property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LanguageCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Language", e, _languageAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Language property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LanguageCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Language", e, _languageAttribute);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BODY"))
            {
                if ((index < this.Body.Count))
                {
                    return this.Body[index];
                }
                else
                {
                    return null;
                }
            }
            if ((attribute == "LANGUAGE"))
            {
                if ((index < this.Language.Count))
                {
                    return this.Language[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BODY"))
            {
                return this._body;
            }
            if ((feature == "LANGUAGE"))
            {
                return this._language;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//OpaqueExpression")));
            }
            return _classInstance;
        }
    }
}
