//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NMF.Interop.Legacy.Cmof
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    using System.Globalization;
    
    
    /// <summary>
    /// The public interface for Operation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Operation))]
    [XmlDefaultImplementationTypeAttribute(typeof(Operation))]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Operation")]
    public interface IOperation : IModelElement, NMF.Interop.Legacy.Cmof.ITypedElement, IMultiplicityElement, IBehavioralFeature
    {
        
        /// <summary>
        /// Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false). The default value is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isQuery")]
        [DescriptionAttribute("Specifies whether an execution of the BehavioralFeature leaves the state of the s" +
            "ystem unchanged (isQuery=true) or whether side effects may occur (isQuery=false)" +
            ". The default value is false.")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("isQuery")]
        [XmlAttributeAttribute(true)]
        bool IsQuery
        {
            get;
            set;
        }
        
        /// <summary>
        /// References the Operations that are redefined by this Operation. Subsets RedefinableElement.redefinedElement.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedOperation")]
        [DescriptionAttribute("References the Operations that are redefined by this Operation. Subsets Redefinab" +
            "leElement.redefinedElement.")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("redefinedOperation")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<NMF.Interop.Legacy.Cmof.IOperation> RedefinedOperation
        {
            get;
        }
        
        /// <summary>
        /// The precondition property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("precondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ISetExpression<IConstraint> Precondition
        {
            get;
        }
        
        /// <summary>
        /// The postcondition property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("postcondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ISetExpression<IConstraint> Postcondition
        {
            get;
        }
        
        /// <summary>
        /// The bodyCondition property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("bodyCondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ISetExpression<IConstraint> BodyCondition
        {
            get;
        }
        
        /// <summary>
        /// The class that owns the operation. Subsets RedefinableElement::redefinitionContext and NamedElement::namespace and Feature::featuringClassifier.
        ///The class that owns the operation.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("class")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedOperation")]
        NMF.Interop.Legacy.Cmof.IClass Class
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DataType that owns this Operation. Subsets NamedElement::namespace, Feature::featuringClassifier, and RedefinableElement::redefinitionContext.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("datatype")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedOperation")]
        NMF.Interop.Legacy.Cmof.IDataType Datatype
        {
            get;
            set;
        }
        
        /// <summary>
        /// A bodyCondition can only be specified for a query operation.
        ///bodyCondition->notEmpty() implies isQuery
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Only_body_for_query(object diagnostics, object context);
        
        /// <summary>
        /// An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'
        ///self.ownedParameter->select(par | par.direction = #return)->size() <= 1
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool At_most_one_return(object diagnostics, object context);
        
        /// <summary>
        /// If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.
        ///result = if returnResult->size() = 1 then returnResult->any().type else Set{} endif
        /// </summary>
        NMF.Interop.Legacy.Cmof.IType GetType();
        
        /// <summary>
        /// result = ownedParameter->select (par | par.direction = #return)
        /// </summary>
        ISetExpression<NMF.Interop.Legacy.Cmof.IParameter> ReturnResult();
    }
}
