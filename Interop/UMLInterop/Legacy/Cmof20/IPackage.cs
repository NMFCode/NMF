//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NMF.Interop.Legacy.Cmof
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    using System.Globalization;
    
    
    /// <summary>
    /// The public interface for Package
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Package))]
    [XmlDefaultImplementationTypeAttribute(typeof(Package))]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Package")]
    public interface IPackage : IModelElement, IPackageableElement, NMF.Interop.Legacy.Cmof.INamespace
    {
        
        /// <summary>
        /// The uRI property
        /// </summary>
        [DisplayNameAttribute("uRI")]
        [CategoryAttribute("Package")]
        [XmlElementNameAttribute("uri")]
        [XmlAttributeAttribute(true)]
        string URI
        {
            get;
            set;
        }
        
        /// <summary>
        /// References the PackageMerges that are owned by this Package. Subsets Element::ownedElement.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("packageMerge")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("receivingPackage")]
        [ConstantAttribute()]
        IOrderedSetExpression<IPackageMerge> PackageMerge
        {
            get;
        }
        
        /// <summary>
        /// References the owned members that are Packages. Subsets Package::ownedMember and redefines Basic::Package::nestedPackage.
        ///The set of contained packages.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestedPackage")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("nestingPackage")]
        [ConstantAttribute()]
        ISetExpression<IPackage> NestedPackage
        {
            get;
        }
        
        /// <summary>
        /// References the owned members that are Types. Subsets Package::ownedMember and redefines Basic::Package::ownedType.
        ///The set of contained types.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedType")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("package")]
        [ConstantAttribute()]
        ISetExpression<NMF.Interop.Legacy.Cmof.IType> OwnedType
        {
            get;
        }
        
        /// <summary>
        /// References the owning package of a package. Subsets NamedElement::namespace and redefines Basic::Package::nestingPackage.
        ///The containing package.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("nestingPackage")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("nestedPackage")]
        IPackage NestingPackage
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the members that are owned by this Package. Redefines Namespace::ownedMember.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedMember")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        ICollectionExpression<IPackageableElement> OwnedMember
        {
            get;
        }
        
        /// <summary>
        /// If an element that is owned by a package has visibility, it is public or private.
        ///self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Elements_public_or_private(object diagnostics, object context);
        
        /// <summary>
        /// The query visibleMembers() defines which members of a Package can be accessed outside it.
        ///result = member->select( m | self.makesVisible(m))
        /// </summary>
        ISetExpression<IPackageableElement> VisibleMembers();
        
        /// <summary>
        /// The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.
        ///self.member->includes(el)
        ///result = (ownedMember->includes(el)) or
        ///   (elementImport->
        ///      select(ei|ei.visibility = #public)->
        ///         collect(ei|ei.importedElement)->includes(el)) or
        ///   (packageImport->
        ///      select(pi|pi.visibility = #public)->
        ///        collect(pi|
        ///           pi.importedPackage.member->includes(el))->notEmpty())
        /// </summary>
        /// <param name="el"></param>
        bool MakesVisible(INamedElement el);
    }
}
