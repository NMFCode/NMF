//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NMF.Interop.Legacy.Cmof
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    using System.Globalization;
    
    
    /// <summary>
    /// The public interface for Property
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Property))]
    [XmlDefaultImplementationTypeAttribute(typeof(Property))]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Property")]
    public interface IProperty : IModelElement, IMultiplicityElement, IStructuralFeature
    {
        
        /// <summary>
        /// Specifies whether the property is derived as the union of all of the properties that are constrained to subset it. The default value is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDerivedUnion")]
        [DescriptionAttribute("Specifies whether the property is derived as the union of all of the properties t" +
            "hat are constrained to subset it. The default value is false.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isDerivedUnion")]
        [XmlAttributeAttribute(true)]
        bool IsDerivedUnion
        {
            get;
            set;
        }
        
        /// <summary>
        /// This redefines the corresponding attribute in Basic::Property and Abstractions::StructuralFeature. The default value is false.
        ///If isReadOnly is true, the attribute may not be written to after initialization. The default value is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isReadOnly")]
        [DescriptionAttribute("This redefines the corresponding attribute in Basic::Property and Abstractions::S" +
            "tructuralFeature. The default value is false.\r\nIf isReadOnly is true, the attrib" +
            "ute may not be written to after initialization. The default value is false.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isReadOnly")]
        [XmlAttributeAttribute(true)]
        bool IsReadOnly
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies a String that represents a value to be used when no argument is supplied for the Property.
        ///A string that is evaluated to give a default value for the attribute when an object of the owning class is instantiated.
        /// </summary>
        [DisplayNameAttribute("default")]
        [DescriptionAttribute("Specifies a String that represents a value to be used when no argument is supplie" +
            "d for the Property.\r\nA string that is evaluated to give a default value for the " +
            "attribute when an object of the owning class is instantiated.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("default")]
        [XmlAttributeAttribute(true)]
        string Default
        {
            get;
            set;
        }
        
        /// <summary>
        /// If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute. The default value is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isComposite")]
        [DescriptionAttribute("If isComposite is true, the object containing the attribute is a container for th" +
            "e object or value contained in the attribute. The default value is false.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isComposite")]
        [XmlAttributeAttribute(true)]
        bool IsComposite
        {
            get;
            set;
        }
        
        /// <summary>
        /// If isDerived is true, the value of the attribute is derived from information elsewhere. The default value is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDerived")]
        [DescriptionAttribute("If isDerived is true, the value of the attribute is derived from information else" +
            "where. The default value is false.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isDerived")]
        [XmlAttributeAttribute(true)]
        bool IsDerived
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isID property
        /// </summary>
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isID")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("isID")]
        [XmlAttributeAttribute(true)]
        bool IsID
        {
            get;
            set;
        }
        
        /// <summary>
        /// References the owning association of this property, if any. Subsets Property::association, NamedElement::namespace, and Feature::featuringClassifier.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("owningAssociation")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedEnd")]
        IAssociation OwningAssociation
        {
            get;
            set;
        }
        
        /// <summary>
        /// References the association of which this property is a member, if any.
        /// </summary>
        [DisplayNameAttribute("association")]
        [DescriptionAttribute("References the association of which this property is a member, if any.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("association")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("memberEnd")]
        IAssociation Association
        {
            get;
            set;
        }
        
        /// <summary>
        /// References the properties that are redefined by this property. Subsets RedefinableElement::redefinedElement.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedProperty")]
        [DescriptionAttribute("References the properties that are redefined by this property. Subsets Redefinabl" +
            "eElement::redefinedElement.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("redefinedProperty")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IProperty> RedefinedProperty
        {
            get;
        }
        
        /// <summary>
        /// References the properties of which this property is constrained to be a subset.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("subsettedProperty")]
        [DescriptionAttribute("References the properties of which this property is constrained to be a subset.")]
        [CategoryAttribute("Property")]
        [XmlElementNameAttribute("subsettedProperty")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ISetExpression<IProperty> SubsettedProperty
        {
            get;
        }
        
        /// <summary>
        /// The DataType that owns this Operation. Subsets NamedElement::namespace, Feature::featuringClassifier, and RedefinableElement::redefinitionContext.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("datatype")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedAttribute")]
        NMF.Interop.Legacy.Cmof.IDataType Datatype
        {
            get;
            set;
        }
        
        /// <summary>
        /// The class that owns the property, and of which the property is an attribute.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("class")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedAttribute")]
        NMF.Interop.Legacy.Cmof.IClass Class
        {
            get;
            set;
        }
        
        /// <summary>
        /// A multiplicity of a composite aggregation must not have an upper bound greater than 1.
        ///isComposite implies (upperBound()->isEmpty() or upperBound() <= 1)
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Multiplicity_of_composite(object diagnostics, object context);
        
        /// <summary>
        /// Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.
        ///self.subsettedProperty->notEmpty() implies
        ///  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |
        ///    self.subsettedProperty->forAll(sp |
        ///      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Subsetting_context(object diagnostics, object context);
        
        /// <summary>
        /// A navigable property can only be redefined or subsetted by a navigable property.
        ///(self.subsettedProperty->exists(sp | sp.isNavigable()) implies self.isNavigable())
        ///  and (self.redefinedProperty->exists(rp | rp.isNavigable()) implies self.isNavigable())
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Navigable_property_redefinition(object diagnostics, object context);
        
        /// <summary>
        /// A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.
        ///self.subsettedProperty->forAll(sp |
        ///  self.type.conformsTo(sp.type) and
        ///    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies
        ///      self.upperBound()<=sp.upperBound() ))
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Subsetting_rules(object diagnostics, object context);
        
        /// <summary>
        /// Only a navigable property can be marked as readOnly.
        ///isReadOnly implies isNavigable()
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Navigable_readonly(object diagnostics, object context);
        
        /// <summary>
        /// A derived union is derived.
        ///isDerivedUnion implies isDerived
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Derived_union_is_derived(object diagnostics, object context);
        
        /// <summary>
        /// If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.
        ///result = if owningAssociation->notEmpty() and association.memberEnd->size() = 2 then 
        ///		let otherEnd = (association.memberEnd - self)->any() in 
        ///			if otherEnd.owningAssociation->notEmpty then otherEnd else Set{} endif
        ///	else Set {}
        ///	endif
        /// </summary>
        IProperty GetOpposite();
        
        /// <summary>
        /// The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.
        ///result = if association->notEmpty()
        ///then association.endType-type 
        ///else if classifier->notEmpty then Set{classifier} else Set{} endif
        ///endif
        /// </summary>
        ISetExpression<IClassifier> SubsettingContext();
        
        /// <summary>
        /// The query isNavigable indicates whether it is possible to navigate across the property.
        ///result = not classifier->isEmpty() or
        ///association.owningAssociation.navigableOwnedEnd->includes(self)
        /// </summary>
        bool IsNavigable();
    }
}
