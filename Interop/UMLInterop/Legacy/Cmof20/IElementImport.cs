//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// The public interface for ElementImport
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElementImport))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElementImport))]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//ElementImport")]
    public interface IElementImport : IModelElement, IDirectedRelationship
    {
        
        /// <summary>
        /// Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.
        /// </summary>
        [DisplayNameAttribute("visibility")]
        [DescriptionAttribute(@"Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.")]
        [CategoryAttribute("ElementImport")]
        [XmlElementNameAttribute("visibility")]
        [XmlAttributeAttribute(true)]
        VisibilityKind Visibility
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the name that should be added to the namespace of the importing Package in lieu of the name of the imported PackagableElement. The aliased name must not clash with any other member name in the importing Package. By default, no alias is used.
        /// </summary>
        [DisplayNameAttribute("alias")]
        [DescriptionAttribute("Specifies the name that should be added to the namespace of the importing Package" +
            " in lieu of the name of the imported PackagableElement. The aliased name must no" +
            "t clash with any other member name in the importing Package. By default, no alia" +
            "s is used.")]
        [CategoryAttribute("ElementImport")]
        [XmlElementNameAttribute("alias")]
        [XmlAttributeAttribute(true)]
        string Alias
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the PackageableElement whose name is to be added to a Namespace. Subsets DirectedRelationship::target.
        /// </summary>
        [DisplayNameAttribute("importedElement")]
        [DescriptionAttribute("Specifies the PackageableElement whose name is to be added to a Namespace. Subset" +
            "s DirectedRelationship::target.")]
        [CategoryAttribute("ElementImport")]
        [XmlElementNameAttribute("importedElement")]
        [XmlAttributeAttribute(true)]
        IPackageableElement ImportedElement
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the Namespace that imports a PackageableElement from another Package. Subsets DirectedRelationship::source and Element::owner.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("importingNamespace")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("elementImport")]
        NMF.Interop.Legacy.Cmof.INamespace ImportingNamespace
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the operation visibility_public_or_private gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Visibility_public_or_privateCalling;
        
        /// <summary>
        /// Gets fired after the operation visibility_public_or_private got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Visibility_public_or_privateCalled;
        
        /// <summary>
        /// Gets fired before the operation imported_element_is_public gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Imported_element_is_publicCalling;
        
        /// <summary>
        /// Gets fired after the operation imported_element_is_public got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Imported_element_is_publicCalled;
        
        /// <summary>
        /// Gets fired before the operation getName gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> GetNameCalling;
        
        /// <summary>
        /// Gets fired after the operation getName got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> GetNameCalled;
        
        /// <summary>
        /// Gets fired when the Visibility property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VisibilityChanged;
        
        /// <summary>
        /// Gets fired before the Visibility property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VisibilityChanging;
        
        /// <summary>
        /// Gets fired when the Alias property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AliasChanged;
        
        /// <summary>
        /// Gets fired before the Alias property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AliasChanging;
        
        /// <summary>
        /// Gets fired before the ImportedElement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImportedElementChanging;
        
        /// <summary>
        /// Gets fired when the ImportedElement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImportedElementChanged;
        
        /// <summary>
        /// Gets fired before the ImportingNamespace property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImportingNamespaceChanging;
        
        /// <summary>
        /// Gets fired when the ImportingNamespace property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImportingNamespaceChanged;
        
        /// <summary>
        /// The visibility of an ElementImport is either public or private.
        ///self.visibility = #public or self.visibility = #private
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Visibility_public_or_private(object diagnostics, object context);
        
        /// <summary>
        /// An importedElement has either public visibility or no visibility at all.
        ///self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Imported_element_is_public(object diagnostics, object context);
        
        /// <summary>
        /// The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.
        ///result = if self.alias->notEmpty() then 
        ///  self.alias
        ///else
        ///  self.importedElement.name
        ///endif
        /// </summary>
        string GetName();
    }
}

