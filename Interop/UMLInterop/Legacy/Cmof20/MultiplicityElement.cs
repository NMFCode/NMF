//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NMF.Interop.Legacy.Cmof
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    using System.Globalization;
    
    
    /// <summary>
    /// A MultiplicityElement is an abstract metaclass which includes optional attributes for defining the bounds of a multiplicity. A MultiplicityElement also includes specifications of whether the values in an instantiation of this element must be unique or ordered.
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//MultiplicityElement")]
    public abstract partial class MultiplicityElement : Element, IMultiplicityElement, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upper_gt_0Operation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpper_gt_0Operation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lower_ge_0Operation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLower_ge_0Operation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upper_ge_lowerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpper_ge_lowerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lowerBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLowerBoundOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upperBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpperBoundOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isMultivaluedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsMultivaluedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _includesCardinalityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncludesCardinalityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _includesMultiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncludesMultiplicityOperation);
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isOrdered = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isOrderedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsOrderedAttribute);
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isUnique = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isUniqueAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsUniqueAttribute);
        
        /// <summary>
        /// The backing field for the Lower property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _lower = 1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _lowerAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLowerAttribute);
        
        /// <summary>
        /// The backing field for the Upper property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _upper = 1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _upperAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUpperAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered. Default is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isOrdered")]
        [DescriptionAttribute("For a multivalued multiplicity, this attribute specifies whether the values in an" +
            " instantiation of this element are sequentially ordered. Default is false.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        public bool IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    bool old = this._isOrdered;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsOrdered", e, _isOrderedAttribute);
                    this._isOrdered = value;
                    this.OnPropertyChanged("IsOrdered", e, _isOrderedAttribute);
                }
            }
        }
        
        /// <summary>
        /// For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique. Default is true.
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isUnique")]
        [DescriptionAttribute("For a multivalued multiplicity, this attributes specifies whether the values in a" +
            "n instantiation of this element are unique. Default is true.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isUnique")]
        [XmlAttributeAttribute(true)]
        public bool IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((this._isUnique != value))
                {
                    bool old = this._isUnique;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsUnique", e, _isUniqueAttribute);
                    this._isUnique = value;
                    this.OnPropertyChanged("IsUnique", e, _isUniqueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the lower bound of the multiplicity interval. Default is one.
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("lower")]
        [DescriptionAttribute("Specifies the lower bound of the multiplicity interval. Default is one.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("lower")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Lower
        {
            get
            {
                return this._lower;
            }
            set
            {
                if ((this._lower != value))
                {
                    Nullable<int> old = this._lower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Lower", e, _lowerAttribute);
                    this._lower = value;
                    this.OnPropertyChanged("Lower", e, _lowerAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the upper bound of the multiplicity interval. Default is one.
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("upper")]
        [DescriptionAttribute("Specifies the upper bound of the multiplicity interval. Default is one.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("upper")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Upper
        {
            get
            {
                return this._upper;
            }
            set
            {
                if ((this._upper != value))
                {
                    Nullable<int> old = this._upper;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Upper", e, _upperAttribute);
                    this._upper = value;
                    this.OnPropertyChanged("Upper", e, _upperAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//MultiplicityElement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A multiplicity must define at least one valid cardinality that is greater than zero.
        ///upperBound()->notEmpty() implies upperBound() > 0
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Upper_gt_0(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_upper_gt_0Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upper_gt_0 registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upper_gt_0Operation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upper_gt_0Operation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upper_gt_0Operation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpper_gt_0Operation()
        {
            return ClassInstance.LookupOperation("upper_gt_0");
        }
        
        /// <summary>
        /// The lower bound must be a non-negative integer literal.
        ///lowerBound()->notEmpty() implies lowerBound() >= 0
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Lower_ge_0(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_lower_ge_0Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lower_ge_0 registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lower_ge_0Operation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lower_ge_0Operation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lower_ge_0Operation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLower_ge_0Operation()
        {
            return ClassInstance.LookupOperation("lower_ge_0");
        }
        
        /// <summary>
        /// The upper bound must be greater than or equal to the lower bound.
        ///(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Upper_ge_lower(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_upper_ge_lowerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upper_ge_lower registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upper_ge_lowerOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upper_ge_lowerOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upper_ge_lowerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpper_ge_lowerOperation()
        {
            return ClassInstance.LookupOperation("upper_ge_lower");
        }
        
        /// <summary>
        /// The query lowerBound() returns the lower bound of the multiplicity as an integer.
        ///result = if lower->notEmpty() then lower else 1 endif
        /// </summary>
        public int LowerBound()
        {
            System.Func<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int>>(_lowerBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lowerBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lowerBoundOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lowerBoundOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lowerBoundOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLowerBoundOperation()
        {
            return ClassInstance.LookupOperation("lowerBound");
        }
        
        /// <summary>
        /// The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.
        ///result = if upper->notEmpty() then upper else 1 endif
        /// </summary>
        public int UpperBound()
        {
            System.Func<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int>>(_upperBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upperBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upperBoundOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upperBoundOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upperBoundOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpperBoundOperation()
        {
            return ClassInstance.LookupOperation("upperBound");
        }
        
        /// <summary>
        /// The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
        ///upperBound()->notEmpty()
        ///result = upperBound() > 1
        /// </summary>
        public bool IsMultivalued()
        {
            System.Func<IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, bool>>(_isMultivaluedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isMultivalued registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isMultivaluedOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isMultivaluedOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isMultivaluedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsMultivaluedOperation()
        {
            return ClassInstance.LookupOperation("isMultivalued");
        }
        
        /// <summary>
        /// The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.
        ///upperBound()->notEmpty() and lowerBound()->notEmpty()
        ///result = (lowerBound() <= C) and (upperBound() >= C)
        /// </summary>
        /// <param name="c"></param>
        public bool IncludesCardinality(int c)
        {
            System.Func<IMultiplicityElement, int, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int, bool>>(_includesCardinalityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method includesCardinality registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _includesCardinalityOperation.Value, c);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _includesCardinalityOperation.Value, e));
            bool result = handler.Invoke(this, c);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _includesCardinalityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncludesCardinalityOperation()
        {
            return ClassInstance.LookupOperation("includesCardinality");
        }
        
        /// <summary>
        /// The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.
        ///self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()
        ///result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
        /// </summary>
        /// <param name="m"></param>
        public bool IncludesMultiplicity(IMultiplicityElement m)
        {
            System.Func<IMultiplicityElement, IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, IMultiplicityElement, bool>>(_includesMultiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method includesMultiplicity registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _includesMultiplicityOperation.Value, m);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _includesMultiplicityOperation.Value, e));
            bool result = handler.Invoke(this, m);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _includesMultiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncludesMultiplicityOperation()
        {
            return ClassInstance.LookupOperation("includesMultiplicity");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsOrderedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("isOrdered")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsUniqueAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("isUnique")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLowerAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("lower")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUpperAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("upper")));
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISORDERED"))
            {
                return this.IsOrdered;
            }
            if ((attribute == "ISUNIQUE"))
            {
                return this.IsUnique;
            }
            if ((attribute == "LOWER"))
            {
                return this.Lower;
            }
            if ((attribute == "UPPER"))
            {
                return this.Upper;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISORDERED"))
            {
                this.IsOrdered = ((bool)(value));
                return;
            }
            if ((feature == "ISUNIQUE"))
            {
                this.IsUnique = ((bool)(value));
                return;
            }
            if ((feature == "LOWER"))
            {
                this.Lower = ((int)(value));
                return;
            }
            if ((feature == "UPPER"))
            {
                this.Upper = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISORDERED"))
            {
                return Observable.Box(new IsOrderedProxy(this));
            }
            if ((attribute == "ISUNIQUE"))
            {
                return Observable.Box(new IsUniqueProxy(this));
            }
            if ((attribute == "LOWER"))
            {
                return Observable.Box(new LowerProxy(this));
            }
            if ((attribute == "UPPER"))
            {
                return Observable.Box(new UpperProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//MultiplicityElement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isOrdered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isUnique")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lower property
        /// </summary>
        private sealed class LowerProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "lower")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Lower;
                }
                set
                {
                    this.ModelElement.Lower = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upper property
        /// </summary>
        private sealed class UpperProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "upper")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Upper;
                }
                set
                {
                    this.ModelElement.Upper = value;
                }
            }
        }
    }
}
