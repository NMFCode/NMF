//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// The default implementation of the Link class
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Link")]
    public partial class Link : ModelElement, ILink, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _equalsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveEqualsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _deleteOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveDeleteOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _secondElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveSecondElementReference);
        
        /// <summary>
        /// The backing field for the SecondElement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElement _secondElement;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _firstElementReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveFirstElementReference);
        
        /// <summary>
        /// The backing field for the FirstElement property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IElement _firstElement;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _associationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveAssociationReference);
        
        /// <summary>
        /// The backing field for the Association property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAssociation _association;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The secondElement property
        /// </summary>
        [DisplayNameAttribute("secondElement")]
        [CategoryAttribute("Link")]
        [XmlElementNameAttribute("secondElement")]
        [XmlAttributeAttribute(true)]
        public IElement SecondElement
        {
            get
            {
                return this._secondElement;
            }
            set
            {
                if ((this._secondElement != value))
                {
                    IElement old = this._secondElement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("SecondElement", e, _secondElementReference);
                    this._secondElement = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSecondElement;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSecondElement;
                    }
                    this.OnPropertyChanged("SecondElement", e, _secondElementReference);
                }
            }
        }
        
        /// <summary>
        /// The firstElement property
        /// </summary>
        [DisplayNameAttribute("firstElement")]
        [CategoryAttribute("Link")]
        [XmlElementNameAttribute("firstElement")]
        [XmlAttributeAttribute(true)]
        public IElement FirstElement
        {
            get
            {
                return this._firstElement;
            }
            set
            {
                if ((this._firstElement != value))
                {
                    IElement old = this._firstElement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("FirstElement", e, _firstElementReference);
                    this._firstElement = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFirstElement;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFirstElement;
                    }
                    this.OnPropertyChanged("FirstElement", e, _firstElementReference);
                }
            }
        }
        
        /// <summary>
        /// The association property
        /// </summary>
        [DisplayNameAttribute("association")]
        [CategoryAttribute("Link")]
        [XmlElementNameAttribute("association")]
        [XmlAttributeAttribute(true)]
        public IAssociation Association
        {
            get
            {
                return this._association;
            }
            set
            {
                if ((this._association != value))
                {
                    IAssociation old = this._association;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Association", e, _associationReference);
                    this._association = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAssociation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAssociation;
                    }
                    this.OnPropertyChanged("Association", e, _associationReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LinkReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Link")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="otherLink"></param>
        public bool Equals(ILink otherLink)
        {
            System.Func<ILink, ILink, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ILink, ILink, bool>>(_equalsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method equals registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _equalsOperation.Value, otherLink);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _equalsOperation.Value, e));
            bool result = handler.Invoke(this, otherLink);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _equalsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveEqualsOperation()
        {
            return ClassInstance.LookupOperation("equals");
        }
        
        /// <summary>
        /// 
        /// </summary>
        public IModelElement Delete()
        {
            System.Func<ILink, IModelElement> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<ILink, IModelElement>>(_deleteOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method delete registered. Use the method broker to" +
                        " register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _deleteOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _deleteOperation.Value, e));
            IModelElement result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _deleteOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveDeleteOperation()
        {
            return ClassInstance.LookupOperation("delete");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveSecondElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Link.ClassInstance)).Resolve("secondElement")));
        }
        
        /// <summary>
        /// Handles the event that the SecondElement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSecondElement(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.SecondElement))
            {
                this.SecondElement = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveFirstElementReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Link.ClassInstance)).Resolve("firstElement")));
        }
        
        /// <summary>
        /// Handles the event that the FirstElement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFirstElement(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.FirstElement))
            {
                this.FirstElement = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveAssociationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Link.ClassInstance)).Resolve("association")));
        }
        
        /// <summary>
        /// Handles the event that the Association property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssociation(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Association))
            {
                this.Association = null;
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SECONDELEMENT"))
            {
                return this.SecondElement;
            }
            if ((reference == "FIRSTELEMENT"))
            {
                return this.FirstElement;
            }
            if ((reference == "ASSOCIATION"))
            {
                return this.Association;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SECONDELEMENT"))
            {
                this.SecondElement = ((IElement)(value));
                return;
            }
            if ((feature == "FIRSTELEMENT"))
            {
                this.FirstElement = ((IElement)(value));
                return;
            }
            if ((feature == "ASSOCIATION"))
            {
                this.Association = ((IAssociation)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SECONDELEMENT"))
            {
                return new SecondElementProxy(this);
            }
            if ((reference == "FIRSTELEMENT"))
            {
                return new FirstElementProxy(this);
            }
            if ((reference == "ASSOCIATION"))
            {
                return new AssociationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Link")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Link class
        /// </summary>
        public class LinkReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Link _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LinkReferencedElementsCollection(Link parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SecondElement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FirstElement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Association != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SecondElement == null))
                {
                    IElement secondElementCasted = item.As<IElement>();
                    if ((secondElementCasted != null))
                    {
                        this._parent.SecondElement = secondElementCasted;
                        return;
                    }
                }
                if ((this._parent.FirstElement == null))
                {
                    IElement firstElementCasted = item.As<IElement>();
                    if ((firstElementCasted != null))
                    {
                        this._parent.FirstElement = firstElementCasted;
                        return;
                    }
                }
                if ((this._parent.Association == null))
                {
                    IAssociation associationCasted = item.As<IAssociation>();
                    if ((associationCasted != null))
                    {
                        this._parent.Association = associationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SecondElement = null;
                this._parent.FirstElement = null;
                this._parent.Association = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SecondElement))
                {
                    return true;
                }
                if ((item == this._parent.FirstElement))
                {
                    return true;
                }
                if ((item == this._parent.Association))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SecondElement != null))
                {
                    array[arrayIndex] = this._parent.SecondElement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FirstElement != null))
                {
                    array[arrayIndex] = this._parent.FirstElement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Association != null))
                {
                    array[arrayIndex] = this._parent.Association;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SecondElement == item))
                {
                    this._parent.SecondElement = null;
                    return true;
                }
                if ((this._parent.FirstElement == item))
                {
                    this._parent.FirstElement = null;
                    return true;
                }
                if ((this._parent.Association == item))
                {
                    this._parent.Association = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SecondElement).Concat(this._parent.FirstElement).Concat(this._parent.Association).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the secondElement property
        /// </summary>
        private sealed class SecondElementProxy : ModelPropertyChange<ILink, IElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SecondElementProxy(ILink modelElement) : 
                    base(modelElement, "secondElement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElement Value
            {
                get
                {
                    return this.ModelElement.SecondElement;
                }
                set
                {
                    this.ModelElement.SecondElement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the firstElement property
        /// </summary>
        private sealed class FirstElementProxy : ModelPropertyChange<ILink, IElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FirstElementProxy(ILink modelElement) : 
                    base(modelElement, "firstElement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElement Value
            {
                get
                {
                    return this.ModelElement.FirstElement;
                }
                set
                {
                    this.ModelElement.FirstElement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the association property
        /// </summary>
        private sealed class AssociationProxy : ModelPropertyChange<ILink, IAssociation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssociationProxy(ILink modelElement) : 
                    base(modelElement, "association")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssociation Value
            {
                get
                {
                    return this.ModelElement.Association;
                }
                set
                {
                    this.ModelElement.Association = value;
                }
            }
        }
    }
}
