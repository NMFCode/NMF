//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// An operation is owned by a class and may be invoked in the context of objects that are instances of that class. It is a typed element and a multiplicity element.
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Operation")]
    [DebuggerDisplayAttribute("Operation {Name}")]
    public partial class Operation : BehavioralFeature, NMF.Interop.Legacy.Cmof.IOperation, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _only_body_for_queryOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOnly_body_for_queryOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _at_most_one_returnOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAt_most_one_returnOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isOrderedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsOrderedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isUniqueOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsUniqueOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getTypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetTypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _returnResultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveReturnResultOperation);
        
        /// <summary>
        /// The backing field for the IsQuery property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isQuery = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isQueryAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsQueryAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _redefinedOperationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRedefinedOperationReference);
        
        /// <summary>
        /// The backing field for the RedefinedOperation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<NMF.Interop.Legacy.Cmof.IOperation> _redefinedOperation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _preconditionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePreconditionReference);
        
        /// <summary>
        /// The backing field for the Precondition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IConstraint> _precondition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _postconditionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePostconditionReference);
        
        /// <summary>
        /// The backing field for the Postcondition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IConstraint> _postcondition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _bodyConditionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveBodyConditionReference);
        
        /// <summary>
        /// The backing field for the BodyCondition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<IConstraint> _bodyCondition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _classReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveClassReference);
        
        /// <summary>
        /// The backing field for the Class property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Legacy.Cmof.IClass _class;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _datatypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDatatypeReference);
        
        /// <summary>
        /// The backing field for the Datatype property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Legacy.Cmof.IDataType _datatype;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upper_gt_0Operation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpper_gt_0Operation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lower_ge_0Operation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLower_ge_0Operation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upper_ge_lowerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpper_ge_lowerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lowerBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLowerBoundOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upperBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpperBoundOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isMultivaluedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsMultivaluedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _includesCardinalityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncludesCardinalityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _includesMultiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncludesMultiplicityOperation);
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isOrdered = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isOrderedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsOrderedAttribute);
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isUnique = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isUniqueAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsUniqueAttribute);
        
        /// <summary>
        /// The backing field for the Lower property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _lower = 1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _lowerAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLowerAttribute);
        
        /// <summary>
        /// The backing field for the Upper property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _upper = 1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _upperAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUpperAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _typeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTypeReference);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Legacy.Cmof.IType _type;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        public Operation()
        {
            this._redefinedOperation = new ObservableAssociationSet<NMF.Interop.Legacy.Cmof.IOperation>();
            this._redefinedOperation.CollectionChanging += this.RedefinedOperationCollectionChanging;
            this._redefinedOperation.CollectionChanged += this.RedefinedOperationCollectionChanged;
            this._precondition = new ObservableAssociationSet<IConstraint>();
            this._precondition.CollectionChanging += this.PreconditionCollectionChanging;
            this._precondition.CollectionChanged += this.PreconditionCollectionChanged;
            this._postcondition = new ObservableAssociationSet<IConstraint>();
            this._postcondition.CollectionChanging += this.PostconditionCollectionChanging;
            this._postcondition.CollectionChanged += this.PostconditionCollectionChanged;
            this._bodyCondition = new ObservableAssociationSet<IConstraint>();
            this._bodyCondition.CollectionChanging += this.BodyConditionCollectionChanging;
            this._bodyCondition.CollectionChanged += this.BodyConditionCollectionChanged;
        }
        
        /// <summary>
        /// Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false). The default value is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isQuery")]
        [DescriptionAttribute("Specifies whether an execution of the BehavioralFeature leaves the state of the s" +
            "ystem unchanged (isQuery=true) or whether side effects may occur (isQuery=false)" +
            ". The default value is false.")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("isQuery")]
        [XmlAttributeAttribute(true)]
        public bool IsQuery
        {
            get
            {
                return this._isQuery;
            }
            set
            {
                if ((this._isQuery != value))
                {
                    bool old = this._isQuery;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsQueryChanging(e);
                    this.OnPropertyChanging("IsQuery", e, _isQueryAttribute);
                    this._isQuery = value;
                    this.OnIsQueryChanged(e);
                    this.OnPropertyChanged("IsQuery", e, _isQueryAttribute);
                }
            }
        }
        
        /// <summary>
        /// References the Operations that are redefined by this Operation. Subsets RedefinableElement.redefinedElement.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedOperation")]
        [DescriptionAttribute("References the Operations that are redefined by this Operation. Subsets Redefinab" +
            "leElement.redefinedElement.")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("redefinedOperation")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<NMF.Interop.Legacy.Cmof.IOperation> RedefinedOperation
        {
            get
            {
                return this._redefinedOperation;
            }
        }
        
        /// <summary>
        /// The precondition property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("precondition")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("precondition")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IConstraint> Precondition
        {
            get
            {
                return this._precondition;
            }
        }
        
        /// <summary>
        /// The postcondition property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("postcondition")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("postcondition")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IConstraint> Postcondition
        {
            get
            {
                return this._postcondition;
            }
        }
        
        /// <summary>
        /// The bodyCondition property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("bodyCondition")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("bodyCondition")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<IConstraint> BodyCondition
        {
            get
            {
                return this._bodyCondition;
            }
        }
        
        /// <summary>
        /// The class that owns the operation. Subsets RedefinableElement::redefinitionContext and NamedElement::namespace and Feature::featuringClassifier.
        ///The class that owns the operation.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("class")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedOperation")]
        public NMF.Interop.Legacy.Cmof.IClass Class
        {
            get
            {
                return this._class;
            }
            set
            {
                if ((this._class != value))
                {
                    NMF.Interop.Legacy.Cmof.IClass old = this._class;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClassChanging(e);
                    this.OnPropertyChanging("Class", e, _classReference);
                    this._class = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OwnedOperation.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.OwnedOperation.Add(this);
                    }
                    this.OnClassChanged(e);
                    this.OnPropertyChanged("Class", e, _classReference);
                }
            }
        }
        
        /// <summary>
        /// The DataType that owns this Operation. Subsets NamedElement::namespace, Feature::featuringClassifier, and RedefinableElement::redefinitionContext.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("datatype")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ownedOperation")]
        public NMF.Interop.Legacy.Cmof.IDataType Datatype
        {
            get
            {
                return this._datatype;
            }
            set
            {
                if ((this._datatype != value))
                {
                    NMF.Interop.Legacy.Cmof.IDataType old = this._datatype;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDatatypeChanging(e);
                    this.OnPropertyChanging("Datatype", e, _datatypeReference);
                    this._datatype = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OwnedOperation.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.OwnedOperation.Add(this);
                    }
                    this.OnDatatypeChanged(e);
                    this.OnPropertyChanged("Datatype", e, _datatypeReference);
                }
            }
        }
        
        /// <summary>
        /// For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered. Default is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isOrdered")]
        [DescriptionAttribute("For a multivalued multiplicity, this attribute specifies whether the values in an" +
            " instantiation of this element are sequentially ordered. Default is false.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        public bool IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    bool old = this._isOrdered;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsOrderedChanging(e);
                    this.OnPropertyChanging("IsOrdered", e, _isOrderedAttribute);
                    this._isOrdered = value;
                    this.OnIsOrderedChanged(e);
                    this.OnPropertyChanged("IsOrdered", e, _isOrderedAttribute);
                }
            }
        }
        
        /// <summary>
        /// For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique. Default is true.
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isUnique")]
        [DescriptionAttribute("For a multivalued multiplicity, this attributes specifies whether the values in a" +
            "n instantiation of this element are unique. Default is true.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isUnique")]
        [XmlAttributeAttribute(true)]
        public bool IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((this._isUnique != value))
                {
                    bool old = this._isUnique;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsUniqueChanging(e);
                    this.OnPropertyChanging("IsUnique", e, _isUniqueAttribute);
                    this._isUnique = value;
                    this.OnIsUniqueChanged(e);
                    this.OnPropertyChanged("IsUnique", e, _isUniqueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the lower bound of the multiplicity interval. Default is one.
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("lower")]
        [DescriptionAttribute("Specifies the lower bound of the multiplicity interval. Default is one.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("lower")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Lower
        {
            get
            {
                return this._lower;
            }
            set
            {
                if ((this._lower != value))
                {
                    Nullable<int> old = this._lower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerChanging(e);
                    this.OnPropertyChanging("Lower", e, _lowerAttribute);
                    this._lower = value;
                    this.OnLowerChanged(e);
                    this.OnPropertyChanged("Lower", e, _lowerAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the upper bound of the multiplicity interval. Default is one.
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("upper")]
        [DescriptionAttribute("Specifies the upper bound of the multiplicity interval. Default is one.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("upper")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Upper
        {
            get
            {
                return this._upper;
            }
            set
            {
                if ((this._upper != value))
                {
                    Nullable<int> old = this._upper;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUpperChanging(e);
                    this.OnPropertyChanging("Upper", e, _upperAttribute);
                    this._upper = value;
                    this.OnUpperChanged(e);
                    this.OnPropertyChanged("Upper", e, _upperAttribute);
                }
            }
        }
        
        /// <summary>
        /// Redefines the corresponding property from Basic to derive this information from the return result for this Operation.
        ///The type of the TypedElement.
        /// </summary>
        [DisplayNameAttribute("type")]
        [DescriptionAttribute("Redefines the corresponding property from Basic to derive this information from t" +
            "he return result for this Operation.\r\nThe type of the TypedElement.")]
        [CategoryAttribute("TypedElement")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public NMF.Interop.Legacy.Cmof.IType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    NMF.Interop.Legacy.Cmof.IType old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeReference);
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new OperationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OperationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Operation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the operation only_body_for_query gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Only_body_for_queryCalling;
        
        /// <summary>
        /// Gets fired after the operation only_body_for_query got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Only_body_for_queryCalled;
        
        /// <summary>
        /// Gets fired before the operation at_most_one_return gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> At_most_one_returnCalling;
        
        /// <summary>
        /// Gets fired after the operation at_most_one_return got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> At_most_one_returnCalled;
        
        /// <summary>
        /// Gets fired before the operation isOrdered gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IsOrderedCalling;
        
        /// <summary>
        /// Gets fired after the operation isOrdered got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IsOrderedCalled;
        
        /// <summary>
        /// Gets fired before the operation isUnique gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IsUniqueCalling;
        
        /// <summary>
        /// Gets fired after the operation isUnique got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IsUniqueCalled;
        
        /// <summary>
        /// Gets fired before the operation getType gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> GetTypeCalling;
        
        /// <summary>
        /// Gets fired after the operation getType got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> GetTypeCalled;
        
        /// <summary>
        /// Gets fired before the operation returnResult gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> ReturnResultCalling;
        
        /// <summary>
        /// Gets fired after the operation returnResult got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> ReturnResultCalled;
        
        /// <summary>
        /// Gets fired when the IsQuery property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsQueryChanged;
        
        /// <summary>
        /// Gets fired before the IsQuery property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsQueryChanging;
        
        /// <summary>
        /// Gets fired before the Class property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassChanging;
        
        /// <summary>
        /// Gets fired when the Class property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassChanged;
        
        /// <summary>
        /// Gets fired before the Datatype property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DatatypeChanging;
        
        /// <summary>
        /// Gets fired when the Datatype property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DatatypeChanged;
        
        /// <summary>
        /// Gets fired before the operation upper_gt_0 gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Upper_gt_0Calling;
        
        /// <summary>
        /// Gets fired after the operation upper_gt_0 got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Upper_gt_0Called;
        
        /// <summary>
        /// Gets fired before the operation lower_ge_0 gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Lower_ge_0Calling;
        
        /// <summary>
        /// Gets fired after the operation lower_ge_0 got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Lower_ge_0Called;
        
        /// <summary>
        /// Gets fired before the operation upper_ge_lower gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Upper_ge_lowerCalling;
        
        /// <summary>
        /// Gets fired after the operation upper_ge_lower got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Upper_ge_lowerCalled;
        
        /// <summary>
        /// Gets fired before the operation lowerBound gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> LowerBoundCalling;
        
        /// <summary>
        /// Gets fired after the operation lowerBound got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> LowerBoundCalled;
        
        /// <summary>
        /// Gets fired before the operation upperBound gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> UpperBoundCalling;
        
        /// <summary>
        /// Gets fired after the operation upperBound got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> UpperBoundCalled;
        
        /// <summary>
        /// Gets fired before the operation isMultivalued gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IsMultivaluedCalling;
        
        /// <summary>
        /// Gets fired after the operation isMultivalued got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IsMultivaluedCalled;
        
        /// <summary>
        /// Gets fired before the operation includesCardinality gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IncludesCardinalityCalling;
        
        /// <summary>
        /// Gets fired after the operation includesCardinality got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IncludesCardinalityCalled;
        
        /// <summary>
        /// Gets fired before the operation includesMultiplicity gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IncludesMultiplicityCalling;
        
        /// <summary>
        /// Gets fired after the operation includesMultiplicity got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IncludesMultiplicityCalled;
        
        /// <summary>
        /// Gets fired when the IsOrdered property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsOrderedChanged;
        
        /// <summary>
        /// Gets fired before the IsOrdered property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsOrderedChanging;
        
        /// <summary>
        /// Gets fired when the IsUnique property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsUniqueChanged;
        
        /// <summary>
        /// Gets fired before the IsUnique property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsUniqueChanging;
        
        /// <summary>
        /// Gets fired when the Lower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerChanged;
        
        /// <summary>
        /// Gets fired before the Lower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerChanging;
        
        /// <summary>
        /// Gets fired when the Upper property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperChanged;
        
        /// <summary>
        /// Gets fired before the Upper property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperChanging;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// A bodyCondition can only be specified for a query operation.
        ///bodyCondition->notEmpty() implies isQuery
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Only_body_for_query(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Legacy.Cmof.IOperation, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IOperation, object, object, bool>>(_only_body_for_queryOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method only_body_for_query registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _only_body_for_queryOperation.Value, diagnostics, context);
            this.OnOnly_body_for_queryCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _only_body_for_queryOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnOnly_body_for_queryCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _only_body_for_queryOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOnly_body_for_queryOperation()
        {
            return ClassInstance.LookupOperation("only_body_for_query");
        }
        
        /// <summary>
        /// Raises the Only_body_for_queryCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOnly_body_for_queryCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Only_body_for_queryCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Only_body_for_queryCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOnly_body_for_queryCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Only_body_for_queryCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'
        ///self.ownedParameter->select(par | par.direction = #return)->size() <= 1
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool At_most_one_return(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Legacy.Cmof.IOperation, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IOperation, object, object, bool>>(_at_most_one_returnOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method at_most_one_return registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _at_most_one_returnOperation.Value, diagnostics, context);
            this.OnAt_most_one_returnCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _at_most_one_returnOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnAt_most_one_returnCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _at_most_one_returnOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAt_most_one_returnOperation()
        {
            return ClassInstance.LookupOperation("at_most_one_return");
        }
        
        /// <summary>
        /// Raises the At_most_one_returnCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAt_most_one_returnCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.At_most_one_returnCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the At_most_one_returnCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAt_most_one_returnCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.At_most_one_returnCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsOrderedOperation()
        {
            return ClassInstance.LookupOperation("isOrdered");
        }
        
        /// <summary>
        /// Raises the IsOrderedCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IsOrderedCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsOrderedCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IsOrderedCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsUniqueOperation()
        {
            return ClassInstance.LookupOperation("isUnique");
        }
        
        /// <summary>
        /// Raises the IsUniqueCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IsUniqueCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsUniqueCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IsUniqueCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.
        ///result = if returnResult->size() = 1 then returnResult->any().type else Set{} endif
        /// </summary>
        public NMF.Interop.Legacy.Cmof.IType GetType()
        {
            System.Func<NMF.Interop.Legacy.Cmof.IOperation, NMF.Interop.Legacy.Cmof.IType> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IOperation, NMF.Interop.Legacy.Cmof.IType>>(_getTypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getType registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getTypeOperation.Value);
            this.OnGetTypeCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getTypeOperation.Value, e));
            NMF.Interop.Legacy.Cmof.IType result = handler.Invoke(this);
            e.Result = result;
            this.OnGetTypeCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getTypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetTypeOperation()
        {
            return ClassInstance.LookupOperation("getType");
        }
        
        /// <summary>
        /// Raises the GetTypeCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGetTypeCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.GetTypeCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GetTypeCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGetTypeCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.GetTypeCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// result = ownedParameter->select (par | par.direction = #return)
        /// </summary>
        public ISetExpression<NMF.Interop.Legacy.Cmof.IParameter> ReturnResult()
        {
            System.Func<NMF.Interop.Legacy.Cmof.IOperation, ISetExpression<NMF.Interop.Legacy.Cmof.IParameter>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IOperation, ISetExpression<NMF.Interop.Legacy.Cmof.IParameter>>>(_returnResultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method returnResult registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _returnResultOperation.Value);
            this.OnReturnResultCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _returnResultOperation.Value, e));
            ISetExpression<NMF.Interop.Legacy.Cmof.IParameter> result = handler.Invoke(this);
            e.Result = result;
            this.OnReturnResultCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _returnResultOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveReturnResultOperation()
        {
            return ClassInstance.LookupOperation("returnResult");
        }
        
        /// <summary>
        /// Raises the ReturnResultCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReturnResultCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.ReturnResultCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReturnResultCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReturnResultCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.ReturnResultCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsQueryAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("isQuery")));
        }
        
        /// <summary>
        /// Raises the IsQueryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsQueryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsQueryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsQueryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsQueryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsQueryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRedefinedOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("redefinedOperation")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RedefinedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedOperationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RedefinedOperation", e, _redefinedOperationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RedefinedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedOperationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RedefinedOperation", e, _redefinedOperationReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePreconditionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("precondition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Precondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PreconditionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Precondition", e, _preconditionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Precondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PreconditionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Precondition", e, _preconditionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePostconditionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("postcondition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Postcondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PostconditionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Postcondition", e, _postconditionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Postcondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PostconditionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Postcondition", e, _postconditionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveBodyConditionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("bodyCondition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BodyCondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BodyConditionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BodyCondition", e, _bodyConditionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BodyCondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BodyConditionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BodyCondition", e, _bodyConditionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveClassReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("class")));
        }
        
        /// <summary>
        /// Raises the ClassChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Class property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClass(object sender, System.EventArgs eventArgs)
        {
            this.Class = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDatatypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("datatype")));
        }
        
        /// <summary>
        /// Raises the DatatypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDatatypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DatatypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DatatypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDatatypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DatatypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Datatype property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDatatype(object sender, System.EventArgs eventArgs)
        {
            this.Datatype = null;
        }
        
        /// <summary>
        /// A multiplicity must define at least one valid cardinality that is greater than zero.
        ///upperBound()->notEmpty() implies upperBound() > 0
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Upper_gt_0(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_upper_gt_0Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upper_gt_0 registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upper_gt_0Operation.Value, diagnostics, context);
            this.OnUpper_gt_0Calling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upper_gt_0Operation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnUpper_gt_0Called(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upper_gt_0Operation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpper_gt_0Operation()
        {
            return ClassInstance.LookupOperation("upper_gt_0");
        }
        
        /// <summary>
        /// Raises the Upper_gt_0Calling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpper_gt_0Calling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Upper_gt_0Calling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Upper_gt_0Called event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpper_gt_0Called(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Upper_gt_0Called;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The lower bound must be a non-negative integer literal.
        ///lowerBound()->notEmpty() implies lowerBound() >= 0
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Lower_ge_0(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_lower_ge_0Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lower_ge_0 registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lower_ge_0Operation.Value, diagnostics, context);
            this.OnLower_ge_0Calling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lower_ge_0Operation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnLower_ge_0Called(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lower_ge_0Operation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLower_ge_0Operation()
        {
            return ClassInstance.LookupOperation("lower_ge_0");
        }
        
        /// <summary>
        /// Raises the Lower_ge_0Calling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLower_ge_0Calling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Lower_ge_0Calling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Lower_ge_0Called event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLower_ge_0Called(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Lower_ge_0Called;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The upper bound must be greater than or equal to the lower bound.
        ///(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Upper_ge_lower(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_upper_ge_lowerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upper_ge_lower registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upper_ge_lowerOperation.Value, diagnostics, context);
            this.OnUpper_ge_lowerCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upper_ge_lowerOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnUpper_ge_lowerCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upper_ge_lowerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpper_ge_lowerOperation()
        {
            return ClassInstance.LookupOperation("upper_ge_lower");
        }
        
        /// <summary>
        /// Raises the Upper_ge_lowerCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpper_ge_lowerCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Upper_ge_lowerCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Upper_ge_lowerCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpper_ge_lowerCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Upper_ge_lowerCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The query lowerBound() returns the lower bound of the multiplicity as an integer.
        ///result = if lower->notEmpty() then lower else 1 endif
        /// </summary>
        public int LowerBound()
        {
            System.Func<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int>>(_lowerBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lowerBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lowerBoundOperation.Value);
            this.OnLowerBoundCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lowerBoundOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnLowerBoundCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lowerBoundOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLowerBoundOperation()
        {
            return ClassInstance.LookupOperation("lowerBound");
        }
        
        /// <summary>
        /// Raises the LowerBoundCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerBoundCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.LowerBoundCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerBoundCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerBoundCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.LowerBoundCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.
        ///result = if upper->notEmpty() then upper else 1 endif
        /// </summary>
        public int UpperBound()
        {
            System.Func<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int>>(_upperBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upperBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upperBoundOperation.Value);
            this.OnUpperBoundCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upperBoundOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnUpperBoundCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upperBoundOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpperBoundOperation()
        {
            return ClassInstance.LookupOperation("upperBound");
        }
        
        /// <summary>
        /// Raises the UpperBoundCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperBoundCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.UpperBoundCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperBoundCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperBoundCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.UpperBoundCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
        ///upperBound()->notEmpty()
        ///result = upperBound() > 1
        /// </summary>
        public bool IsMultivalued()
        {
            System.Func<IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, bool>>(_isMultivaluedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isMultivalued registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isMultivaluedOperation.Value);
            this.OnIsMultivaluedCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isMultivaluedOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnIsMultivaluedCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isMultivaluedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsMultivaluedOperation()
        {
            return ClassInstance.LookupOperation("isMultivalued");
        }
        
        /// <summary>
        /// Raises the IsMultivaluedCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsMultivaluedCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IsMultivaluedCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsMultivaluedCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsMultivaluedCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IsMultivaluedCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.
        ///upperBound()->notEmpty() and lowerBound()->notEmpty()
        ///result = (lowerBound() <= C) and (upperBound() >= C)
        /// </summary>
        /// <param name="c"></param>
        public bool IncludesCardinality(int c)
        {
            System.Func<IMultiplicityElement, int, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int, bool>>(_includesCardinalityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method includesCardinality registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _includesCardinalityOperation.Value, c);
            this.OnIncludesCardinalityCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _includesCardinalityOperation.Value, e));
            bool result = handler.Invoke(this, c);
            e.Result = result;
            this.OnIncludesCardinalityCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _includesCardinalityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncludesCardinalityOperation()
        {
            return ClassInstance.LookupOperation("includesCardinality");
        }
        
        /// <summary>
        /// Raises the IncludesCardinalityCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludesCardinalityCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IncludesCardinalityCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludesCardinalityCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludesCardinalityCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IncludesCardinalityCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.
        ///self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()
        ///result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
        /// </summary>
        /// <param name="m"></param>
        public bool IncludesMultiplicity(IMultiplicityElement m)
        {
            System.Func<IMultiplicityElement, IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, IMultiplicityElement, bool>>(_includesMultiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method includesMultiplicity registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _includesMultiplicityOperation.Value, m);
            this.OnIncludesMultiplicityCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _includesMultiplicityOperation.Value, e));
            bool result = handler.Invoke(this, m);
            e.Result = result;
            this.OnIncludesMultiplicityCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _includesMultiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncludesMultiplicityOperation()
        {
            return ClassInstance.LookupOperation("includesMultiplicity");
        }
        
        /// <summary>
        /// Raises the IncludesMultiplicityCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludesMultiplicityCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IncludesMultiplicityCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludesMultiplicityCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludesMultiplicityCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IncludesMultiplicityCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsOrderedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("isOrdered")));
        }
        
        /// <summary>
        /// Raises the IsOrderedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsOrderedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsOrderedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsOrderedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsUniqueAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("isUnique")));
        }
        
        /// <summary>
        /// Raises the IsUniqueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsUniqueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsUniqueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsUniqueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLowerAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("lower")));
        }
        
        /// <summary>
        /// Raises the LowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUpperAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("upper")));
        }
        
        /// <summary>
        /// Raises the UpperChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.TypedElement.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, System.EventArgs eventArgs)
        {
            this.Type = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CLASS"))
            {
                return this.Class;
            }
            if ((reference == "DATATYPE"))
            {
                return this.Datatype;
            }
            if ((reference == "TYPE"))
            {
                return this.Type;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISQUERY"))
            {
                return this.IsQuery;
            }
            if ((attribute == "ISORDERED"))
            {
                return this.IsOrdered;
            }
            if ((attribute == "ISUNIQUE"))
            {
                return this.IsUnique;
            }
            if ((attribute == "LOWER"))
            {
                return this.Lower;
            }
            if ((attribute == "UPPER"))
            {
                return this.Upper;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REDEFINEDOPERATION"))
            {
                return this._redefinedOperation;
            }
            if ((feature == "PRECONDITION"))
            {
                return this._precondition;
            }
            if ((feature == "POSTCONDITION"))
            {
                return this._postcondition;
            }
            if ((feature == "BODYCONDITION"))
            {
                return this._bodyCondition;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CLASS"))
            {
                this.Class = ((NMF.Interop.Legacy.Cmof.IClass)(value));
                return;
            }
            if ((feature == "DATATYPE"))
            {
                this.Datatype = ((NMF.Interop.Legacy.Cmof.IDataType)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((NMF.Interop.Legacy.Cmof.IType)(value));
                return;
            }
            if ((feature == "ISQUERY"))
            {
                this.IsQuery = ((bool)(value));
                return;
            }
            if ((feature == "ISORDERED"))
            {
                this.IsOrdered = ((bool)(value));
                return;
            }
            if ((feature == "ISUNIQUE"))
            {
                this.IsUnique = ((bool)(value));
                return;
            }
            if ((feature == "LOWER"))
            {
                this.Lower = ((int)(value));
                return;
            }
            if ((feature == "UPPER"))
            {
                this.Upper = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISQUERY"))
            {
                return Observable.Box(new IsQueryProxy(this));
            }
            if ((attribute == "ISORDERED"))
            {
                return Observable.Box(new IsOrderedProxy(this));
            }
            if ((attribute == "ISUNIQUE"))
            {
                return Observable.Box(new IsUniqueProxy(this));
            }
            if ((attribute == "LOWER"))
            {
                return Observable.Box(new LowerProxy(this));
            }
            if ((attribute == "UPPER"))
            {
                return Observable.Box(new UpperProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CLASS"))
            {
                return new ClassProxy(this);
            }
            if ((reference == "DATATYPE"))
            {
                return new DatatypeProxy(this);
            }
            if ((reference == "TYPE"))
            {
                return new TypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Operation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Operation class
        /// </summary>
        public class OperationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Operation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperationChildrenCollection(Operation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
            }
            
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Operation class
        /// </summary>
        public class OperationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Operation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperationReferencedElementsCollection(Operation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.RedefinedOperation.Count);
                    count = (count + this._parent.Precondition.Count);
                    count = (count + this._parent.Postcondition.Count);
                    count = (count + this._parent.BodyCondition.Count);
                    if ((this._parent.Class != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Datatype != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Type != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RedefinedOperation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Precondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Postcondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BodyCondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ClassChanged += this.PropagateValueChanges;
                this._parent.DatatypeChanged += this.PropagateValueChanges;
                this._parent.TypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RedefinedOperation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Precondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Postcondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BodyCondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ClassChanged -= this.PropagateValueChanges;
                this._parent.DatatypeChanged -= this.PropagateValueChanges;
                this._parent.TypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                NMF.Interop.Legacy.Cmof.IOperation redefinedOperationCasted = item.As<NMF.Interop.Legacy.Cmof.IOperation>();
                if ((redefinedOperationCasted != null))
                {
                    this._parent.RedefinedOperation.Add(redefinedOperationCasted);
                }
                IConstraint preconditionCasted = item.As<IConstraint>();
                if ((preconditionCasted != null))
                {
                    this._parent.Precondition.Add(preconditionCasted);
                }
                IConstraint postconditionCasted = item.As<IConstraint>();
                if ((postconditionCasted != null))
                {
                    this._parent.Postcondition.Add(postconditionCasted);
                }
                IConstraint bodyConditionCasted = item.As<IConstraint>();
                if ((bodyConditionCasted != null))
                {
                    this._parent.BodyCondition.Add(bodyConditionCasted);
                }
                if ((this._parent.Class == null))
                {
                    NMF.Interop.Legacy.Cmof.IClass classCasted = item.As<NMF.Interop.Legacy.Cmof.IClass>();
                    if ((classCasted != null))
                    {
                        this._parent.Class = classCasted;
                        return;
                    }
                }
                if ((this._parent.Datatype == null))
                {
                    NMF.Interop.Legacy.Cmof.IDataType datatypeCasted = item.As<NMF.Interop.Legacy.Cmof.IDataType>();
                    if ((datatypeCasted != null))
                    {
                        this._parent.Datatype = datatypeCasted;
                        return;
                    }
                }
                if ((this._parent.Type == null))
                {
                    NMF.Interop.Legacy.Cmof.IType typeCasted = item.As<NMF.Interop.Legacy.Cmof.IType>();
                    if ((typeCasted != null))
                    {
                        this._parent.Type = typeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RedefinedOperation.Clear();
                this._parent.Precondition.Clear();
                this._parent.Postcondition.Clear();
                this._parent.BodyCondition.Clear();
                this._parent.Class = null;
                this._parent.Datatype = null;
                this._parent.Type = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.RedefinedOperation.Contains(item))
                {
                    return true;
                }
                if (this._parent.Precondition.Contains(item))
                {
                    return true;
                }
                if (this._parent.Postcondition.Contains(item))
                {
                    return true;
                }
                if (this._parent.BodyCondition.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Class))
                {
                    return true;
                }
                if ((item == this._parent.Datatype))
                {
                    return true;
                }
                if ((item == this._parent.Type))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> redefinedOperationEnumerator = this._parent.RedefinedOperation.GetEnumerator();
                try
                {
                    for (
                    ; redefinedOperationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = redefinedOperationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    redefinedOperationEnumerator.Dispose();
                }
                IEnumerator<IModelElement> preconditionEnumerator = this._parent.Precondition.GetEnumerator();
                try
                {
                    for (
                    ; preconditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = preconditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    preconditionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> postconditionEnumerator = this._parent.Postcondition.GetEnumerator();
                try
                {
                    for (
                    ; postconditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = postconditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    postconditionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bodyConditionEnumerator = this._parent.BodyCondition.GetEnumerator();
                try
                {
                    for (
                    ; bodyConditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bodyConditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bodyConditionEnumerator.Dispose();
                }
                if ((this._parent.Class != null))
                {
                    array[arrayIndex] = this._parent.Class;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Datatype != null))
                {
                    array[arrayIndex] = this._parent.Datatype;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Type != null))
                {
                    array[arrayIndex] = this._parent.Type;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                NMF.Interop.Legacy.Cmof.IOperation operationItem = item.As<NMF.Interop.Legacy.Cmof.IOperation>();
                if (((operationItem != null) 
                            && this._parent.RedefinedOperation.Remove(operationItem)))
                {
                    return true;
                }
                IConstraint constraintItem = item.As<IConstraint>();
                if (((constraintItem != null) 
                            && this._parent.Precondition.Remove(constraintItem)))
                {
                    return true;
                }
                if (((constraintItem != null) 
                            && this._parent.Postcondition.Remove(constraintItem)))
                {
                    return true;
                }
                if (((constraintItem != null) 
                            && this._parent.BodyCondition.Remove(constraintItem)))
                {
                    return true;
                }
                if ((this._parent.Class == item))
                {
                    this._parent.Class = null;
                    return true;
                }
                if ((this._parent.Datatype == item))
                {
                    this._parent.Datatype = null;
                    return true;
                }
                if ((this._parent.Type == item))
                {
                    this._parent.Type = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RedefinedOperation).Concat(this._parent.Precondition).Concat(this._parent.Postcondition).Concat(this._parent.BodyCondition).Concat(this._parent.Class).Concat(this._parent.Datatype).Concat(this._parent.Type).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isQuery property
        /// </summary>
        private sealed class IsQueryProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IOperation, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsQueryProxy(NMF.Interop.Legacy.Cmof.IOperation modelElement) : 
                    base(modelElement, "isQuery")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsQuery;
                }
                set
                {
                    this.ModelElement.IsQuery = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the class property
        /// </summary>
        private sealed class ClassProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IOperation, NMF.Interop.Legacy.Cmof.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassProxy(NMF.Interop.Legacy.Cmof.IOperation modelElement) : 
                    base(modelElement, "class")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Legacy.Cmof.IClass Value
            {
                get
                {
                    return this.ModelElement.Class;
                }
                set
                {
                    this.ModelElement.Class = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the datatype property
        /// </summary>
        private sealed class DatatypeProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IOperation, NMF.Interop.Legacy.Cmof.IDataType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DatatypeProxy(NMF.Interop.Legacy.Cmof.IOperation modelElement) : 
                    base(modelElement, "datatype")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Legacy.Cmof.IDataType Value
            {
                get
                {
                    return this.ModelElement.Datatype;
                }
                set
                {
                    this.ModelElement.Datatype = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isOrdered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isUnique")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lower property
        /// </summary>
        private sealed class LowerProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "lower")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Lower;
                }
                set
                {
                    this.ModelElement.Lower = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upper property
        /// </summary>
        private sealed class UpperProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "upper")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Upper;
                }
                set
                {
                    this.ModelElement.Upper = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.ITypedElement, NMF.Interop.Legacy.Cmof.IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(NMF.Interop.Legacy.Cmof.ITypedElement modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Legacy.Cmof.IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
    }
}

