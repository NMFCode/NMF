//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NMF.Interop.Legacy.Cmof
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    using System.Globalization;
    
    
    /// <summary>
    /// An operation is owned by a class and may be invoked in the context of objects that are instances of that class. It is a typed element and a multiplicity element.
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Operation")]
    [DebuggerDisplayAttribute("Operation {Name}")]
    public partial class Operation : Feature, NMF.Interop.Legacy.Cmof.IOperation, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _only_body_for_queryOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveOnly_body_for_queryOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _at_most_one_returnOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAt_most_one_returnOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getTypeOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetTypeOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _returnResultOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveReturnResultOperation);
        
        /// <summary>
        /// The backing field for the IsQuery property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isQuery = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isQueryAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsQueryAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _redefinedOperationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRedefinedOperationReference);
        
        /// <summary>
        /// The backing field for the RedefinedOperation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<NMF.Interop.Legacy.Cmof.IOperation> _redefinedOperation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _preconditionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePreconditionReference);
        
        /// <summary>
        /// The backing field for the Precondition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionSet<IConstraint> _precondition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _postconditionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePostconditionReference);
        
        /// <summary>
        /// The backing field for the Postcondition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionSet<IConstraint> _postcondition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _bodyConditionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveBodyConditionReference);
        
        /// <summary>
        /// The backing field for the BodyCondition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionSet<IConstraint> _bodyCondition;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _classReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveClassReference);
        
        /// <summary>
        /// The backing field for the Class property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Legacy.Cmof.IClass _class;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _datatypeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDatatypeReference);
        
        /// <summary>
        /// The backing field for the Datatype property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Legacy.Cmof.IDataType _datatype;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _ownedParameterReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOwnedParameterReference);
        
        /// <summary>
        /// The backing field for the OwnedParameter property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<NMF.Interop.Legacy.Cmof.IParameter> _ownedParameter;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _raisedExceptionReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveRaisedExceptionReference);
        
        /// <summary>
        /// The backing field for the RaisedException property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationSet<NMF.Interop.Legacy.Cmof.IType> _raisedException;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _members_are_distinguishableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMembers_are_distinguishableOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getImportedMembersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetImportedMembersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _getNamesOfMemberOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveGetNamesOfMemberOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _importMembersOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveImportMembersOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _excludeCollisionsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveExcludeCollisionsOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _membersAreDistinguishableOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveMembersAreDistinguishableOperation);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _elementImportReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveElementImportReference);
        
        /// <summary>
        /// The backing field for the ElementImport property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NamespaceElementImportCollection _elementImport;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _packageImportReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrievePackageImportReference);
        
        /// <summary>
        /// The backing field for the PackageImport property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NamespacePackageImportCollection _packageImport;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upper_gt_0Operation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpper_gt_0Operation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lower_ge_0Operation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLower_ge_0Operation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upper_ge_lowerOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpper_ge_lowerOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _lowerBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveLowerBoundOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _upperBoundOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveUpperBoundOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isMultivaluedOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsMultivaluedOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _includesCardinalityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncludesCardinalityOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _includesMultiplicityOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIncludesMultiplicityOperation);
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isOrdered = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isOrderedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsOrderedAttribute);
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isUnique = true;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isUniqueAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsUniqueAttribute);
        
        /// <summary>
        /// The backing field for the Lower property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _lower = 1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _lowerAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveLowerAttribute);
        
        /// <summary>
        /// The backing field for the Upper property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<int> _upper = 1;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _upperAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveUpperAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _typeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTypeReference);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Legacy.Cmof.IType _type;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Operation()
        {
            this._redefinedOperation = new ObservableAssociationSet<NMF.Interop.Legacy.Cmof.IOperation>();
            this._redefinedOperation.CollectionChanging += this.RedefinedOperationCollectionChanging;
            this._redefinedOperation.CollectionChanged += this.RedefinedOperationCollectionChanged;
            this._precondition = new ObservableCompositionSet<IConstraint>(this);
            this._precondition.CollectionChanging += this.PreconditionCollectionChanging;
            this._precondition.CollectionChanged += this.PreconditionCollectionChanged;
            this._postcondition = new ObservableCompositionSet<IConstraint>(this);
            this._postcondition.CollectionChanging += this.PostconditionCollectionChanging;
            this._postcondition.CollectionChanged += this.PostconditionCollectionChanged;
            this._bodyCondition = new ObservableCompositionSet<IConstraint>(this);
            this._bodyCondition.CollectionChanging += this.BodyConditionCollectionChanging;
            this._bodyCondition.CollectionChanged += this.BodyConditionCollectionChanged;
            this._ownedParameter = new ObservableCompositionOrderedSet<NMF.Interop.Legacy.Cmof.IParameter>(this);
            this._ownedParameter.CollectionChanging += this.OwnedParameterCollectionChanging;
            this._ownedParameter.CollectionChanged += this.OwnedParameterCollectionChanged;
            this._raisedException = new ObservableAssociationSet<NMF.Interop.Legacy.Cmof.IType>();
            this._raisedException.CollectionChanging += this.RaisedExceptionCollectionChanging;
            this._raisedException.CollectionChanged += this.RaisedExceptionCollectionChanged;
            this._elementImport = new NamespaceElementImportCollection(this);
            this._elementImport.CollectionChanging += this.ElementImportCollectionChanging;
            this._elementImport.CollectionChanged += this.ElementImportCollectionChanged;
            this._packageImport = new NamespacePackageImportCollection(this);
            this._packageImport.CollectionChanging += this.PackageImportCollectionChanging;
            this._packageImport.CollectionChanged += this.PackageImportCollectionChanged;
        }
        
        /// <summary>
        /// Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false). The default value is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isQuery")]
        [DescriptionAttribute("Specifies whether an execution of the BehavioralFeature leaves the state of the s" +
            "ystem unchanged (isQuery=true) or whether side effects may occur (isQuery=false)" +
            ". The default value is false.")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("isQuery")]
        [XmlAttributeAttribute(true)]
        public bool IsQuery
        {
            get
            {
                return this._isQuery;
            }
            set
            {
                if ((this._isQuery != value))
                {
                    bool old = this._isQuery;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsQuery", e, _isQueryAttribute);
                    this._isQuery = value;
                    this.OnPropertyChanged("IsQuery", e, _isQueryAttribute);
                }
            }
        }
        
        /// <summary>
        /// References the Operations that are redefined by this Operation. Subsets RedefinableElement.redefinedElement.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("redefinedOperation")]
        [DescriptionAttribute("References the Operations that are redefined by this Operation. Subsets Redefinab" +
            "leElement.redefinedElement.")]
        [CategoryAttribute("Operation")]
        [XmlElementNameAttribute("redefinedOperation")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<NMF.Interop.Legacy.Cmof.IOperation> RedefinedOperation
        {
            get
            {
                return this._redefinedOperation;
            }
        }
        
        /// <summary>
        /// The precondition property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("precondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ISetExpression<IConstraint> Precondition
        {
            get
            {
                return this._precondition;
            }
        }
        
        /// <summary>
        /// The postcondition property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("postcondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ISetExpression<IConstraint> Postcondition
        {
            get
            {
                return this._postcondition;
            }
        }
        
        /// <summary>
        /// The bodyCondition property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("bodyCondition")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ISetExpression<IConstraint> BodyCondition
        {
            get
            {
                return this._bodyCondition;
            }
        }
        
        /// <summary>
        /// The class that owns the operation. Subsets RedefinableElement::redefinitionContext and NamedElement::namespace and Feature::featuringClassifier.
        ///The class that owns the operation.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("class")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedOperation")]
        public NMF.Interop.Legacy.Cmof.IClass Class
        {
            get
            {
                return this._class;
            }
            set
            {
                if ((this._class != value))
                {
                    NMF.Interop.Legacy.Cmof.IClass old = this._class;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Class", e, _classReference);
                    this._class = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OwnedOperation.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.OwnedOperation.Add(this);
                    }
                    this.OnPropertyChanged("Class", e, _classReference);
                }
            }
        }
        
        /// <summary>
        /// The DataType that owns this Operation. Subsets NamedElement::namespace, Feature::featuringClassifier, and RedefinableElement::redefinitionContext.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("datatype")]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("ownedOperation")]
        public NMF.Interop.Legacy.Cmof.IDataType Datatype
        {
            get
            {
                return this._datatype;
            }
            set
            {
                if ((this._datatype != value))
                {
                    NMF.Interop.Legacy.Cmof.IDataType old = this._datatype;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Datatype", e, _datatypeReference);
                    this._datatype = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OwnedOperation.Remove(this);
                    }
                    if ((value != null))
                    {
                        value.OwnedOperation.Add(this);
                    }
                    this.OnPropertyChanged("Datatype", e, _datatypeReference);
                }
            }
        }

        ICollectionExpression<IConstraint> NMF.Interop.Legacy.Cmof.INamespace.OwnedRule
        {
            get
            {
                return new OperationOwnedRuleCollection(this);
            }
        }
        
        /// <summary>
        /// Specifies the ordered set of formal parameters of this BehavioralFeature.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedParameter")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Interop.Legacy.Cmof.IParameter> OwnedParameter
        {
            get
            {
                return this._ownedParameter;
            }
        }
        
        /// <summary>
        /// References the Types representing exceptions that may be raised during an invocation of this feature.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("raisedException")]
        [DescriptionAttribute("References the Types representing exceptions that may be raised during an invocat" +
            "ion of this feature.")]
        [CategoryAttribute("BehavioralFeature")]
        [XmlElementNameAttribute("raisedException")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ISetExpression<NMF.Interop.Legacy.Cmof.IType> RaisedException
        {
            get
            {
                return this._raisedException;
            }
        }
        
        /// <summary>
        /// References the ElementImports owned by the Namespace. Subsets Element::ownedElement.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("elementImport")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("importingNamespace")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IElementImport> ElementImport
        {
            get
            {
                return this._elementImport;
            }
        }
        
        /// <summary>
        /// References the PackageImports owned by the Namespace. Subsets Element::ownedElement.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("packageImport")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("importingNamespace")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IPackageImport> PackageImport
        {
            get
            {
                return this._packageImport;
            }
        }
        
        /// <summary>
        /// For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered. Default is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isOrdered")]
        [DescriptionAttribute("For a multivalued multiplicity, this attribute specifies whether the values in an" +
            " instantiation of this element are sequentially ordered. Default is false.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isOrdered")]
        [XmlAttributeAttribute(true)]
        public bool IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    bool old = this._isOrdered;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsOrdered", e, _isOrderedAttribute);
                    this._isOrdered = value;
                    this.OnPropertyChanged("IsOrdered", e, _isOrderedAttribute);
                }
            }
        }
        
        /// <summary>
        /// For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique. Default is true.
        /// </summary>
        [DefaultValueAttribute(true)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isUnique")]
        [DescriptionAttribute("For a multivalued multiplicity, this attributes specifies whether the values in a" +
            "n instantiation of this element are unique. Default is true.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("isUnique")]
        [XmlAttributeAttribute(true)]
        public bool IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((this._isUnique != value))
                {
                    bool old = this._isUnique;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsUnique", e, _isUniqueAttribute);
                    this._isUnique = value;
                    this.OnPropertyChanged("IsUnique", e, _isUniqueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the lower bound of the multiplicity interval. Default is one.
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("lower")]
        [DescriptionAttribute("Specifies the lower bound of the multiplicity interval. Default is one.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("lower")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Lower
        {
            get
            {
                return this._lower;
            }
            set
            {
                if ((this._lower != value))
                {
                    Nullable<int> old = this._lower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Lower", e, _lowerAttribute);
                    this._lower = value;
                    this.OnPropertyChanged("Lower", e, _lowerAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies the upper bound of the multiplicity interval. Default is one.
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("upper")]
        [DescriptionAttribute("Specifies the upper bound of the multiplicity interval. Default is one.")]
        [CategoryAttribute("MultiplicityElement")]
        [XmlElementNameAttribute("upper")]
        [XmlAttributeAttribute(true)]
        public Nullable<int> Upper
        {
            get
            {
                return this._upper;
            }
            set
            {
                if ((this._upper != value))
                {
                    Nullable<int> old = this._upper;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Upper", e, _upperAttribute);
                    this._upper = value;
                    this.OnPropertyChanged("Upper", e, _upperAttribute);
                }
            }
        }
        
        /// <summary>
        /// Redefines the corresponding property from Basic to derive this information from the return result for this Operation.
        ///The type of the TypedElement.
        /// </summary>
        [DisplayNameAttribute("type")]
        [DescriptionAttribute("Redefines the corresponding property from Basic to derive this information from t" +
            "he return result for this Operation.\r\nThe type of the TypedElement.")]
        [CategoryAttribute("TypedElement")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public NMF.Interop.Legacy.Cmof.IType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    NMF.Interop.Legacy.Cmof.IType old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Type", e, _typeReference);
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnPropertyChanged("Type", e, _typeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new OperationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OperationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Operation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// A bodyCondition can only be specified for a query operation.
        ///bodyCondition->notEmpty() implies isQuery
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Only_body_for_query(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Legacy.Cmof.IOperation, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IOperation, object, object, bool>>(_only_body_for_queryOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method only_body_for_query registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _only_body_for_queryOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _only_body_for_queryOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _only_body_for_queryOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveOnly_body_for_queryOperation()
        {
            return ClassInstance.LookupOperation("only_body_for_query");
        }
        
        /// <summary>
        /// An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'
        ///self.ownedParameter->select(par | par.direction = #return)->size() <= 1
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool At_most_one_return(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Legacy.Cmof.IOperation, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IOperation, object, object, bool>>(_at_most_one_returnOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method at_most_one_return registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _at_most_one_returnOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _at_most_one_returnOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _at_most_one_returnOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAt_most_one_returnOperation()
        {
            return ClassInstance.LookupOperation("at_most_one_return");
        }
        
        /// <summary>
        /// If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.
        ///result = if returnResult->size() = 1 then returnResult->any().type else Set{} endif
        /// </summary>
        public NMF.Interop.Legacy.Cmof.IType GetType()
        {
            System.Func<NMF.Interop.Legacy.Cmof.IOperation, NMF.Interop.Legacy.Cmof.IType> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IOperation, NMF.Interop.Legacy.Cmof.IType>>(_getTypeOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getType registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getTypeOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getTypeOperation.Value, e));
            NMF.Interop.Legacy.Cmof.IType result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getTypeOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetTypeOperation()
        {
            return ClassInstance.LookupOperation("getType");
        }
        
        /// <summary>
        /// result = ownedParameter->select (par | par.direction = #return)
        /// </summary>
        public ISetExpression<NMF.Interop.Legacy.Cmof.IParameter> ReturnResult()
        {
            System.Func<NMF.Interop.Legacy.Cmof.IOperation, ISetExpression<NMF.Interop.Legacy.Cmof.IParameter>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.IOperation, ISetExpression<NMF.Interop.Legacy.Cmof.IParameter>>>(_returnResultOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method returnResult registered. Use the method bro" +
                        "ker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _returnResultOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _returnResultOperation.Value, e));
            ISetExpression<NMF.Interop.Legacy.Cmof.IParameter> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _returnResultOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveReturnResultOperation()
        {
            return ClassInstance.LookupOperation("returnResult");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsQueryAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("isQuery")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRedefinedOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("redefinedOperation")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RedefinedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedOperationCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RedefinedOperation", e, _redefinedOperationReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RedefinedOperation property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedefinedOperationCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RedefinedOperation", e, _redefinedOperationReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePreconditionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("precondition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Precondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PreconditionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Precondition", e, _preconditionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Precondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PreconditionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Precondition", e, _preconditionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePostconditionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("postcondition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Postcondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PostconditionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Postcondition", e, _postconditionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Postcondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PostconditionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Postcondition", e, _postconditionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveBodyConditionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("bodyCondition")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BodyCondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BodyConditionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BodyCondition", e, _bodyConditionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BodyCondition property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BodyConditionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BodyCondition", e, _bodyConditionReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveClassReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("class")));
        }
        
        /// <summary>
        /// Handles the event that the Class property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClass(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Class))
            {
                this.Class = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDatatypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Operation.ClassInstance)).Resolve("datatype")));
        }
        
        /// <summary>
        /// Handles the event that the Datatype property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDatatype(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Datatype))
            {
                this.Datatype = null;
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOwnedParameterReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.BehavioralFeature.ClassInstance)).Resolve("ownedParameter")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OwnedParameter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OwnedParameter", e, _ownedParameterReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OwnedParameter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OwnedParameterCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OwnedParameter", e, _ownedParameterReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveRaisedExceptionReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.BehavioralFeature.ClassInstance)).Resolve("raisedException")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RaisedException property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RaisedExceptionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RaisedException", e, _raisedExceptionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RaisedException property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RaisedExceptionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RaisedException", e, _raisedExceptionReference);
        }
        
        /// <summary>
        /// All the members of a Namespace are distinguishable within it.
        ///membersAreDistinguishable()
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Members_are_distinguishable(object diagnostics, object context)
        {
            System.Func<NMF.Interop.Legacy.Cmof.INamespace, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.INamespace, object, object, bool>>(_members_are_distinguishableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method members_are_distinguishable registered. Use" +
                        " the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _members_are_distinguishableOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _members_are_distinguishableOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _members_are_distinguishableOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMembers_are_distinguishableOperation()
        {
            return ClassInstance.LookupOperation("members_are_distinguishable");
        }
        
        /// <summary>
        /// The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.
        ///result = self.importMembers(self.elementImport.importedElement.asSet()->union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))
        /// </summary>
        public ISetExpression<IPackageableElement> GetImportedMembers()
        {
            System.Func<NMF.Interop.Legacy.Cmof.INamespace, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.INamespace, ISetExpression<IPackageableElement>>>(_getImportedMembersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getImportedMembers registered. Use the meth" +
                        "od broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getImportedMembersOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getImportedMembersOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getImportedMembersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetImportedMembersOperation()
        {
            return ClassInstance.LookupOperation("getImportedMembers");
        }
        
        /// <summary>
        /// The query getNamesOfMember() is overridden to take account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.
        ///result = if self.ownedMember->includes(element)
        ///then Set{}->include(element.name)
        ///else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in
        ///  if elementImports->notEmpty()
        ///  then elementImports->collect(el | el.getName())
        ///  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))->collect(pi | pi.importedPackage.getNamesOfMember(element))
        ///  endif
        ///endif
        /// </summary>
        /// <param name="element"></param>
        public ISetExpression<string> GetNamesOfMember(INamedElement element)
        {
            System.Func<NMF.Interop.Legacy.Cmof.INamespace, INamedElement, ISetExpression<string>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.INamespace, INamedElement, ISetExpression<string>>>(_getNamesOfMemberOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method getNamesOfMember registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _getNamesOfMemberOperation.Value, element);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _getNamesOfMemberOperation.Value, e));
            ISetExpression<string> result = handler.Invoke(this, element);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _getNamesOfMemberOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveGetNamesOfMemberOperation()
        {
            return ClassInstance.LookupOperation("getNamesOfMember");
        }
        
        /// <summary>
        /// The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.
        ///result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem | mem.imp.isDistinguishableFrom(mem, self)))
        /// </summary>
        /// <param name="imps"></param>
        public ISetExpression<IPackageableElement> ImportMembers(IEnumerable<IPackageableElement> imps)
        {
            System.Func<NMF.Interop.Legacy.Cmof.INamespace, IEnumerable<IPackageableElement>, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.INamespace, IEnumerable<IPackageableElement>, ISetExpression<IPackageableElement>>>(_importMembersOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method importMembers registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _importMembersOperation.Value, imps);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _importMembersOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this, imps);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _importMembersOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveImportMembersOperation()
        {
            return ClassInstance.LookupOperation("importMembers");
        }
        
        /// <summary>
        /// The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.
        ///result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))
        /// </summary>
        /// <param name="imps"></param>
        public ISetExpression<IPackageableElement> ExcludeCollisions(IEnumerable<IPackageableElement> imps)
        {
            System.Func<NMF.Interop.Legacy.Cmof.INamespace, IEnumerable<IPackageableElement>, ISetExpression<IPackageableElement>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.INamespace, IEnumerable<IPackageableElement>, ISetExpression<IPackageableElement>>>(_excludeCollisionsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method excludeCollisions registered. Use the metho" +
                        "d broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _excludeCollisionsOperation.Value, imps);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _excludeCollisionsOperation.Value, e));
            ISetExpression<IPackageableElement> result = handler.Invoke(this, imps);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _excludeCollisionsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveExcludeCollisionsOperation()
        {
            return ClassInstance.LookupOperation("excludeCollisions");
        }
        
        /// <summary>
        /// The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.
        ///result = self.member->forAll( memb |
        ///	self.member->excluding(memb)->forAll(other |
        ///		memb.isDistinguishableFrom(other, self)))
        /// </summary>
        public bool MembersAreDistinguishable()
        {
            System.Func<NMF.Interop.Legacy.Cmof.INamespace, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<NMF.Interop.Legacy.Cmof.INamespace, bool>>(_membersAreDistinguishableOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method membersAreDistinguishable registered. Use t" +
                        "he method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _membersAreDistinguishableOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _membersAreDistinguishableOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _membersAreDistinguishableOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveMembersAreDistinguishableOperation()
        {
            return ClassInstance.LookupOperation("membersAreDistinguishable");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveElementImportReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Namespace.ClassInstance)).Resolve("elementImport")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ElementImport property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElementImportCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ElementImport", e, _elementImportReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ElementImport property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElementImportCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ElementImport", e, _elementImportReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrievePackageImportReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Namespace.ClassInstance)).Resolve("packageImport")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PackageImport property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PackageImportCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PackageImport", e, _packageImportReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PackageImport property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PackageImportCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PackageImport", e, _packageImportReference);
        }
        
        /// <summary>
        /// A multiplicity must define at least one valid cardinality that is greater than zero.
        ///upperBound()->notEmpty() implies upperBound() > 0
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Upper_gt_0(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_upper_gt_0Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upper_gt_0 registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upper_gt_0Operation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upper_gt_0Operation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upper_gt_0Operation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpper_gt_0Operation()
        {
            return ClassInstance.LookupOperation("upper_gt_0");
        }
        
        /// <summary>
        /// The lower bound must be a non-negative integer literal.
        ///lowerBound()->notEmpty() implies lowerBound() >= 0
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Lower_ge_0(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_lower_ge_0Operation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lower_ge_0 registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lower_ge_0Operation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lower_ge_0Operation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lower_ge_0Operation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLower_ge_0Operation()
        {
            return ClassInstance.LookupOperation("lower_ge_0");
        }
        
        /// <summary>
        /// The upper bound must be greater than or equal to the lower bound.
        ///(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Upper_ge_lower(object diagnostics, object context)
        {
            System.Func<IMultiplicityElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, object, object, bool>>(_upper_ge_lowerOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upper_ge_lower registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upper_ge_lowerOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upper_ge_lowerOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upper_ge_lowerOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpper_ge_lowerOperation()
        {
            return ClassInstance.LookupOperation("upper_ge_lower");
        }
        
        /// <summary>
        /// The query lowerBound() returns the lower bound of the multiplicity as an integer.
        ///result = if lower->notEmpty() then lower else 1 endif
        /// </summary>
        public int LowerBound()
        {
            System.Func<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int>>(_lowerBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method lowerBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _lowerBoundOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _lowerBoundOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _lowerBoundOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveLowerBoundOperation()
        {
            return ClassInstance.LookupOperation("lowerBound");
        }
        
        /// <summary>
        /// The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.
        ///result = if upper->notEmpty() then upper else 1 endif
        /// </summary>
        public int UpperBound()
        {
            System.Func<IMultiplicityElement, int> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int>>(_upperBoundOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method upperBound registered. Use the method broke" +
                        "r to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _upperBoundOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _upperBoundOperation.Value, e));
            int result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _upperBoundOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveUpperBoundOperation()
        {
            return ClassInstance.LookupOperation("upperBound");
        }
        
        /// <summary>
        /// The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
        ///upperBound()->notEmpty()
        ///result = upperBound() > 1
        /// </summary>
        public bool IsMultivalued()
        {
            System.Func<IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, bool>>(_isMultivaluedOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isMultivalued registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isMultivaluedOperation.Value);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isMultivaluedOperation.Value, e));
            bool result = handler.Invoke(this);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isMultivaluedOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsMultivaluedOperation()
        {
            return ClassInstance.LookupOperation("isMultivalued");
        }
        
        /// <summary>
        /// The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.
        ///upperBound()->notEmpty() and lowerBound()->notEmpty()
        ///result = (lowerBound() <= C) and (upperBound() >= C)
        /// </summary>
        /// <param name="c"></param>
        public bool IncludesCardinality(int c)
        {
            System.Func<IMultiplicityElement, int, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, int, bool>>(_includesCardinalityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method includesCardinality registered. Use the met" +
                        "hod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _includesCardinalityOperation.Value, c);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _includesCardinalityOperation.Value, e));
            bool result = handler.Invoke(this, c);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _includesCardinalityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncludesCardinalityOperation()
        {
            return ClassInstance.LookupOperation("includesCardinality");
        }
        
        /// <summary>
        /// The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.
        ///self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()
        ///result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
        /// </summary>
        /// <param name="m"></param>
        public bool IncludesMultiplicity(IMultiplicityElement m)
        {
            System.Func<IMultiplicityElement, IMultiplicityElement, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IMultiplicityElement, IMultiplicityElement, bool>>(_includesMultiplicityOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method includesMultiplicity registered. Use the me" +
                        "thod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _includesMultiplicityOperation.Value, m);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _includesMultiplicityOperation.Value, e));
            bool result = handler.Invoke(this, m);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _includesMultiplicityOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIncludesMultiplicityOperation()
        {
            return ClassInstance.LookupOperation("includesMultiplicity");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsOrderedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("isOrdered")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsUniqueAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("isUnique")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveLowerAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("lower")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveUpperAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.MultiplicityElement.ClassInstance)).Resolve("upper")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.TypedElement.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.Type))
            {
                this.Type = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int ownedParameterIndex = ModelHelper.IndexOfReference(this.OwnedParameter, element);
            if ((ownedParameterIndex != -1))
            {
                return ModelHelper.CreatePath("ownedParameter", ownedParameterIndex);
            }
            int elementImportIndex = ModelHelper.IndexOfReference(this.ElementImport, element);
            if ((elementImportIndex != -1))
            {
                return ModelHelper.CreatePath("elementImport", elementImportIndex);
            }
            int packageImportIndex = ModelHelper.IndexOfReference(this.PackageImport, element);
            if ((packageImportIndex != -1))
            {
                return ModelHelper.CreatePath("packageImport", packageImportIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CLASS"))
            {
                return this.Class;
            }
            if ((reference == "DATATYPE"))
            {
                return this.Datatype;
            }
            if ((reference == "OWNEDPARAMETER"))
            {
                if ((index < this.OwnedParameter.Count))
                {
                    return this.OwnedParameter[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "ELEMENTIMPORT"))
            {
                if ((index < this.ElementImport.Count))
                {
                    return this.ElementImport[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "PACKAGEIMPORT"))
            {
                if ((index < this.PackageImport.Count))
                {
                    return this.PackageImport[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "TYPE"))
            {
                return this.Type;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISQUERY"))
            {
                return this.IsQuery;
            }
            if ((attribute == "ISORDERED"))
            {
                return this.IsOrdered;
            }
            if ((attribute == "ISUNIQUE"))
            {
                return this.IsUnique;
            }
            if ((attribute == "LOWER"))
            {
                return this.Lower;
            }
            if ((attribute == "UPPER"))
            {
                return this.Upper;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REDEFINEDOPERATION"))
            {
                return this._redefinedOperation;
            }
            if ((feature == "PRECONDITION"))
            {
                return this._precondition;
            }
            if ((feature == "POSTCONDITION"))
            {
                return this._postcondition;
            }
            if ((feature == "BODYCONDITION"))
            {
                return this._bodyCondition;
            }
            if ((feature == "OWNEDPARAMETER"))
            {
                return this._ownedParameter;
            }
            if ((feature == "RAISEDEXCEPTION"))
            {
                return this._raisedException;
            }
            if ((feature == "ELEMENTIMPORT"))
            {
                return this._elementImport;
            }
            if ((feature == "PACKAGEIMPORT"))
            {
                return this._packageImport;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CLASS"))
            {
                this.Class = ((NMF.Interop.Legacy.Cmof.IClass)(value));
                return;
            }
            if ((feature == "DATATYPE"))
            {
                this.Datatype = ((NMF.Interop.Legacy.Cmof.IDataType)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((NMF.Interop.Legacy.Cmof.IType)(value));
                return;
            }
            if ((feature == "ISQUERY"))
            {
                this.IsQuery = ((bool)(value));
                return;
            }
            if ((feature == "ISORDERED"))
            {
                this.IsOrdered = ((bool)(value));
                return;
            }
            if ((feature == "ISUNIQUE"))
            {
                this.IsUnique = ((bool)(value));
                return;
            }
            if ((feature == "LOWER"))
            {
                this.Lower = ((int)(value));
                return;
            }
            if ((feature == "UPPER"))
            {
                this.Upper = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISQUERY"))
            {
                return Observable.Box(new IsQueryProxy(this));
            }
            if ((attribute == "ISORDERED"))
            {
                return Observable.Box(new IsOrderedProxy(this));
            }
            if ((attribute == "ISUNIQUE"))
            {
                return Observable.Box(new IsUniqueProxy(this));
            }
            if ((attribute == "LOWER"))
            {
                return Observable.Box(new LowerProxy(this));
            }
            if ((attribute == "UPPER"))
            {
                return Observable.Box(new UpperProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CLASS"))
            {
                return new ClassProxy(this);
            }
            if ((reference == "DATATYPE"))
            {
                return new DatatypeProxy(this);
            }
            if ((reference == "TYPE"))
            {
                return new TypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._precondition))
            {
                return "precondition";
            }
            if ((container == this._postcondition))
            {
                return "postcondition";
            }
            if ((container == this._bodyCondition))
            {
                return "bodyCondition";
            }
            if ((container == this._ownedParameter))
            {
                return "ownedParameter";
            }
            if ((container == this._elementImport))
            {
                return "elementImport";
            }
            if ((container == this._packageImport))
            {
                return "packageImport";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Operation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Operation class
        /// </summary>
        public class OperationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Operation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperationChildrenCollection(Operation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Precondition.Count);
                    count = (count + this._parent.Postcondition.Count);
                    count = (count + this._parent.BodyCondition.Count);
                    count = (count + this._parent.OwnedParameter.Count);
                    count = (count + this._parent.ElementImport.Count);
                    count = (count + this._parent.PackageImport.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Precondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Postcondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BodyCondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ElementImport.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PackageImport.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Precondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Postcondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BodyCondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ElementImport.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PackageImport.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IConstraint preconditionCasted = item.As<IConstraint>();
                if ((preconditionCasted != null))
                {
                    this._parent.Precondition.Add(preconditionCasted);
                }
                IConstraint postconditionCasted = item.As<IConstraint>();
                if ((postconditionCasted != null))
                {
                    this._parent.Postcondition.Add(postconditionCasted);
                }
                IConstraint bodyConditionCasted = item.As<IConstraint>();
                if ((bodyConditionCasted != null))
                {
                    this._parent.BodyCondition.Add(bodyConditionCasted);
                }
                NMF.Interop.Legacy.Cmof.IParameter ownedParameterCasted = item.As<NMF.Interop.Legacy.Cmof.IParameter>();
                if ((ownedParameterCasted != null))
                {
                    this._parent.OwnedParameter.Add(ownedParameterCasted);
                }
                IElementImport elementImportCasted = item.As<IElementImport>();
                if ((elementImportCasted != null))
                {
                    this._parent.ElementImport.Add(elementImportCasted);
                }
                IPackageImport packageImportCasted = item.As<IPackageImport>();
                if ((packageImportCasted != null))
                {
                    this._parent.PackageImport.Add(packageImportCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Precondition.Clear();
                this._parent.Postcondition.Clear();
                this._parent.BodyCondition.Clear();
                this._parent.OwnedParameter.Clear();
                this._parent.ElementImport.Clear();
                this._parent.PackageImport.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Precondition.Contains(item))
                {
                    return true;
                }
                if (this._parent.Postcondition.Contains(item))
                {
                    return true;
                }
                if (this._parent.BodyCondition.Contains(item))
                {
                    return true;
                }
                if (this._parent.OwnedParameter.Contains(item))
                {
                    return true;
                }
                if (this._parent.ElementImport.Contains(item))
                {
                    return true;
                }
                if (this._parent.PackageImport.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> preconditionEnumerator = this._parent.Precondition.GetEnumerator();
                try
                {
                    for (
                    ; preconditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = preconditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    preconditionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> postconditionEnumerator = this._parent.Postcondition.GetEnumerator();
                try
                {
                    for (
                    ; postconditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = postconditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    postconditionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bodyConditionEnumerator = this._parent.BodyCondition.GetEnumerator();
                try
                {
                    for (
                    ; bodyConditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bodyConditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bodyConditionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ownedParameterEnumerator = this._parent.OwnedParameter.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterEnumerator.Dispose();
                }
                IEnumerator<IModelElement> elementImportEnumerator = this._parent.ElementImport.GetEnumerator();
                try
                {
                    for (
                    ; elementImportEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elementImportEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elementImportEnumerator.Dispose();
                }
                IEnumerator<IModelElement> packageImportEnumerator = this._parent.PackageImport.GetEnumerator();
                try
                {
                    for (
                    ; packageImportEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = packageImportEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    packageImportEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IConstraint constraintItem = item.As<IConstraint>();
                if (((constraintItem != null) 
                            && this._parent.Precondition.Remove(constraintItem)))
                {
                    return true;
                }
                if (((constraintItem != null) 
                            && this._parent.Postcondition.Remove(constraintItem)))
                {
                    return true;
                }
                if (((constraintItem != null) 
                            && this._parent.BodyCondition.Remove(constraintItem)))
                {
                    return true;
                }
                NMF.Interop.Legacy.Cmof.IParameter parameterItem = item.As<NMF.Interop.Legacy.Cmof.IParameter>();
                if (((parameterItem != null) 
                            && this._parent.OwnedParameter.Remove(parameterItem)))
                {
                    return true;
                }
                IElementImport elementImportItem = item.As<IElementImport>();
                if (((elementImportItem != null) 
                            && this._parent.ElementImport.Remove(elementImportItem)))
                {
                    return true;
                }
                IPackageImport packageImportItem = item.As<IPackageImport>();
                if (((packageImportItem != null) 
                            && this._parent.PackageImport.Remove(packageImportItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Precondition).Concat(this._parent.Postcondition).Concat(this._parent.BodyCondition).Concat(this._parent.OwnedParameter).Concat(this._parent.ElementImport).Concat(this._parent.PackageImport).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Operation class
        /// </summary>
        public class OperationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Operation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperationReferencedElementsCollection(Operation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.RedefinedOperation.Count);
                    count = (count + this._parent.Precondition.Count);
                    count = (count + this._parent.Postcondition.Count);
                    count = (count + this._parent.BodyCondition.Count);
                    if ((this._parent.Class != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Datatype != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.OwnedParameter.Count);
                    count = (count + this._parent.RaisedException.Count);
                    count = (count + this._parent.ElementImport.Count);
                    count = (count + this._parent.PackageImport.Count);
                    if ((this._parent.Type != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.RedefinedOperation.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Precondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Postcondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BodyCondition.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RaisedException.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ElementImport.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PackageImport.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.RedefinedOperation.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Precondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Postcondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BodyCondition.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
                this._parent.OwnedParameter.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RaisedException.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ElementImport.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PackageImport.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                NMF.Interop.Legacy.Cmof.IOperation redefinedOperationCasted = item.As<NMF.Interop.Legacy.Cmof.IOperation>();
                if ((redefinedOperationCasted != null))
                {
                    this._parent.RedefinedOperation.Add(redefinedOperationCasted);
                }
                IConstraint preconditionCasted = item.As<IConstraint>();
                if ((preconditionCasted != null))
                {
                    this._parent.Precondition.Add(preconditionCasted);
                }
                IConstraint postconditionCasted = item.As<IConstraint>();
                if ((postconditionCasted != null))
                {
                    this._parent.Postcondition.Add(postconditionCasted);
                }
                IConstraint bodyConditionCasted = item.As<IConstraint>();
                if ((bodyConditionCasted != null))
                {
                    this._parent.BodyCondition.Add(bodyConditionCasted);
                }
                if ((this._parent.Class == null))
                {
                    NMF.Interop.Legacy.Cmof.IClass classCasted = item.As<NMF.Interop.Legacy.Cmof.IClass>();
                    if ((classCasted != null))
                    {
                        this._parent.Class = classCasted;
                        return;
                    }
                }
                if ((this._parent.Datatype == null))
                {
                    NMF.Interop.Legacy.Cmof.IDataType datatypeCasted = item.As<NMF.Interop.Legacy.Cmof.IDataType>();
                    if ((datatypeCasted != null))
                    {
                        this._parent.Datatype = datatypeCasted;
                        return;
                    }
                }
                NMF.Interop.Legacy.Cmof.IParameter ownedParameterCasted = item.As<NMF.Interop.Legacy.Cmof.IParameter>();
                if ((ownedParameterCasted != null))
                {
                    this._parent.OwnedParameter.Add(ownedParameterCasted);
                }
                NMF.Interop.Legacy.Cmof.IType raisedExceptionCasted = item.As<NMF.Interop.Legacy.Cmof.IType>();
                if ((raisedExceptionCasted != null))
                {
                    this._parent.RaisedException.Add(raisedExceptionCasted);
                }
                IElementImport elementImportCasted = item.As<IElementImport>();
                if ((elementImportCasted != null))
                {
                    this._parent.ElementImport.Add(elementImportCasted);
                }
                IPackageImport packageImportCasted = item.As<IPackageImport>();
                if ((packageImportCasted != null))
                {
                    this._parent.PackageImport.Add(packageImportCasted);
                }
                if ((this._parent.Type == null))
                {
                    NMF.Interop.Legacy.Cmof.IType typeCasted = item.As<NMF.Interop.Legacy.Cmof.IType>();
                    if ((typeCasted != null))
                    {
                        this._parent.Type = typeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RedefinedOperation.Clear();
                this._parent.Precondition.Clear();
                this._parent.Postcondition.Clear();
                this._parent.BodyCondition.Clear();
                this._parent.Class = null;
                this._parent.Datatype = null;
                this._parent.OwnedParameter.Clear();
                this._parent.RaisedException.Clear();
                this._parent.ElementImport.Clear();
                this._parent.PackageImport.Clear();
                this._parent.Type = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.RedefinedOperation.Contains(item))
                {
                    return true;
                }
                if (this._parent.Precondition.Contains(item))
                {
                    return true;
                }
                if (this._parent.Postcondition.Contains(item))
                {
                    return true;
                }
                if (this._parent.BodyCondition.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Class))
                {
                    return true;
                }
                if ((item == this._parent.Datatype))
                {
                    return true;
                }
                if (this._parent.OwnedParameter.Contains(item))
                {
                    return true;
                }
                if (this._parent.RaisedException.Contains(item))
                {
                    return true;
                }
                if (this._parent.ElementImport.Contains(item))
                {
                    return true;
                }
                if (this._parent.PackageImport.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Type))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> redefinedOperationEnumerator = this._parent.RedefinedOperation.GetEnumerator();
                try
                {
                    for (
                    ; redefinedOperationEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = redefinedOperationEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    redefinedOperationEnumerator.Dispose();
                }
                IEnumerator<IModelElement> preconditionEnumerator = this._parent.Precondition.GetEnumerator();
                try
                {
                    for (
                    ; preconditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = preconditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    preconditionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> postconditionEnumerator = this._parent.Postcondition.GetEnumerator();
                try
                {
                    for (
                    ; postconditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = postconditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    postconditionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bodyConditionEnumerator = this._parent.BodyCondition.GetEnumerator();
                try
                {
                    for (
                    ; bodyConditionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bodyConditionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bodyConditionEnumerator.Dispose();
                }
                if ((this._parent.Class != null))
                {
                    array[arrayIndex] = this._parent.Class;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Datatype != null))
                {
                    array[arrayIndex] = this._parent.Datatype;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> ownedParameterEnumerator = this._parent.OwnedParameter.GetEnumerator();
                try
                {
                    for (
                    ; ownedParameterEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ownedParameterEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ownedParameterEnumerator.Dispose();
                }
                IEnumerator<IModelElement> raisedExceptionEnumerator = this._parent.RaisedException.GetEnumerator();
                try
                {
                    for (
                    ; raisedExceptionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = raisedExceptionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    raisedExceptionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> elementImportEnumerator = this._parent.ElementImport.GetEnumerator();
                try
                {
                    for (
                    ; elementImportEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elementImportEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elementImportEnumerator.Dispose();
                }
                IEnumerator<IModelElement> packageImportEnumerator = this._parent.PackageImport.GetEnumerator();
                try
                {
                    for (
                    ; packageImportEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = packageImportEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    packageImportEnumerator.Dispose();
                }
                if ((this._parent.Type != null))
                {
                    array[arrayIndex] = this._parent.Type;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                NMF.Interop.Legacy.Cmof.IOperation operationItem = item.As<NMF.Interop.Legacy.Cmof.IOperation>();
                if (((operationItem != null) 
                            && this._parent.RedefinedOperation.Remove(operationItem)))
                {
                    return true;
                }
                IConstraint constraintItem = item.As<IConstraint>();
                if (((constraintItem != null) 
                            && this._parent.Precondition.Remove(constraintItem)))
                {
                    return true;
                }
                if (((constraintItem != null) 
                            && this._parent.Postcondition.Remove(constraintItem)))
                {
                    return true;
                }
                if (((constraintItem != null) 
                            && this._parent.BodyCondition.Remove(constraintItem)))
                {
                    return true;
                }
                if ((this._parent.Class == item))
                {
                    this._parent.Class = null;
                    return true;
                }
                if ((this._parent.Datatype == item))
                {
                    this._parent.Datatype = null;
                    return true;
                }
                NMF.Interop.Legacy.Cmof.IParameter parameterItem = item.As<NMF.Interop.Legacy.Cmof.IParameter>();
                if (((parameterItem != null) 
                            && this._parent.OwnedParameter.Remove(parameterItem)))
                {
                    return true;
                }
                NMF.Interop.Legacy.Cmof.IType typeItem = item.As<NMF.Interop.Legacy.Cmof.IType>();
                if (((typeItem != null) 
                            && this._parent.RaisedException.Remove(typeItem)))
                {
                    return true;
                }
                IElementImport elementImportItem = item.As<IElementImport>();
                if (((elementImportItem != null) 
                            && this._parent.ElementImport.Remove(elementImportItem)))
                {
                    return true;
                }
                IPackageImport packageImportItem = item.As<IPackageImport>();
                if (((packageImportItem != null) 
                            && this._parent.PackageImport.Remove(packageImportItem)))
                {
                    return true;
                }
                if ((this._parent.Type == item))
                {
                    this._parent.Type = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RedefinedOperation).Concat(this._parent.Precondition).Concat(this._parent.Postcondition).Concat(this._parent.BodyCondition).Concat(this._parent.Class).Concat(this._parent.Datatype).Concat(this._parent.OwnedParameter).Concat(this._parent.RaisedException).Concat(this._parent.ElementImport).Concat(this._parent.PackageImport).Concat(this._parent.Type).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isQuery property
        /// </summary>
        private sealed class IsQueryProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IOperation, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsQueryProxy(NMF.Interop.Legacy.Cmof.IOperation modelElement) : 
                    base(modelElement, "isQuery")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsQuery;
                }
                set
                {
                    this.ModelElement.IsQuery = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the class property
        /// </summary>
        private sealed class ClassProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IOperation, NMF.Interop.Legacy.Cmof.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassProxy(NMF.Interop.Legacy.Cmof.IOperation modelElement) : 
                    base(modelElement, "class")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Legacy.Cmof.IClass Value
            {
                get
                {
                    return this.ModelElement.Class;
                }
                set
                {
                    this.ModelElement.Class = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the datatype property
        /// </summary>
        private sealed class DatatypeProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IOperation, NMF.Interop.Legacy.Cmof.IDataType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DatatypeProxy(NMF.Interop.Legacy.Cmof.IOperation modelElement) : 
                    base(modelElement, "datatype")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Legacy.Cmof.IDataType Value
            {
                get
                {
                    return this.ModelElement.Datatype;
                }
                set
                {
                    this.ModelElement.Datatype = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isOrdered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<IMultiplicityElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "isUnique")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lower property
        /// </summary>
        private sealed class LowerProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "lower")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Lower;
                }
                set
                {
                    this.ModelElement.Lower = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upper property
        /// </summary>
        private sealed class UpperProxy : ModelPropertyChange<IMultiplicityElement, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperProxy(IMultiplicityElement modelElement) : 
                    base(modelElement, "upper")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Upper;
                }
                set
                {
                    this.ModelElement.Upper = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.ITypedElement, NMF.Interop.Legacy.Cmof.IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(NMF.Interop.Legacy.Cmof.ITypedElement modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Legacy.Cmof.IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
    }
}
