//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;


namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// The collection class to implement the refined ownedMember reference for the Package class
    /// </summary>
    public class PackageOwnedMemberCollection : ICollectionExpression<IPackageableElement>, ICollection<IPackageableElement>, IListExpression<IPackageableElement>, IList<IPackageableElement>
    {
        
        private IPackage _parent;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public PackageOwnedMemberCollection(IPackage parent)
        {
            this._parent = parent;
            parent.NestedPackage.AsNotifiable().CollectionChanged += this.HandleCollectionChange;
            parent.OwnedType.AsNotifiable().CollectionChanged += this.HandleCollectionChange;
        }
        
        /// <summary>
        /// Gets the amount of elements contained in this collection
        /// </summary>
        public virtual int Count
        {
            get
            {
                int count = 0;
                count = (count + this._parent.NestedPackage.Count);
                count = (count + this._parent.OwnedType.Count);
                return count;
            }
        }
        
        /// <summary>
        /// Gets a value indicating that the collection is not read-only
        /// </summary>
        public virtual bool IsReadOnly
        {
            get
            {
                return false;
            }
        }
        
        /// <summary>
        /// Gets or sets the item at the given position
        /// </summary>
        public virtual IPackageableElement this[int index]
        {
            get
            {
                int runningIndex = 0;
                if ((this._parent.NestedPackage.Count 
                            <= (index - runningIndex)))
                {
                    return this._parent.NestedPackage[(index - runningIndex)];
                }
                else
                {
                    runningIndex = (runningIndex + this._parent.NestedPackage.Count);
                }
                if ((this._parent.OwnedType.Count 
                            <= (index - runningIndex)))
                {
                    return this._parent.OwnedType[(index - runningIndex)];
                }
                else
                {
                    runningIndex = (runningIndex + this._parent.OwnedType.Count);
                }
                throw new System.IndexOutOfRangeException();
            }
            set
            {
                int runningIndex = 0;
                if ((this._parent.NestedPackage.Count 
                            <= (index - runningIndex)))
                {
                    this._parent.NestedPackage[(index - runningIndex)] = ((IPackage)(value));
                }
                else
                {
                    runningIndex = (runningIndex + this._parent.NestedPackage.Count);
                }
                if ((this._parent.OwnedType.Count 
                            <= (index - runningIndex)))
                {
                    this._parent.OwnedType[(index - runningIndex)] = ((NMF.Interop.Legacy.Cmof.IType)(value));
                }
                else
                {
                    runningIndex = (runningIndex + this._parent.OwnedType.Count);
                }
                throw new System.IndexOutOfRangeException();
            }
        }
        
        /// <summary>
        /// Returns that this composed collection is always attached.
        /// </summary>
        public bool IsAttached
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired when the contents of this collection changes
        /// </summary>
        public event NotifyCollectionChangedEventHandler CollectionChanged;
        
        /// <summary>
        /// Fires the CollectionChanged event
        /// </summary>
        protected virtual void OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs eventArgs)
        {
            System.Collections.Specialized.NotifyCollectionChangedEventHandler handler = this.CollectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private void HandleCollectionChange(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs eventArgs)
        {
            this.OnCollectionChanged(eventArgs);
        }
        
        /// <summary>
        /// Adds the given element to the collection
        /// </summary>
        /// <param name="item">The item to add</param>
        public virtual void Add(IPackageableElement item)
        {
            IPackage nestedPackageCasted = item.As<IPackage>();
            if ((nestedPackageCasted != null))
            {
                this._parent.NestedPackage.Add(nestedPackageCasted);
            }
            NMF.Interop.Legacy.Cmof.IType ownedTypeCasted = item.As<NMF.Interop.Legacy.Cmof.IType>();
            if ((ownedTypeCasted != null))
            {
                this._parent.OwnedType.Add(ownedTypeCasted);
            }
        }
        
        /// <summary>
        /// Clears the collection and resets all references that implement it.
        /// </summary>
        public virtual void Clear()
        {
            this._parent.NestedPackage.Clear();
            this._parent.OwnedType.Clear();
        }
        
        /// <summary>
        /// Gets a value indicating whether the given element is contained in the collection
        /// </summary>
        /// <returns>True, if it is contained, otherwise False</returns>
        /// <param name="item">The item that should be looked out for</param>
        public virtual bool Contains(IPackageableElement item)
        {
            if (this._parent.NestedPackage.Contains(item))
            {
                return true;
            }
            if (this._parent.OwnedType.Contains(item))
            {
                return true;
            }
            return false;
        }
        
        /// <summary>
        /// Copies the contents of the collection to the given array starting from the given array index
        /// </summary>
        /// <param name="array">The array in which the elements should be copied</param>
        /// <param name="arrayIndex">The starting index</param>
        public virtual void CopyTo(IPackageableElement[] array, int arrayIndex)
        {
            IEnumerator<IPackageableElement> nestedPackageEnumerator = this._parent.NestedPackage.GetEnumerator();
            try
            {
                for (
                ; nestedPackageEnumerator.MoveNext(); 
                )
                {
                    array[arrayIndex] = nestedPackageEnumerator.Current;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            finally
            {
                nestedPackageEnumerator.Dispose();
            }
            IEnumerator<IPackageableElement> ownedTypeEnumerator = this._parent.OwnedType.GetEnumerator();
            try
            {
                for (
                ; ownedTypeEnumerator.MoveNext(); 
                )
                {
                    array[arrayIndex] = ownedTypeEnumerator.Current;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            finally
            {
                ownedTypeEnumerator.Dispose();
            }
        }
        
        /// <summary>
        /// Removes the given item from the collection
        /// </summary>
        /// <returns>True, if the item was removed, otherwise False</returns>
        /// <param name="item">The item that should be removed</param>
        public virtual bool Remove(IPackageableElement item)
        {
            IPackage packageItem = item.As<IPackage>();
            if (((packageItem != null) 
                        && this._parent.NestedPackage.Remove(packageItem)))
            {
                return true;
            }
            NMF.Interop.Legacy.Cmof.IType typeItem = item.As<NMF.Interop.Legacy.Cmof.IType>();
            if (((typeItem != null) 
                        && this._parent.OwnedType.Remove(typeItem)))
            {
                return true;
            }
            return false;
        }
        
        /// <summary>
        /// Gets an enumerator that enumerates the collection
        /// </summary>
        /// <returns>A generic enumerator</returns>
        public virtual IEnumerator<IPackageableElement> GetEnumerator()
        {
            return Enumerable.Empty<IPackageableElement>().Concat(this._parent.NestedPackage).Concat(this._parent.OwnedType).GetEnumerator();
        }
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the index of the given element
        /// </summary>
        /// <returns>The index of the given element or -1 if it was not found</returns>
        /// <param name="item">The item that should be looked for</param>
        public virtual int IndexOf(IPackageableElement item)
        {
            int runningIndex = 0;
            int index;
            IPackage packageItem = item.As<IPackage>();
            if ((packageItem == null))
            {
                index = -1;
            }
            else 
            {
                index = this._parent.NestedPackage.IndexOf(packageItem);
            }
            if ((index == -1))
            {
                runningIndex = (runningIndex + this._parent.NestedPackage.Count);
            }
            else
            {
                return (index + runningIndex);
            }
            NMF.Interop.Legacy.Cmof.IType typeItem = item.As<NMF.Interop.Legacy.Cmof.IType>();
            if ((typeItem == null))
            {
                index = -1;
                index = this._parent.OwnedType.IndexOf(typeItem);
            }
            if ((index == -1))
            {
                runningIndex = (runningIndex + this._parent.OwnedType.Count);
            }
            else
            {
                return (index + runningIndex);
            }
            return -1;
        }
        
        /// <summary>
        /// Inserts the given item at the given index of the collection
        /// </summary>
        /// <param name="index">The index where to add the item</param>
        /// <param name="item">The item that should be added</param>
        public virtual void Insert(int index, IPackageableElement item)
        {
            int runningIndex = 0;
            if ((this._parent.NestedPackage.Count 
                        <= (index - runningIndex)))
            {
                this._parent.NestedPackage.Insert((index - runningIndex), ((IPackage)(item)));
                return;
            }
            else
            {
                runningIndex = (runningIndex + this._parent.NestedPackage.Count);
            }
            if ((this._parent.OwnedType.Count 
                        <= (index - runningIndex)))
            {
                this._parent.OwnedType.Insert((index - runningIndex), ((NMF.Interop.Legacy.Cmof.IType)(item)));
                return;
            }
            else
            {
                runningIndex = (runningIndex + this._parent.OwnedType.Count);
            }
            throw new ArgumentOutOfRangeException("index");
        }
        
        /// <summary>
        /// Removes the item at the given position
        /// </summary>
        /// <param name="index">The index where to remove the item</param>
        public virtual void RemoveAt(int index)
        {
            int runningIndex = 0;
            if ((this._parent.NestedPackage.Count 
                        <= (index - runningIndex)))
            {
                this._parent.NestedPackage.RemoveAt((index - runningIndex));
                return;
            }
            else
            {
                runningIndex = (runningIndex + this._parent.NestedPackage.Count);
            }
            if ((this._parent.OwnedType.Count 
                        <= (index - runningIndex)))
            {
                this._parent.OwnedType.RemoveAt((index - runningIndex));
                return;
            }
            else
            {
                runningIndex = (runningIndex + this._parent.OwnedType.Count);
            }
            throw new ArgumentOutOfRangeException("index");
        }
        
        /// <summary>
        /// Gets an observable version of this collection
        /// </summary>
        public virtual INotifyCollection<IPackageableElement> AsNotifiable()
        {
            return this.WithUpdates();
        }
        
        /// <summary>
        /// Gets an observable version of this collection
        /// </summary>
        INotifyEnumerable<IPackageableElement> IEnumerableExpression<IPackageableElement>.AsNotifiable()
        {
            return this.WithUpdates();
        }
        
        /// <summary>
        /// Gets an observable version of this collection
        /// </summary>
        INotifyEnumerable IEnumerableExpression.AsNotifiable()
        {
            return this.WithUpdates();
        }
        
        /// <summary>
        /// Attaches this collection class
        /// </summary>
        public void Attach()
        {
        }
        
        /// <summary>
        /// Detaches this collection class
        /// </summary>
        public void Detach()
        {
        }
    }
}
