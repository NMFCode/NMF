//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// The public interface for PackageImport
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PackageImport))]
    [XmlDefaultImplementationTypeAttribute(typeof(PackageImport))]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//PackageImport")]
    public interface IPackageImport : IModelElement, IDirectedRelationship
    {
        
        /// <summary>
        /// Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not. By default, the value of visibility is public.
        /// </summary>
        [DisplayNameAttribute("visibility")]
        [DescriptionAttribute(@"Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not. By default, the value of visibility is public.")]
        [CategoryAttribute("PackageImport")]
        [XmlElementNameAttribute("visibility")]
        [XmlAttributeAttribute(true)]
        VisibilityKind Visibility
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the Package whose members are imported into a Namespace. Subsets DirectedRelationship::target.
        /// </summary>
        [DisplayNameAttribute("importedPackage")]
        [DescriptionAttribute("Specifies the Package whose members are imported into a Namespace. Subsets Direct" +
            "edRelationship::target.")]
        [CategoryAttribute("PackageImport")]
        [XmlElementNameAttribute("importedPackage")]
        [XmlAttributeAttribute(true)]
        IPackage ImportedPackage
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies the Namespace that imports the members from a Package. Subsets DirectedRelationship::source and Element::owner.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("importingNamespace")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("packageImport")]
        NMF.Interop.Legacy.Cmof.INamespace ImportingNamespace
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the operation public_or_private gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Public_or_privateCalling;
        
        /// <summary>
        /// Gets fired after the operation public_or_private got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Public_or_privateCalled;
        
        /// <summary>
        /// Gets fired when the Visibility property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VisibilityChanged;
        
        /// <summary>
        /// Gets fired before the Visibility property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VisibilityChanging;
        
        /// <summary>
        /// Gets fired before the ImportedPackage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImportedPackageChanging;
        
        /// <summary>
        /// Gets fired when the ImportedPackage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImportedPackageChanged;
        
        /// <summary>
        /// Gets fired before the ImportingNamespace property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImportingNamespaceChanging;
        
        /// <summary>
        /// Gets fired when the ImportingNamespace property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImportingNamespaceChanged;
        
        /// <summary>
        /// The visibility of a PackageImport is either public or private.
        ///self.visibility = #public or self.visibility = #private
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Public_or_private(object diagnostics, object context);
    }
}

