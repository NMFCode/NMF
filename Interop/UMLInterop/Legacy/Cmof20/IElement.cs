//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// The public interface for Element
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Element))]
    [XmlDefaultImplementationTypeAttribute(typeof(Element))]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Element")]
    public interface IElement : IModelElement
    {
        
        /// <summary>
        /// The Comments owned by this element. Subsets Element::ownedElement.
        ///The Comments owned by this element.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("ownedComment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IComment> OwnedComment
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the operation not_own_self gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Not_own_selfCalling;
        
        /// <summary>
        /// Gets fired after the operation not_own_self got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Not_own_selfCalled;
        
        /// <summary>
        /// Gets fired before the operation has_owner gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Has_ownerCalling;
        
        /// <summary>
        /// Gets fired after the operation has_owner got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Has_ownerCalled;
        
        /// <summary>
        /// Gets fired before the operation allOwnedElements gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> AllOwnedElementsCalling;
        
        /// <summary>
        /// Gets fired after the operation allOwnedElements got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> AllOwnedElementsCalled;
        
        /// <summary>
        /// Gets fired before the operation mustBeOwned gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> MustBeOwnedCalling;
        
        /// <summary>
        /// Gets fired after the operation mustBeOwned got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> MustBeOwnedCalled;
        
        /// <summary>
        /// Gets fired before the operation getMetaClass gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> GetMetaClassCalling;
        
        /// <summary>
        /// Gets fired after the operation getMetaClass got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> GetMetaClassCalled;
        
        /// <summary>
        /// Gets fired before the operation container gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> ContainerCalling;
        
        /// <summary>
        /// Gets fired after the operation container got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> ContainerCalled;
        
        /// <summary>
        /// Gets fired before the operation equals gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> EqualsCalling;
        
        /// <summary>
        /// Gets fired after the operation equals got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> EqualsCalled;
        
        /// <summary>
        /// Gets fired before the operation get gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> GetCalling;
        
        /// <summary>
        /// Gets fired after the operation get got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> GetCalled;
        
        /// <summary>
        /// Gets fired before the operation set gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> SetCalling;
        
        /// <summary>
        /// Gets fired after the operation set got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> SetCalled;
        
        /// <summary>
        /// Gets fired before the operation isSet gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> IsSetCalling;
        
        /// <summary>
        /// Gets fired after the operation isSet got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> IsSetCalled;
        
        /// <summary>
        /// Gets fired before the operation unset gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> UnsetCalling;
        
        /// <summary>
        /// Gets fired after the operation unset got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> UnsetCalled;
        
        /// <summary>
        /// Gets fired before the operation delete gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> DeleteCalling;
        
        /// <summary>
        /// Gets fired after the operation delete got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> DeleteCalled;
        
        /// <summary>
        /// Gets fired before the operation invoke gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> InvokeCalling;
        
        /// <summary>
        /// Gets fired after the operation invoke got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> InvokeCalled;
        
        /// <summary>
        /// Gets fired before the operation isInstanceOfType gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> IsInstanceOfTypeCalling;
        
        /// <summary>
        /// Gets fired after the operation isInstanceOfType got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> IsInstanceOfTypeCalled;
        
        /// <summary>
        /// Gets fired before the operation verify gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> VerifyCalling;
        
        /// <summary>
        /// Gets fired after the operation verify got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> VerifyCalled;
        
        /// <summary>
        /// An element may not directly or indirectly own itself.
        ///not self.allOwnedElements()->includes(self)
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Not_own_self(object diagnostics, object context);
        
        /// <summary>
        /// Elements that must be owned must have an owner.
        ///self.mustBeOwned() implies owner->notEmpty()
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Has_owner(object diagnostics, object context);
        
        /// <summary>
        /// The query allOwnedElements() gives all of the direct and indirect owned elements of an element.
        ///result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))
        /// </summary>
        ISetExpression<IElement> AllOwnedElements();
        
        /// <summary>
        /// The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.
        ///result = true
        /// </summary>
        bool MustBeOwned();
        
        /// <summary>
        /// 
        /// </summary>
        NMF.Interop.Legacy.Cmof.IClass GetMetaClass();
        
        /// <summary>
        /// 
        /// </summary>
        IElement Container();
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="otherElement"></param>
        bool Equals(object otherElement);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        object Get(IProperty property);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        /// <param name="value"></param>
        IModelElement Set(IProperty property, object value);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        bool IsSet(IProperty property);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="property"></param>
        IModelElement Unset(IProperty property);
        
        /// <summary>
        /// 
        /// </summary>
        IModelElement Delete();
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="op"></param>
        /// <param name="arguments"></param>
        object Invoke(NMF.Interop.Legacy.Cmof.IOperation op, IArgument arguments);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        /// <param name="includeSubtypes"></param>
        bool IsInstanceOfType(NMF.Interop.Legacy.Cmof.IClass type, bool includeSubtypes);
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="deepVerify"></param>
        void Verify(bool deepVerify);
    }
}

