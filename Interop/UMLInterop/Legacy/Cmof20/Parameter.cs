//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// A parameter is a kind of typed element in order to allow the specification of an optional multiplicity on parameters. In addition, it supports the specification of an optional default value.
    ///A parameter is a typed element that represents a parameter of an operation.
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Parameter")]
    [DebuggerDisplayAttribute("Parameter {Name}")]
    public partial class Parameter : MultiplicityElement, NMF.Interop.Legacy.Cmof.IParameter, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Default property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _default;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _defaultAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDefaultAttribute);
        
        /// <summary>
        /// The backing field for the Direction property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ParameterDirectionKind _direction = ParameterDirectionKind.In;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _directionAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveDirectionAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _operationReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveOperationReference);
        
        /// <summary>
        /// The backing field for the Operation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Legacy.Cmof.IOperation _operation;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _typeReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveTypeReference);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private NMF.Interop.Legacy.Cmof.IType _type;
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _no_nameOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveNo_nameOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _qualified_nameOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveQualified_nameOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _visibility_needs_ownershipOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveVisibility_needs_ownershipOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _allNamespacesOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAllNamespacesOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _isDistinguishableFromOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveIsDistinguishableFromOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _separatorOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveSeparatorOperation);
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _qualifiedNameOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveQualifiedNameOperation);
        
        /// <summary>
        /// The backing field for the Visibility property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<VisibilityKind> _visibility;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _visibilityAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveVisibilityAttribute);
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _nameAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNameAttribute);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Specifies a String that represents a value to be used when no argument is supplied for the Parameter.
        /// </summary>
        [DisplayNameAttribute("default")]
        [DescriptionAttribute("Specifies a String that represents a value to be used when no argument is supplie" +
            "d for the Parameter.")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("default")]
        [XmlAttributeAttribute(true)]
        public string Default
        {
            get
            {
                return this._default;
            }
            set
            {
                if ((this._default != value))
                {
                    string old = this._default;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDefaultChanging(e);
                    this.OnPropertyChanging("Default", e, _defaultAttribute);
                    this._default = value;
                    this.OnDefaultChanged(e);
                    this.OnPropertyChanged("Default", e, _defaultAttribute);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether a parameter is being sent into or out of a behavioral element. The default value is in.
        /// </summary>
        [DefaultValueAttribute(ParameterDirectionKind.In)]
        [DisplayNameAttribute("direction")]
        [DescriptionAttribute("Indicates whether a parameter is being sent into or out of a behavioral element. " +
            "The default value is in.")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("direction")]
        [XmlAttributeAttribute(true)]
        public ParameterDirectionKind Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                if ((this._direction != value))
                {
                    ParameterDirectionKind old = this._direction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirectionChanging(e);
                    this.OnPropertyChanging("Direction", e, _directionAttribute);
                    this._direction = value;
                    this.OnDirectionChanged(e);
                    this.OnPropertyChanged("Direction", e, _directionAttribute);
                }
            }
        }
        
        /// <summary>
        /// References the Operation for which this is a formal parameter. Subsets NamedElement::namespace and redefines Basic::Parameter::operation.
        ///The operation that owns the parameter.
        /// </summary>
        [DisplayNameAttribute("operation")]
        [DescriptionAttribute("References the Operation for which this is a formal parameter. Subsets NamedEleme" +
            "nt::namespace and redefines Basic::Parameter::operation.\r\nThe operation that own" +
            "s the parameter.")]
        [CategoryAttribute("Parameter")]
        [XmlElementNameAttribute("operation")]
        [XmlAttributeAttribute(true)]
        public NMF.Interop.Legacy.Cmof.IOperation Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                if ((this._operation != value))
                {
                    NMF.Interop.Legacy.Cmof.IOperation old = this._operation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperationChanging(e);
                    this.OnPropertyChanging("Operation", e, _operationReference);
                    this._operation = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOperation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOperation;
                    }
                    this.OnOperationChanged(e);
                    this.OnPropertyChanged("Operation", e, _operationReference);
                }
            }
        }
        
        /// <summary>
        /// Redefines the corresponding property from Basic to derive this information from the return result for this Operation.
        ///The type of the TypedElement.
        /// </summary>
        [DisplayNameAttribute("type")]
        [DescriptionAttribute("Redefines the corresponding property from Basic to derive this information from t" +
            "he return result for this Operation.\r\nThe type of the TypedElement.")]
        [CategoryAttribute("TypedElement")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public NMF.Interop.Legacy.Cmof.IType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    NMF.Interop.Legacy.Cmof.IType old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeReference);
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeReference);
                }
            }
        }
        
        /// <summary>
        /// Determines the visibility of the NamedElement within different Namespaces within the overall model.
        /// </summary>
        [DisplayNameAttribute("visibility")]
        [DescriptionAttribute("Determines the visibility of the NamedElement within different Namespaces within " +
            "the overall model.")]
        [CategoryAttribute("NamedElement")]
        [XmlElementNameAttribute("visibility")]
        [XmlAttributeAttribute(true)]
        public Nullable<VisibilityKind> Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                if ((this._visibility != value))
                {
                    Nullable<VisibilityKind> old = this._visibility;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVisibilityChanging(e);
                    this.OnPropertyChanging("Visibility", e, _visibilityAttribute);
                    this._visibility = value;
                    this.OnVisibilityChanged(e);
                    this.OnPropertyChanged("Visibility", e, _visibilityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The name of the NamedElement.
        /// </summary>
        [DisplayNameAttribute("name")]
        [DescriptionAttribute("The name of the NamedElement.")]
        [CategoryAttribute("NamedElement")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ParameterChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ParameterReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Parameter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired when the Default property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultChanged;
        
        /// <summary>
        /// Gets fired before the Default property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultChanging;
        
        /// <summary>
        /// Gets fired when the Direction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirectionChanged;
        
        /// <summary>
        /// Gets fired before the Direction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirectionChanging;
        
        /// <summary>
        /// Gets fired before the Operation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationChanging;
        
        /// <summary>
        /// Gets fired when the Operation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the operation no_name gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> No_nameCalling;
        
        /// <summary>
        /// Gets fired after the operation no_name got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> No_nameCalled;
        
        /// <summary>
        /// Gets fired before the operation qualified_name gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Qualified_nameCalling;
        
        /// <summary>
        /// Gets fired after the operation qualified_name got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Qualified_nameCalled;
        
        /// <summary>
        /// Gets fired before the operation visibility_needs_ownership gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Visibility_needs_ownershipCalling;
        
        /// <summary>
        /// Gets fired after the operation visibility_needs_ownership got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> Visibility_needs_ownershipCalled;
        
        /// <summary>
        /// Gets fired before the operation allNamespaces gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> AllNamespacesCalling;
        
        /// <summary>
        /// Gets fired after the operation allNamespaces got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> AllNamespacesCalled;
        
        /// <summary>
        /// Gets fired before the operation isDistinguishableFrom gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IsDistinguishableFromCalling;
        
        /// <summary>
        /// Gets fired after the operation isDistinguishableFrom got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> IsDistinguishableFromCalled;
        
        /// <summary>
        /// Gets fired before the operation separator gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> SeparatorCalling;
        
        /// <summary>
        /// Gets fired after the operation separator got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> SeparatorCalled;
        
        /// <summary>
        /// Gets fired before the operation qualifiedName gets called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> QualifiedNameCalling;
        
        /// <summary>
        /// Gets fired after the operation qualifiedName got called
        /// </summary>
        public event System.EventHandler<OperationCallEventArgs> QualifiedNameCalled;
        
        /// <summary>
        /// Gets fired when the Visibility property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VisibilityChanged;
        
        /// <summary>
        /// Gets fired before the Visibility property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VisibilityChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        private static NMF.Models.Meta.ITypedElement RetrieveDefaultAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Parameter.ClassInstance)).Resolve("default")));
        }
        
        /// <summary>
        /// Raises the DefaultChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveDirectionAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Parameter.ClassInstance)).Resolve("direction")));
        }
        
        /// <summary>
        /// Raises the DirectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveOperationReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Parameter.ClassInstance)).Resolve("operation")));
        }
        
        /// <summary>
        /// Raises the OperationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Operation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperation(object sender, System.EventArgs eventArgs)
        {
            this.Operation = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveTypeReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.TypedElement.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, System.EventArgs eventArgs)
        {
            this.Type = null;
        }
        
        /// <summary>
        /// If there is no name, or one of the containing namespaces has no name, there is no qualified name.
        ///(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())
        ///
        ///  implies self.qualifiedName->isEmpty()
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool No_name(object diagnostics, object context)
        {
            System.Func<INamedElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, object, object, bool>>(_no_nameOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method no_name registered. Use the method broker t" +
                        "o register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _no_nameOperation.Value, diagnostics, context);
            this.OnNo_nameCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _no_nameOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnNo_nameCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _no_nameOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveNo_nameOperation()
        {
            return ClassInstance.LookupOperation("no_name");
        }
        
        /// <summary>
        /// Raises the No_nameCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNo_nameCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.No_nameCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the No_nameCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNo_nameCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.No_nameCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.
        ///(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies
        ///  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Qualified_name(object diagnostics, object context)
        {
            System.Func<INamedElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, object, object, bool>>(_qualified_nameOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method qualified_name registered. Use the method b" +
                        "roker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _qualified_nameOperation.Value, diagnostics, context);
            this.OnQualified_nameCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _qualified_nameOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnQualified_nameCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _qualified_nameOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveQualified_nameOperation()
        {
            return ClassInstance.LookupOperation("qualified_name");
        }
        
        /// <summary>
        /// Raises the Qualified_nameCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQualified_nameCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Qualified_nameCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Qualified_nameCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQualified_nameCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Qualified_nameCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// If a NamedElement is not owned by a Namespace, it does not have a visibility.
        ///namespace->isEmpty() implies visibility->isEmpty()
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Visibility_needs_ownership(object diagnostics, object context)
        {
            System.Func<INamedElement, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, object, object, bool>>(_visibility_needs_ownershipOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method visibility_needs_ownership registered. Use " +
                        "the method broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _visibility_needs_ownershipOperation.Value, diagnostics, context);
            this.OnVisibility_needs_ownershipCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _visibility_needs_ownershipOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnVisibility_needs_ownershipCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _visibility_needs_ownershipOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveVisibility_needs_ownershipOperation()
        {
            return ClassInstance.LookupOperation("visibility_needs_ownership");
        }
        
        /// <summary>
        /// Raises the Visibility_needs_ownershipCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVisibility_needs_ownershipCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Visibility_needs_ownershipCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Visibility_needs_ownershipCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVisibility_needs_ownershipCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.Visibility_needs_ownershipCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.
        ///result = if self.namespace->isEmpty()
        ///then Sequence{}
        ///else self.namespace.allNamespaces()->prepend(self.namespace)
        ///endif
        /// </summary>
        public IOrderedSetExpression<NMF.Interop.Legacy.Cmof.INamespace> AllNamespaces()
        {
            System.Func<INamedElement, IOrderedSetExpression<NMF.Interop.Legacy.Cmof.INamespace>> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, IOrderedSetExpression<NMF.Interop.Legacy.Cmof.INamespace>>>(_allNamespacesOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method allNamespaces registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _allNamespacesOperation.Value);
            this.OnAllNamespacesCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _allNamespacesOperation.Value, e));
            IOrderedSetExpression<NMF.Interop.Legacy.Cmof.INamespace> result = handler.Invoke(this);
            e.Result = result;
            this.OnAllNamespacesCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _allNamespacesOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAllNamespacesOperation()
        {
            return ClassInstance.LookupOperation("allNamespaces");
        }
        
        /// <summary>
        /// Raises the AllNamespacesCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllNamespacesCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.AllNamespacesCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AllNamespacesCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllNamespacesCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.AllNamespacesCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.
        ///result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)
        ///then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()
        ///else true
        ///endif
        /// </summary>
        /// <param name="n"></param>
        /// <param name="ns"></param>
        public bool IsDistinguishableFrom(INamedElement n, NMF.Interop.Legacy.Cmof.INamespace ns)
        {
            System.Func<INamedElement, INamedElement, NMF.Interop.Legacy.Cmof.INamespace, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, INamedElement, NMF.Interop.Legacy.Cmof.INamespace, bool>>(_isDistinguishableFromOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method isDistinguishableFrom registered. Use the m" +
                        "ethod broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _isDistinguishableFromOperation.Value, n, ns);
            this.OnIsDistinguishableFromCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _isDistinguishableFromOperation.Value, e));
            bool result = handler.Invoke(this, n, ns);
            e.Result = result;
            this.OnIsDistinguishableFromCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _isDistinguishableFromOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveIsDistinguishableFromOperation()
        {
            return ClassInstance.LookupOperation("isDistinguishableFrom");
        }
        
        /// <summary>
        /// Raises the IsDistinguishableFromCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDistinguishableFromCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IsDistinguishableFromCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsDistinguishableFromCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDistinguishableFromCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.IsDistinguishableFromCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// The query separator() gives the string that is used to separate names when constructing a qualified name.
        ///result = '::'
        /// </summary>
        public string Separator()
        {
            System.Func<INamedElement, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, string>>(_separatorOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method separator registered. Use the method broker" +
                        " to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _separatorOperation.Value);
            this.OnSeparatorCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _separatorOperation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnSeparatorCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _separatorOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveSeparatorOperation()
        {
            return ClassInstance.LookupOperation("separator");
        }
        
        /// <summary>
        /// Raises the SeparatorCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeparatorCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.SeparatorCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SeparatorCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeparatorCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.SeparatorCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.
        ///result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()
        ///then 
        ///    self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
        ///else
        ///    Set{}
        ///endif
        /// </summary>
        public string QualifiedName()
        {
            System.Func<INamedElement, string> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<INamedElement, string>>(_qualifiedNameOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method qualifiedName registered. Use the method br" +
                        "oker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _qualifiedNameOperation.Value);
            this.OnQualifiedNameCalling(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _qualifiedNameOperation.Value, e));
            string result = handler.Invoke(this);
            e.Result = result;
            this.OnQualifiedNameCalled(e);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _qualifiedNameOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveQualifiedNameOperation()
        {
            return ClassInstance.LookupOperation("qualifiedName");
        }
        
        /// <summary>
        /// Raises the QualifiedNameCalling event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQualifiedNameCalling(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.QualifiedNameCalling;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QualifiedNameCalled event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQualifiedNameCalled(OperationCallEventArgs eventArgs)
        {
            System.EventHandler<OperationCallEventArgs> handler = this.QualifiedNameCalled;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveVisibilityAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.NamedElement.ClassInstance)).Resolve("visibility")));
        }
        
        /// <summary>
        /// Raises the VisibilityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVisibilityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VisibilityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VisibilityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVisibilityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VisibilityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNameAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.NamedElement.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OPERATION"))
            {
                return this.Operation;
            }
            if ((reference == "TYPE"))
            {
                return this.Type;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DEFAULT"))
            {
                return this.Default;
            }
            if ((attribute == "DIRECTION"))
            {
                return this.Direction;
            }
            if ((attribute == "VISIBILITY"))
            {
                return this.Visibility;
            }
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPERATION"))
            {
                this.Operation = ((NMF.Interop.Legacy.Cmof.IOperation)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((NMF.Interop.Legacy.Cmof.IType)(value));
                return;
            }
            if ((feature == "DEFAULT"))
            {
                this.Default = ((string)(value));
                return;
            }
            if ((feature == "DIRECTION"))
            {
                this.Direction = ((ParameterDirectionKind)(value));
                return;
            }
            if ((feature == "VISIBILITY"))
            {
                this.Visibility = ((VisibilityKind)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DEFAULT"))
            {
                return new DefaultProxy(this);
            }
            if ((attribute == "DIRECTION"))
            {
                return Observable.Box(new DirectionProxy(this));
            }
            if ((attribute == "VISIBILITY"))
            {
                return Observable.Box(new VisibilityProxy(this));
            }
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OPERATION"))
            {
                return new OperationProxy(this);
            }
            if ((reference == "TYPE"))
            {
                return new TypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Parameter")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        protected override Uri CreateUriWithFragment(string fragment, bool absolute, IModelElement baseElement)
        {
            return this.CreateUriFromGlobalIdentifier(fragment, absolute);
        }
        
        protected override void PropagateNewModel(Model newModel, Model oldModel, IModelElement subtreeRoot)
        {
            string id = this.ToIdentifierString();
            if ((oldModel != null))
            {
                oldModel.UnregisterId(id);
            }
            if ((newModel != null))
            {
                newModel.RegisterId(id, this);
            }
            base.PropagateNewModel(newModel, oldModel, subtreeRoot);
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Parameter class
        /// </summary>
        public class ParameterChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Parameter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ParameterChildrenCollection(Parameter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
            }
            
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Parameter class
        /// </summary>
        public class ParameterReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Parameter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ParameterReferencedElementsCollection(Parameter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Operation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Type != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperationChanged += this.PropagateValueChanges;
                this._parent.TypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperationChanged -= this.PropagateValueChanges;
                this._parent.TypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Operation == null))
                {
                    NMF.Interop.Legacy.Cmof.IOperation operationCasted = item.As<NMF.Interop.Legacy.Cmof.IOperation>();
                    if ((operationCasted != null))
                    {
                        this._parent.Operation = operationCasted;
                        return;
                    }
                }
                if ((this._parent.Type == null))
                {
                    NMF.Interop.Legacy.Cmof.IType typeCasted = item.As<NMF.Interop.Legacy.Cmof.IType>();
                    if ((typeCasted != null))
                    {
                        this._parent.Type = typeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Operation = null;
                this._parent.Type = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Operation))
                {
                    return true;
                }
                if ((item == this._parent.Type))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Operation != null))
                {
                    array[arrayIndex] = this._parent.Operation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Type != null))
                {
                    array[arrayIndex] = this._parent.Type;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Operation == item))
                {
                    this._parent.Operation = null;
                    return true;
                }
                if ((this._parent.Type == item))
                {
                    this._parent.Type = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Operation).Concat(this._parent.Type).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the default property
        /// </summary>
        private sealed class DefaultProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IParameter, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultProxy(NMF.Interop.Legacy.Cmof.IParameter modelElement) : 
                    base(modelElement, "default")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Default;
                }
                set
                {
                    this.ModelElement.Default = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the direction property
        /// </summary>
        private sealed class DirectionProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IParameter, ParameterDirectionKind>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirectionProxy(NMF.Interop.Legacy.Cmof.IParameter modelElement) : 
                    base(modelElement, "direction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ParameterDirectionKind Value
            {
                get
                {
                    return this.ModelElement.Direction;
                }
                set
                {
                    this.ModelElement.Direction = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operation property
        /// </summary>
        private sealed class OperationProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.IParameter, NMF.Interop.Legacy.Cmof.IOperation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperationProxy(NMF.Interop.Legacy.Cmof.IParameter modelElement) : 
                    base(modelElement, "operation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Legacy.Cmof.IOperation Value
            {
                get
                {
                    return this.ModelElement.Operation;
                }
                set
                {
                    this.ModelElement.Operation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<NMF.Interop.Legacy.Cmof.ITypedElement, NMF.Interop.Legacy.Cmof.IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(NMF.Interop.Legacy.Cmof.ITypedElement modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Interop.Legacy.Cmof.IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the visibility property
        /// </summary>
        private sealed class VisibilityProxy : ModelPropertyChange<INamedElement, Nullable<VisibilityKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VisibilityProxy(INamedElement modelElement) : 
                    base(modelElement, "visibility")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<VisibilityKind> Value
            {
                get
                {
                    return this.ModelElement.Visibility;
                }
                set
                {
                    this.ModelElement.Visibility = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(INamedElement modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }
}

