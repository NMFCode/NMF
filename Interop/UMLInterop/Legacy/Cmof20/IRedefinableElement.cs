//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// The public interface for RedefinableElement
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RedefinableElement))]
    [XmlDefaultImplementationTypeAttribute(typeof(RedefinableElement))]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//RedefinableElement")]
    public interface IRedefinableElement : IModelElement, INamedElement
    {
        
        /// <summary>
        /// Gets fired before the operation redefinition_context_valid gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Redefinition_context_validCalling;
        
        /// <summary>
        /// Gets fired after the operation redefinition_context_valid got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Redefinition_context_validCalled;
        
        /// <summary>
        /// Gets fired before the operation redefinition_consistent gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Redefinition_consistentCalling;
        
        /// <summary>
        /// Gets fired after the operation redefinition_consistent got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> Redefinition_consistentCalled;
        
        /// <summary>
        /// Gets fired before the operation isConsistentWith gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> IsConsistentWithCalling;
        
        /// <summary>
        /// Gets fired after the operation isConsistentWith got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> IsConsistentWithCalled;
        
        /// <summary>
        /// Gets fired before the operation isRedefinitionContextValid gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> IsRedefinitionContextValidCalling;
        
        /// <summary>
        /// Gets fired after the operation isRedefinitionContextValid got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> IsRedefinitionContextValidCalled;
        
        /// <summary>
        /// At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element.
        ///self.redefinedElement->forAll(e | self.isRedefinitionContextValid(e))
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Redefinition_context_valid(object diagnostics, object context);
        
        /// <summary>
        /// A redefining element must be consistent with each redefined element.
        ///self.redefinedElement->forAll(re | re.isConsistentWith(self))
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        bool Redefinition_consistent(object diagnostics, object context);
        
        /// <summary>
        /// The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.
        ///result = false
        /// </summary>
        /// <param name="redefinee"></param>
        bool IsConsistentWith(IRedefinableElement redefinee);
        
        /// <summary>
        /// The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.
        ///result = self.redefinitionContext->exists(c | redefinable.redefinitionContext->exists(r | c.allParents()->includes(r)))
        /// </summary>
        /// <param name="redefinable"></param>
        bool IsRedefinitionContextValid(IRedefinableElement redefinable);
    }
}

