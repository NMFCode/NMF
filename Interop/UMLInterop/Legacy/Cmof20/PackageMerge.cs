//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// A package merge is a directed relationship between two packages, that indicates that the contents of the two packages are to be combined. It is very similar to Generalization in the sense that the source element conceptually adds the characteristics of the target element to its own characteristics resulting in an element that combines the characteristics of both.
    ///
    ///
    ///
    ///This mechanism should be used when elements defined in different packages have the same name and are intended to represent the same concept. Most often it is used to provide different definitions of a given concept for different purposes, starting from a common base definition. A given base concept is extended in increments, with each increment defined in a separate merged package. By selecting which increments to merge, it is possible to obtain a custom definition of a concept for a specific end. Package merge is particularly useful in meta-modeling and is extensively used in the definition of the UML metamodel.
    ///
    ///
    ///
    ///Conceptually, a package merge can be viewed as an operation that takes the contents of two packages and produces a new package that combines the contents of the packages involved in the merge. In terms of model semantics, there is no difference between a model with explicit package merges, and a model in which all the merges have been performed.
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//PackageMerge")]
    public partial class PackageMerge : DirectedRelationship, IPackageMerge, IModelElement
    {
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _mergedPackageReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMergedPackageReference);
        
        /// <summary>
        /// The backing field for the MergedPackage property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IPackage _mergedPackage;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _receivingPackageReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveReceivingPackageReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// References the Package that is to be merged with the receiving package of the Package-Merge. Subsets DirectedRelationship::target.
        /// </summary>
        [DisplayNameAttribute("mergedPackage")]
        [DescriptionAttribute("References the Package that is to be merged with the receiving package of the Pac" +
            "kage-Merge. Subsets DirectedRelationship::target.")]
        [CategoryAttribute("PackageMerge")]
        [XmlElementNameAttribute("mergedPackage")]
        [XmlAttributeAttribute(true)]
        public IPackage MergedPackage
        {
            get
            {
                return this._mergedPackage;
            }
            set
            {
                if ((this._mergedPackage != value))
                {
                    IPackage old = this._mergedPackage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMergedPackageChanging(e);
                    this.OnPropertyChanging("MergedPackage", e, _mergedPackageReference);
                    this._mergedPackage = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMergedPackage;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMergedPackage;
                    }
                    this.OnMergedPackageChanged(e);
                    this.OnPropertyChanged("MergedPackage", e, _mergedPackageReference);
                }
            }
        }
        
        /// <summary>
        /// References the Package that is being extended with the contents of the merged package of the PackageMerge. Subsets Element::owner and DirectedRelationship::source.
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("receivingPackage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("packageMerge")]
        public IPackage ReceivingPackage
        {
            get
            {
                return ModelHelper.CastAs<IPackage>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PackageMergeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//PackageMerge")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MergedPackage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MergedPackageChanging;
        
        /// <summary>
        /// Gets fired when the MergedPackage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MergedPackageChanged;
        
        /// <summary>
        /// Gets fired before the ReceivingPackage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceivingPackageChanging;
        
        /// <summary>
        /// Gets fired when the ReceivingPackage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceivingPackageChanged;
        
        private static NMF.Models.Meta.ITypedElement RetrieveMergedPackageReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.PackageMerge.ClassInstance)).Resolve("mergedPackage")));
        }
        
        /// <summary>
        /// Raises the MergedPackageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMergedPackageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MergedPackageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MergedPackageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMergedPackageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MergedPackageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MergedPackage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMergedPackage(object sender, System.EventArgs eventArgs)
        {
            this.MergedPackage = null;
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveReceivingPackageReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.PackageMerge.ClassInstance)).Resolve("receivingPackage")));
        }
        
        /// <summary>
        /// Raises the ReceivingPackageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceivingPackageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceivingPackageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IPackage oldReceivingPackage = ModelHelper.CastAs<IPackage>(oldParent);
            IPackage newReceivingPackage = ModelHelper.CastAs<IPackage>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldReceivingPackage, newReceivingPackage);
            this.OnReceivingPackageChanging(e);
            this.OnPropertyChanging("ReceivingPackage", e, _receivingPackageReference);
        }
        
        /// <summary>
        /// Raises the ReceivingPackageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceivingPackageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceivingPackageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IPackage oldReceivingPackage = ModelHelper.CastAs<IPackage>(oldParent);
            IPackage newReceivingPackage = ModelHelper.CastAs<IPackage>(newParent);
            if ((oldReceivingPackage != null))
            {
                oldReceivingPackage.PackageMerge.Remove(this);
            }
            if ((newReceivingPackage != null))
            {
                newReceivingPackage.PackageMerge.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldReceivingPackage, newReceivingPackage);
            this.OnReceivingPackageChanged(e);
            this.OnPropertyChanged("ReceivingPackage", e, _receivingPackageReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "MERGEDPACKAGE"))
            {
                return this.MergedPackage;
            }
            if ((reference == "RECEIVINGPACKAGE"))
            {
                return this.ReceivingPackage;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MERGEDPACKAGE"))
            {
                this.MergedPackage = ((IPackage)(value));
                return;
            }
            if ((feature == "RECEIVINGPACKAGE"))
            {
                this.ReceivingPackage = ((IPackage)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MERGEDPACKAGE"))
            {
                return new MergedPackageProxy(this);
            }
            if ((reference == "RECEIVINGPACKAGE"))
            {
                return new ReceivingPackageProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//PackageMerge")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PackageMerge class
        /// </summary>
        public class PackageMergeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PackageMerge _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PackageMergeReferencedElementsCollection(PackageMerge parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.MergedPackage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReceivingPackage != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MergedPackageChanged += this.PropagateValueChanges;
                this._parent.ReceivingPackageChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MergedPackageChanged -= this.PropagateValueChanges;
                this._parent.ReceivingPackageChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.MergedPackage == null))
                {
                    IPackage mergedPackageCasted = item.As<IPackage>();
                    if ((mergedPackageCasted != null))
                    {
                        this._parent.MergedPackage = mergedPackageCasted;
                        return;
                    }
                }
                if ((this._parent.ReceivingPackage == null))
                {
                    IPackage receivingPackageCasted = item.As<IPackage>();
                    if ((receivingPackageCasted != null))
                    {
                        this._parent.ReceivingPackage = receivingPackageCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MergedPackage = null;
                this._parent.ReceivingPackage = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.MergedPackage))
                {
                    return true;
                }
                if ((item == this._parent.ReceivingPackage))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.MergedPackage != null))
                {
                    array[arrayIndex] = this._parent.MergedPackage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReceivingPackage != null))
                {
                    array[arrayIndex] = this._parent.ReceivingPackage;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.MergedPackage == item))
                {
                    this._parent.MergedPackage = null;
                    return true;
                }
                if ((this._parent.ReceivingPackage == item))
                {
                    this._parent.ReceivingPackage = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MergedPackage).Concat(this._parent.ReceivingPackage).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mergedPackage property
        /// </summary>
        private sealed class MergedPackageProxy : ModelPropertyChange<IPackageMerge, IPackage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MergedPackageProxy(IPackageMerge modelElement) : 
                    base(modelElement, "mergedPackage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPackage Value
            {
                get
                {
                    return this.ModelElement.MergedPackage;
                }
                set
                {
                    this.ModelElement.MergedPackage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the receivingPackage property
        /// </summary>
        private sealed class ReceivingPackageProxy : ModelPropertyChange<IPackageMerge, IPackage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceivingPackageProxy(IPackageMerge modelElement) : 
                    base(modelElement, "receivingPackage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPackage Value
            {
                get
                {
                    return this.ModelElement.ReceivingPackage;
                }
                set
                {
                    this.ModelElement.ReceivingPackage = value;
                }
            }
        }
    }
}

