//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NMF.Interop.Legacy.Cmof
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Meta;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using System.Collections.Specialized;
    using NMF.Models.Repository;
    using System.Globalization;
    
    
    /// <summary>
    /// An association specifies a semantic relationship that can occur between typed instances. It has at least two ends represented by properties, each of which is connected to the type of the end. More than one end of an association may have the same type.
    ///
    ///
    ///
    ///An end property of an association that is owned by an end class or that is a navigable owned end of the association indicates that the association is navigable from the opposite ends, otherwise the association is not navigable from the opposite ends.
    /// </summary>
    [XmlNamespaceAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml")]
    [XmlNamespacePrefixAttribute("cmof")]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Association")]
    [DebuggerDisplayAttribute("Association {Name}")]
    public partial class Association : Classifier, IAssociation, IModelElement
    {
        
        private static System.Lazy<NMF.Models.Meta.IOperation> _association_endsOperation = new System.Lazy<NMF.Models.Meta.IOperation>(RetrieveAssociation_endsOperation);
        
        /// <summary>
        /// The backing field for the IsDerived property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private bool _isDerived = false;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _isDerivedAttribute = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveIsDerivedAttribute);
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _memberEndReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveMemberEndReference);
        
        /// <summary>
        /// The backing field for the MemberEnd property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private AssociationMemberEndCollection _memberEnd;
        
        private static Lazy<NMF.Models.Meta.ITypedElement> _navigableOwnedEndReference = new Lazy<NMF.Models.Meta.ITypedElement>(RetrieveNavigableOwnedEndReference);
        
        /// <summary>
        /// The backing field for the NavigableOwnedEnd property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionSet<IProperty> _navigableOwnedEnd;
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Association()
        {
            this._memberEnd = new AssociationMemberEndCollection(this);
            this._memberEnd.CollectionChanging += this.MemberEndCollectionChanging;
            this._memberEnd.CollectionChanged += this.MemberEndCollectionChanged;
            this._navigableOwnedEnd = new ObservableCompositionSet<IProperty>(this);
            this._navigableOwnedEnd.CollectionChanging += this.NavigableOwnedEndCollectionChanging;
            this._navigableOwnedEnd.CollectionChanged += this.NavigableOwnedEndCollectionChanged;
        }
        
        /// <summary>
        /// Specifies whether the association is derived from other model elements such as other associations or constraints. The default value is false.
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [DisplayNameAttribute("isDerived")]
        [DescriptionAttribute("Specifies whether the association is derived from other model elements such as ot" +
            "her associations or constraints. The default value is false.")]
        [CategoryAttribute("Association")]
        [XmlElementNameAttribute("isDerived")]
        [XmlAttributeAttribute(true)]
        public bool IsDerived
        {
            get
            {
                return this._isDerived;
            }
            set
            {
                if ((this._isDerived != value))
                {
                    bool old = this._isDerived;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("IsDerived", e, _isDerivedAttribute);
                    this._isDerived = value;
                    this.OnPropertyChanged("IsDerived", e, _isDerivedAttribute);
                }
            }
        }
        
        /// <summary>
        /// Each end represents participation of instances of the classifier connected to the end in links of the association. This is an ordered association.
        /// </summary>
        [LowerBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("memberEnd")]
        [DescriptionAttribute("Each end represents participation of instances of the classifier connected to the" +
            " end in links of the association. This is an ordered association.")]
        [CategoryAttribute("Association")]
        [XmlElementNameAttribute("memberEnd")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("association")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IProperty> MemberEnd
        {
            get
            {
                return this._memberEnd;
            }
        }
        
        /// <summary>
        /// The navigable ends that are owned by the association itself.
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("navigableOwnedEnd")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public ISetExpression<IProperty> NavigableOwnedEnd
        {
            get
            {
                return this._navigableOwnedEnd;
            }
        }

        IListExpression<IProperty> IAssociation.OwnedEnd
        {
            get
            {
                return new AssociationOwnedEndCollection(this);
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AssociationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssociationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Association")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Association ends of associations with more than two ends must be owned by the association.
        ///if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        public bool Association_ends(object diagnostics, object context)
        {
            System.Func<IAssociation, object, object, bool> handler = OperationBroker.Instance.GetRegisteredDelegate<System.Func<IAssociation, object, object, bool>>(_association_endsOperation);
            if ((handler != null))
            {
            }
            else
            {
                throw new System.InvalidOperationException("There is no implementation for method association_ends registered. Use the method" +
                        " broker to register a method implementation.");
            }
            OperationCallEventArgs e = new OperationCallEventArgs(this, _association_endsOperation.Value, diagnostics, context);
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalling(this, _association_endsOperation.Value, e));
            bool result = handler.Invoke(this, diagnostics, context);
            e.Result = result;
            this.OnBubbledChange(BubbledChangeEventArgs.OperationCalled(this, _association_endsOperation.Value, e));
            return result;
        }
        
        private static NMF.Models.Meta.IOperation RetrieveAssociation_endsOperation()
        {
            return ClassInstance.LookupOperation("association_ends");
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveIsDerivedAttribute()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Association.ClassInstance)).Resolve("isDerived")));
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveMemberEndReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Association.ClassInstance)).Resolve("memberEnd")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MemberEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MemberEndCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MemberEnd", e, _memberEndReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MemberEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MemberEndCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MemberEnd", e, _memberEndReference);
        }
        
        private static NMF.Models.Meta.ITypedElement RetrieveNavigableOwnedEndReference()
        {
            return ((NMF.Models.Meta.ITypedElement)(((ModelElement)(NMF.Interop.Legacy.Cmof.Association.ClassInstance)).Resolve("navigableOwnedEnd")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NavigableOwnedEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NavigableOwnedEndCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("NavigableOwnedEnd", e, _navigableOwnedEndReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NavigableOwnedEnd property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NavigableOwnedEndCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NavigableOwnedEnd", e, _navigableOwnedEndReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "MEMBEREND"))
            {
                if ((index < this.MemberEnd.Count))
                {
                    return this.MemberEnd[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISDERIVED"))
            {
                return this.IsDerived;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MEMBEREND"))
            {
                return this._memberEnd;
            }
            if ((feature == "NAVIGABLEOWNEDEND"))
            {
                return this._navigableOwnedEnd;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISDERIVED"))
            {
                this.IsDerived = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISDERIVED"))
            {
                return Observable.Box(new IsDerivedProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._navigableOwnedEnd))
            {
                return "navigableOwnedEnd";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//Association")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Association class
        /// </summary>
        public class AssociationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Association _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssociationChildrenCollection(Association parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.NavigableOwnedEnd.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.NavigableOwnedEnd.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.NavigableOwnedEnd.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProperty navigableOwnedEndCasted = item.As<IProperty>();
                if ((navigableOwnedEndCasted != null))
                {
                    this._parent.NavigableOwnedEnd.Add(navigableOwnedEndCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NavigableOwnedEnd.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.NavigableOwnedEnd.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> navigableOwnedEndEnumerator = this._parent.NavigableOwnedEnd.GetEnumerator();
                try
                {
                    for (
                    ; navigableOwnedEndEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = navigableOwnedEndEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    navigableOwnedEndEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.NavigableOwnedEnd.Remove(propertyItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NavigableOwnedEnd).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Association class
        /// </summary>
        public class AssociationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Association _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssociationReferencedElementsCollection(Association parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.MemberEnd.Count);
                    count = (count + this._parent.NavigableOwnedEnd.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.MemberEnd.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NavigableOwnedEnd.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.MemberEnd.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NavigableOwnedEnd.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProperty memberEndCasted = item.As<IProperty>();
                if ((memberEndCasted != null))
                {
                    this._parent.MemberEnd.Add(memberEndCasted);
                }
                IProperty navigableOwnedEndCasted = item.As<IProperty>();
                if ((navigableOwnedEndCasted != null))
                {
                    this._parent.NavigableOwnedEnd.Add(navigableOwnedEndCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MemberEnd.Clear();
                this._parent.NavigableOwnedEnd.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.MemberEnd.Contains(item))
                {
                    return true;
                }
                if (this._parent.NavigableOwnedEnd.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> memberEndEnumerator = this._parent.MemberEnd.GetEnumerator();
                try
                {
                    for (
                    ; memberEndEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = memberEndEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    memberEndEnumerator.Dispose();
                }
                IEnumerator<IModelElement> navigableOwnedEndEnumerator = this._parent.NavigableOwnedEnd.GetEnumerator();
                try
                {
                    for (
                    ; navigableOwnedEndEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = navigableOwnedEndEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    navigableOwnedEndEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.MemberEnd.Remove(propertyItem)))
                {
                    return true;
                }
                if (((propertyItem != null) 
                            && this._parent.NavigableOwnedEnd.Remove(propertyItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MemberEnd).Concat(this._parent.NavigableOwnedEnd).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDerived property
        /// </summary>
        private sealed class IsDerivedProxy : ModelPropertyChange<IAssociation, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDerivedProxy(IAssociation modelElement) : 
                    base(modelElement, "isDerived")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDerived;
                }
                set
                {
                    this.ModelElement.IsDerived = value;
                }
            }
        }
    }
}
