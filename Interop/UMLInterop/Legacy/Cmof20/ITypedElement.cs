//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMF.Interop.Legacy.Cmof
{
    
    
    /// <summary>
    /// The public interface for TypedElement
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TypedElement))]
    [XmlDefaultImplementationTypeAttribute(typeof(TypedElement))]
    [ModelRepresentationClassAttribute("http://schema.omg.org/spec/MOF/2.0/cmof.xml#//TypedElement")]
    public interface ITypedElement : IModelElement, INamedElement
    {
        
        /// <summary>
        /// Redefines the corresponding property from Basic to derive this information from the return result for this Operation.
        ///The type of the TypedElement.
        /// </summary>
        [DisplayNameAttribute("type")]
        [DescriptionAttribute("Redefines the corresponding property from Basic to derive this information from t" +
            "he return result for this Operation.\r\nThe type of the TypedElement.")]
        [CategoryAttribute("TypedElement")]
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        NMF.Interop.Legacy.Cmof.IType Type
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanged;
    }
}

