//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Changes
{
    
    
    /// <summary>
    /// The default implementation of the OperationCall class
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/changes")]
    [XmlNamespacePrefixAttribute("changes")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/changes#//OperationCall")]
    public partial class OperationCall : ModelChange, IOperationCall, NMF.Models.IModelElement
    {
        
        private static Lazy<ITypedElement> _operationReference = new Lazy<ITypedElement>(RetrieveOperationReference);
        
        /// <summary>
        /// The backing field for the Operation property
        /// </summary>
        private IOperation _operation;
        
        private static Lazy<ITypedElement> _targetElementReference = new Lazy<ITypedElement>(RetrieveTargetElementReference);
        
        /// <summary>
        /// The backing field for the TargetElement property
        /// </summary>
        private NMF.Models.IModelElement _targetElement;
        
        private static Lazy<ITypedElement> _argumentsReference = new Lazy<ITypedElement>(RetrieveArgumentsReference);
        
        /// <summary>
        /// The backing field for the Arguments property
        /// </summary>
        private ObservableAssociationList<IOperationArgument> _arguments;
        
        private static IClass _classInstance;
        
        public OperationCall()
        {
            this._arguments = new ObservableAssociationList<IOperationArgument>();
            this._arguments.CollectionChanging += this.ArgumentsCollectionChanging;
            this._arguments.CollectionChanged += this.ArgumentsCollectionChanged;
        }
        
        /// <summary>
        /// The operation property
        /// </summary>
        [DisplayNameAttribute("operation")]
        [CategoryAttribute("OperationCall")]
        [XmlElementNameAttribute("operation")]
        [XmlAttributeAttribute(true)]
        public IOperation Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                if ((this._operation != value))
                {
                    IOperation old = this._operation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperationChanging(e);
                    this.OnPropertyChanging("Operation", e, _operationReference);
                    this._operation = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOperation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOperation;
                    }
                    this.OnOperationChanged(e);
                    this.OnPropertyChanged("Operation", e, _operationReference);
                }
            }
        }
        
        /// <summary>
        /// The targetElement property
        /// </summary>
        [DisplayNameAttribute("targetElement")]
        [CategoryAttribute("OperationCall")]
        [XmlElementNameAttribute("targetElement")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.IModelElement TargetElement
        {
            get
            {
                return this._targetElement;
            }
            set
            {
                if ((this._targetElement != value))
                {
                    NMF.Models.IModelElement old = this._targetElement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetElementChanging(e);
                    this.OnPropertyChanging("TargetElement", e, _targetElementReference);
                    this._targetElement = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTargetElement;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTargetElement;
                    }
                    this.OnTargetElementChanged(e);
                    this.OnPropertyChanged("TargetElement", e, _targetElementReference);
                }
            }
        }
        
        /// <summary>
        /// The arguments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("arguments")]
        [CategoryAttribute("OperationCall")]
        [XmlElementNameAttribute("arguments")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IListExpression<IOperationArgument> Arguments
        {
            get
            {
                return this._arguments;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OperationCallReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/changes#//OperationCall")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Operation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationChanging;
        
        /// <summary>
        /// Gets fired when the Operation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationChanged;
        
        /// <summary>
        /// Gets fired before the TargetElement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetElementChanging;
        
        /// <summary>
        /// Gets fired when the TargetElement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetElementChanged;
        
        private static ITypedElement RetrieveOperationReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(OperationCall.ClassInstance)).Resolve("operation")));
        }
        
        /// <summary>
        /// Raises the OperationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Operation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperation(object sender, System.EventArgs eventArgs)
        {
            this.Operation = null;
        }
        
        private static ITypedElement RetrieveTargetElementReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(OperationCall.ClassInstance)).Resolve("targetElement")));
        }
        
        /// <summary>
        /// Raises the TargetElementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetElementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetElementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetElementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetElementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetElementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TargetElement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTargetElement(object sender, System.EventArgs eventArgs)
        {
            this.TargetElement = null;
        }
        
        private static ITypedElement RetrieveArgumentsReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(OperationCall.ClassInstance)).Resolve("arguments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Arguments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ArgumentsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Arguments", e, _argumentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Arguments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ArgumentsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Arguments", e, _argumentsReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "OPERATION"))
            {
                return this.Operation;
            }
            if ((reference == "TARGETELEMENT"))
            {
                return this.TargetElement;
            }
            if ((reference == "ARGUMENTS"))
            {
                if ((index < this.Arguments.Count))
                {
                    return this.Arguments[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ARGUMENTS"))
            {
                return this._arguments;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPERATION"))
            {
                this.Operation = ((IOperation)(value));
                return;
            }
            if ((feature == "TARGETELEMENT"))
            {
                this.TargetElement = ((NMF.Models.IModelElement)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OPERATION"))
            {
                return new OperationProxy(this);
            }
            if ((reference == "TARGETELEMENT"))
            {
                return new TargetElementProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/changes#//OperationCall")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OperationCall class
        /// </summary>
        public class OperationCallReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private OperationCall _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperationCallReferencedElementsCollection(OperationCall parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Operation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TargetElement != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Arguments.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperationChanged += this.PropagateValueChanges;
                this._parent.TargetElementChanged += this.PropagateValueChanges;
                this._parent.Arguments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperationChanged -= this.PropagateValueChanges;
                this._parent.TargetElementChanged -= this.PropagateValueChanges;
                this._parent.Arguments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.Operation == null))
                {
                    IOperation operationCasted = item.As<IOperation>();
                    if ((operationCasted != null))
                    {
                        this._parent.Operation = operationCasted;
                        return;
                    }
                }
                if ((this._parent.TargetElement == null))
                {
                    this._parent.TargetElement = item;
                    return;
                }
                IOperationArgument argumentsCasted = item.As<IOperationArgument>();
                if ((argumentsCasted != null))
                {
                    this._parent.Arguments.Add(argumentsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Operation = null;
                this._parent.TargetElement = null;
                this._parent.Arguments.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.Operation))
                {
                    return true;
                }
                if ((item == this._parent.TargetElement))
                {
                    return true;
                }
                if (this._parent.Arguments.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Operation != null))
                {
                    array[arrayIndex] = this._parent.Operation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TargetElement != null))
                {
                    array[arrayIndex] = this._parent.TargetElement;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<NMF.Models.IModelElement> argumentsEnumerator = this._parent.Arguments.GetEnumerator();
                try
                {
                    for (
                    ; argumentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = argumentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    argumentsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.Operation == item))
                {
                    this._parent.Operation = null;
                    return true;
                }
                if ((this._parent.TargetElement == item))
                {
                    this._parent.TargetElement = null;
                    return true;
                }
                IOperationArgument operationArgumentItem = item.As<IOperationArgument>();
                if (((operationArgumentItem != null) 
                            && this._parent.Arguments.Remove(operationArgumentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.Operation).Concat(this._parent.TargetElement).Concat(this._parent.Arguments).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operation property
        /// </summary>
        private sealed class OperationProxy : ModelPropertyChange<IOperationCall, IOperation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperationProxy(IOperationCall modelElement) : 
                    base(modelElement, "operation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOperation Value
            {
                get
                {
                    return this.ModelElement.Operation;
                }
                set
                {
                    this.ModelElement.Operation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the targetElement property
        /// </summary>
        private sealed class TargetElementProxy : ModelPropertyChange<IOperationCall, NMF.Models.IModelElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetElementProxy(IOperationCall modelElement) : 
                    base(modelElement, "targetElement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.IModelElement Value
            {
                get
                {
                    return this.ModelElement.TargetElement;
                }
                set
                {
                    this.ModelElement.TargetElement = value;
                }
            }
        }
    }
}

