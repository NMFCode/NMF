//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The default implementation of the Namespace class
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//Namespace")]
    [DebuggerDisplayAttribute("Namespace {Name}")]
    public partial class Namespace : MetaElement, INamespace, NMF.Models.IModelElement
    {
        
        /// <summary>
        /// The backing field for the Uri property
        /// </summary>
        private Uri _uri;
        
        private static Lazy<ITypedElement> _uriAttribute = new Lazy<ITypedElement>(RetrieveUriAttribute);
        
        /// <summary>
        /// The backing field for the Prefix property
        /// </summary>
        private string _prefix;
        
        private static Lazy<ITypedElement> _prefixAttribute = new Lazy<ITypedElement>(RetrievePrefixAttribute);
        
        private static Lazy<ITypedElement> _parentNamespaceReference = new Lazy<ITypedElement>(RetrieveParentNamespaceReference);
        
        private static Lazy<ITypedElement> _childNamespacesReference = new Lazy<ITypedElement>(RetrieveChildNamespacesReference);
        
        /// <summary>
        /// The backing field for the ChildNamespaces property
        /// </summary>
        private NamespaceChildNamespacesCollection _childNamespaces;
        
        private static Lazy<ITypedElement> _typesReference = new Lazy<ITypedElement>(RetrieveTypesReference);
        
        /// <summary>
        /// The backing field for the Types property
        /// </summary>
        private NamespaceTypesCollection _types;
        
        private static IClass _classInstance;
        
        public Namespace()
        {
            this._childNamespaces = new NamespaceChildNamespacesCollection(this);
            this._childNamespaces.CollectionChanging += this.ChildNamespacesCollectionChanging;
            this._childNamespaces.CollectionChanged += this.ChildNamespacesCollectionChanged;
            this._types = new NamespaceTypesCollection(this);
            this._types.CollectionChanging += this.TypesCollectionChanging;
            this._types.CollectionChanged += this.TypesCollectionChanged;
        }
        
        /// <summary>
        /// The Uri property
        /// </summary>
        [CategoryAttribute("Namespace")]
        [XmlAttributeAttribute(true)]
        public Uri Uri
        {
            get
            {
                return this._uri;
            }
            set
            {
                if ((this._uri != value))
                {
                    Uri old = this._uri;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUriChanging(e);
                    this.OnPropertyChanging("Uri", e, _uriAttribute);
                    this._uri = value;
                    this.OnUriChanged(e);
                    this.OnPropertyChanged("Uri", e, _uriAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Prefix property
        /// </summary>
        [CategoryAttribute("Namespace")]
        [XmlAttributeAttribute(true)]
        public string Prefix
        {
            get
            {
                return this._prefix;
            }
            set
            {
                if ((this._prefix != value))
                {
                    string old = this._prefix;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPrefixChanging(e);
                    this.OnPropertyChanging("Prefix", e, _prefixAttribute);
                    this._prefix = value;
                    this.OnPrefixChanged(e);
                    this.OnPropertyChanged("Prefix", e, _prefixAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ParentNamespace property
        /// </summary>
        [BrowsableAttribute(false)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChildNamespaces")]
        public INamespace ParentNamespace
        {
            get
            {
                return ModelHelper.CastAs<INamespace>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The ChildNamespaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("ParentNamespace")]
        [ConstantAttribute()]
        public ICollectionExpression<INamespace> ChildNamespaces
        {
            get
            {
                return this._childNamespaces;
            }
        }
        
        /// <summary>
        /// The Types property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("Namespace")]
        [ConstantAttribute()]
        public ICollectionExpression<IType> Types
        {
            get
            {
                return this._types;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new NamespaceChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new NamespaceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/nmeta/#//Namespace")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Uri property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UriChanging;
        
        /// <summary>
        /// Gets fired when the Uri property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UriChanged;
        
        /// <summary>
        /// Gets fired before the Prefix property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrefixChanging;
        
        /// <summary>
        /// Gets fired when the Prefix property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrefixChanged;
        
        /// <summary>
        /// Gets fired before the ParentNamespace property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentNamespaceChanging;
        
        /// <summary>
        /// Gets fired when the ParentNamespace property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentNamespaceChanged;
        
        private static ITypedElement RetrieveUriAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Namespace.ClassInstance)).Resolve("Uri")));
        }
        
        /// <summary>
        /// Raises the UriChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUriChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UriChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UriChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUriChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UriChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePrefixAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Namespace.ClassInstance)).Resolve("Prefix")));
        }
        
        /// <summary>
        /// Raises the PrefixChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrefixChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrefixChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrefixChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrefixChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrefixChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveParentNamespaceReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Namespace.ClassInstance)).Resolve("ParentNamespace")));
        }
        
        /// <summary>
        /// Raises the ParentNamespaceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentNamespaceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentNamespaceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            INamespace oldParentNamespace = ModelHelper.CastAs<INamespace>(oldParent);
            INamespace newParentNamespace = ModelHelper.CastAs<INamespace>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldParentNamespace, newParentNamespace);
            this.OnParentNamespaceChanging(e);
            this.OnPropertyChanging("ParentNamespace", e, _parentNamespaceReference);
        }
        
        /// <summary>
        /// Raises the ParentNamespaceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentNamespaceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentNamespaceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            INamespace oldParentNamespace = ModelHelper.CastAs<INamespace>(oldParent);
            INamespace newParentNamespace = ModelHelper.CastAs<INamespace>(newParent);
            if ((oldParentNamespace != null))
            {
                oldParentNamespace.ChildNamespaces.Remove(this);
            }
            if ((newParentNamespace != null))
            {
                newParentNamespace.ChildNamespaces.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldParentNamespace, newParentNamespace);
            this.OnParentNamespaceChanged(e);
            this.OnPropertyChanged("ParentNamespace", e, _parentNamespaceReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveChildNamespacesReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Namespace.ClassInstance)).Resolve("ChildNamespaces")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChildNamespaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildNamespacesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ChildNamespaces", e, _childNamespacesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChildNamespaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildNamespacesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChildNamespaces", e, _childNamespacesReference);
        }
        
        private static ITypedElement RetrieveTypesReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Namespace.ClassInstance)).Resolve("Types")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Types property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TypesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Types", e, _typesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Types property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TypesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Types", e, _typesReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PARENTNAMESPACE"))
            {
                return this.ParentNamespace;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "URI"))
            {
                return this.Uri;
            }
            if ((attribute == "PREFIX"))
            {
                return this.Prefix;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CHILDNAMESPACES"))
            {
                return this._childNamespaces;
            }
            if ((feature == "TYPES"))
            {
                return this._types;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PARENTNAMESPACE"))
            {
                this.ParentNamespace = ((INamespace)(value));
                return;
            }
            if ((feature == "URI"))
            {
                this.Uri = ((Uri)(value));
                return;
            }
            if ((feature == "PREFIX"))
            {
                this.Prefix = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "URI"))
            {
                return Observable.Box(new UriProxy(this));
            }
            if ((attribute == "PREFIX"))
            {
                return new PrefixProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PARENTNAMESPACE"))
            {
                return new ParentNamespaceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }

        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected internal override string GetCompositionName(object container)
        {
            if ((container == this._childNamespaces))
            {
                return "ChildNamespaces";
            }
            if ((container == this._types))
            {
                return "Types";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/nmeta/#//Namespace")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Namespace class
        /// </summary>
        public class NamespaceChildrenCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private Namespace _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NamespaceChildrenCollection(Namespace parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ChildNamespaces.Count);
                    count = (count + this._parent.Types.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ChildNamespaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Types.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ChildNamespaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Types.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                INamespace childNamespacesCasted = item.As<INamespace>();
                if ((childNamespacesCasted != null))
                {
                    this._parent.ChildNamespaces.Add(childNamespacesCasted);
                }
                IType typesCasted = item.As<IType>();
                if ((typesCasted != null))
                {
                    this._parent.Types.Add(typesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ChildNamespaces.Clear();
                this._parent.Types.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.ChildNamespaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.Types.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> childNamespacesEnumerator = this._parent.ChildNamespaces.GetEnumerator();
                try
                {
                    for (
                    ; childNamespacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = childNamespacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    childNamespacesEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> typesEnumerator = this._parent.Types.GetEnumerator();
                try
                {
                    for (
                    ; typesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = typesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    typesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                INamespace namespaceItem = item.As<INamespace>();
                if (((namespaceItem != null) 
                            && this._parent.ChildNamespaces.Remove(namespaceItem)))
                {
                    return true;
                }
                IType typeItem = item.As<IType>();
                if (((typeItem != null) 
                            && this._parent.Types.Remove(typeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.ChildNamespaces).Concat(this._parent.Types).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Namespace class
        /// </summary>
        public class NamespaceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private Namespace _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NamespaceReferencedElementsCollection(Namespace parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ParentNamespace != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ChildNamespaces.Count);
                    count = (count + this._parent.Types.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ParentNamespaceChanged += this.PropagateValueChanges;
                this._parent.ChildNamespaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Types.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ParentNamespaceChanged -= this.PropagateValueChanges;
                this._parent.ChildNamespaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Types.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.ParentNamespace == null))
                {
                    INamespace parentNamespaceCasted = item.As<INamespace>();
                    if ((parentNamespaceCasted != null))
                    {
                        this._parent.ParentNamespace = parentNamespaceCasted;
                        return;
                    }
                }
                INamespace childNamespacesCasted = item.As<INamespace>();
                if ((childNamespacesCasted != null))
                {
                    this._parent.ChildNamespaces.Add(childNamespacesCasted);
                }
                IType typesCasted = item.As<IType>();
                if ((typesCasted != null))
                {
                    this._parent.Types.Add(typesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ParentNamespace = null;
                this._parent.ChildNamespaces.Clear();
                this._parent.Types.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.ParentNamespace))
                {
                    return true;
                }
                if (this._parent.ChildNamespaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.Types.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ParentNamespace != null))
                {
                    array[arrayIndex] = this._parent.ParentNamespace;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<NMF.Models.IModelElement> childNamespacesEnumerator = this._parent.ChildNamespaces.GetEnumerator();
                try
                {
                    for (
                    ; childNamespacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = childNamespacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    childNamespacesEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> typesEnumerator = this._parent.Types.GetEnumerator();
                try
                {
                    for (
                    ; typesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = typesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    typesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.ParentNamespace == item))
                {
                    this._parent.ParentNamespace = null;
                    return true;
                }
                INamespace namespaceItem = item.As<INamespace>();
                if (((namespaceItem != null) 
                            && this._parent.ChildNamespaces.Remove(namespaceItem)))
                {
                    return true;
                }
                IType typeItem = item.As<IType>();
                if (((typeItem != null) 
                            && this._parent.Types.Remove(typeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.ParentNamespace).Concat(this._parent.ChildNamespaces).Concat(this._parent.Types).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Uri property
        /// </summary>
        private sealed class UriProxy : ModelPropertyChange<INamespace, Uri>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UriProxy(INamespace modelElement) : 
                    base(modelElement, "Uri")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Uri Value
            {
                get
                {
                    return this.ModelElement.Uri;
                }
                set
                {
                    this.ModelElement.Uri = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Prefix property
        /// </summary>
        private sealed class PrefixProxy : ModelPropertyChange<INamespace, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PrefixProxy(INamespace modelElement) : 
                    base(modelElement, "Prefix")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Prefix;
                }
                set
                {
                    this.ModelElement.Prefix = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ParentNamespace property
        /// </summary>
        private sealed class ParentNamespaceProxy : ModelPropertyChange<INamespace, INamespace>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentNamespaceProxy(INamespace modelElement) : 
                    base(modelElement, "ParentNamespace")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override INamespace Value
            {
                get
                {
                    return this.ModelElement.ParentNamespace;
                }
                set
                {
                    this.ModelElement.ParentNamespace = value;
                }
            }
        }
    }
}

