//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The default implementation of the Reference class
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//Reference")]
    [DebuggerDisplayAttribute("Reference {Name}")]
    public partial class Reference : MetaElement, IReference, NMF.Models.IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsContainment property
        /// </summary>
        private bool _isContainment;
        
        private static Lazy<ITypedElement> _isContainmentAttribute = new Lazy<ITypedElement>(RetrieveIsContainmentAttribute);
        
        private static Lazy<ITypedElement> _declaringTypeReference = new Lazy<ITypedElement>(RetrieveDeclaringTypeReference);
        
        private static Lazy<ITypedElement> _oppositeReference = new Lazy<ITypedElement>(RetrieveOppositeReference);
        
        /// <summary>
        /// The backing field for the Opposite property
        /// </summary>
        private IReference _opposite;
        
        private static Lazy<ITypedElement> _referenceTypeReference = new Lazy<ITypedElement>(RetrieveReferenceTypeReference);
        
        /// <summary>
        /// The backing field for the ReferenceType property
        /// </summary>
        private IReferenceType _referenceType;
        
        private static Lazy<ITypedElement> _refinesReference = new Lazy<ITypedElement>(RetrieveRefinesReference);
        
        /// <summary>
        /// The backing field for the Refines property
        /// </summary>
        private IReference _refines;
        
        private static Lazy<ITypedElement> _anchorReference = new Lazy<ITypedElement>(RetrieveAnchorReference);
        
        /// <summary>
        /// The backing field for the Anchor property
        /// </summary>
        private IClass _anchor;
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        private bool _isOrdered;
        
        private static Lazy<ITypedElement> _isOrderedAttribute = new Lazy<ITypedElement>(RetrieveIsOrderedAttribute);
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        private bool _isUnique;
        
        private static Lazy<ITypedElement> _isUniqueAttribute = new Lazy<ITypedElement>(RetrieveIsUniqueAttribute);
        
        /// <summary>
        /// The backing field for the LowerBound property
        /// </summary>
        private int _lowerBound = 0;
        
        private static Lazy<ITypedElement> _lowerBoundAttribute = new Lazy<ITypedElement>(RetrieveLowerBoundAttribute);
        
        /// <summary>
        /// The backing field for the UpperBound property
        /// </summary>
        private int _upperBound = 1;
        
        private static Lazy<ITypedElement> _upperBoundAttribute = new Lazy<ITypedElement>(RetrieveUpperBoundAttribute);
        
        private static IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanged
        {
            add
            {
                IReference _this_IReference = this;
                _this_IReference.ReferenceTypeChanged += value;
            }
            remove
            {
                IReference _this_IReference = this;
                _this_IReference.ReferenceTypeChanged -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanging
        {
            add
            {
                IReference _this_IReference = this;
                _this_IReference.ReferenceTypeChanging += value;
            }
            remove
            {
                IReference _this_IReference = this;
                _this_IReference.ReferenceTypeChanging -= value;
            }
        }
        
        /// <summary>
        /// The IsContainment property
        /// </summary>
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        public bool IsContainment
        {
            get
            {
                return this._isContainment;
            }
            set
            {
                if ((this._isContainment != value))
                {
                    bool old = this._isContainment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsContainmentChanging(e);
                    this.OnPropertyChanging("IsContainment", e, _isContainmentAttribute);
                    this._isContainment = value;
                    this.OnIsContainmentChanged(e);
                    this.OnPropertyChanged("IsContainment", e, _isContainmentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DeclaringType property
        /// </summary>
        [BrowsableAttribute(false)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("References")]
        public IReferenceType DeclaringType
        {
            get
            {
                return ModelHelper.CastAs<IReferenceType>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The Opposite property
        /// </summary>
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Opposite")]
        public IReference Opposite
        {
            get
            {
                return this._opposite;
            }
            set
            {
                if ((this._opposite != value))
                {
                    IReference old = this._opposite;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOppositeChanging(e);
                    this.OnPropertyChanging("Opposite", e, _oppositeReference);
                    this._opposite = value;
                    if ((old != null))
                    {
                        old.Opposite = null;
                        old.Deleted -= this.OnResetOpposite;
                    }
                    if ((value != null))
                    {
                        value.Opposite = this;
                        value.Deleted += this.OnResetOpposite;
                    }
                    this.OnOppositeChanged(e);
                    this.OnPropertyChanged("Opposite", e, _oppositeReference);
                }
            }
        }
        
        /// <summary>
        /// The ReferenceType property
        /// </summary>
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        public IReferenceType ReferenceType
        {
            get
            {
                return this._referenceType;
            }
            set
            {
                if ((this._referenceType != value))
                {
                    IReferenceType old = this._referenceType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReferenceTypeChanging(e);
                    this.OnPropertyChanging("ReferenceType", e, _referenceTypeReference);
                    this._referenceType = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReferenceType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReferenceType;
                    }
                    this.OnReferenceTypeChanged(e);
                    this.OnPropertyChanged("ReferenceType", e, _referenceTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The reference that is refined by the current reference, only applicable if the reference is part of a class
        /// </summary>
        [DescriptionAttribute("The reference that is refined by the current reference, only applicable if the re" +
            "ference is part of a class")]
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        public IReference Refines
        {
            get
            {
                return this._refines;
            }
            set
            {
                if ((this._refines != value))
                {
                    IReference old = this._refines;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRefinesChanging(e);
                    this.OnPropertyChanging("Refines", e, _refinesReference);
                    this._refines = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRefines;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRefines;
                    }
                    this.OnRefinesChanged(e);
                    this.OnPropertyChanged("Refines", e, _refinesReference);
                }
            }
        }
        
        /// <summary>
        /// The least common anchestor of an instance and its referenced element, if statically known
        /// </summary>
        [DescriptionAttribute("The least common anchestor of an instance and its referenced element, if statical" +
            "ly known")]
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        public IClass Anchor
        {
            get
            {
                return this._anchor;
            }
            set
            {
                if ((this._anchor != value))
                {
                    IClass old = this._anchor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnchorChanging(e);
                    this.OnPropertyChanging("Anchor", e, _anchorReference);
                    this._anchor = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAnchor;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAnchor;
                    }
                    this.OnAnchorChanged(e);
                    this.OnPropertyChanged("Anchor", e, _anchorReference);
                }
            }
        }
        
        IType ITypedElement.Type
        {
            get
            {
                IReference _this = this;
                if ((_this.ReferenceType != null))
                {
                    return _this.ReferenceType;
                }
                return null;
            }
            set
            {
                IReference _this = this;
                if ((value != null))
                {
                    IReferenceType @__ReferenceType = value.As<IReferenceType>();
                    if ((@__ReferenceType != null))
                    {
                        _this.ReferenceType = @__ReferenceType;
                        return;
                    }
                }
                else
                {
                    _this.ReferenceType = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        /// <summary>
        /// The IsOrdered property
        /// </summary>
        [CategoryAttribute("TypedElement")]
        [XmlAttributeAttribute(true)]
        public bool IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    bool old = this._isOrdered;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsOrderedChanging(e);
                    this.OnPropertyChanging("IsOrdered", e, _isOrderedAttribute);
                    this._isOrdered = value;
                    this.OnIsOrderedChanged(e);
                    this.OnPropertyChanged("IsOrdered", e, _isOrderedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The IsUnique property
        /// </summary>
        [CategoryAttribute("TypedElement")]
        [XmlAttributeAttribute(true)]
        public bool IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((this._isUnique != value))
                {
                    bool old = this._isUnique;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsUniqueChanging(e);
                    this.OnPropertyChanging("IsUnique", e, _isUniqueAttribute);
                    this._isUnique = value;
                    this.OnIsUniqueChanged(e);
                    this.OnPropertyChanged("IsUnique", e, _isUniqueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The LowerBound property
        /// </summary>
        [DefaultValueAttribute(0)]
        [CategoryAttribute("TypedElement")]
        [XmlAttributeAttribute(true)]
        public int LowerBound
        {
            get
            {
                return this._lowerBound;
            }
            set
            {
                if ((this._lowerBound != value))
                {
                    int old = this._lowerBound;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerBoundChanging(e);
                    this.OnPropertyChanging("LowerBound", e, _lowerBoundAttribute);
                    this._lowerBound = value;
                    this.OnLowerBoundChanged(e);
                    this.OnPropertyChanged("LowerBound", e, _lowerBoundAttribute);
                }
            }
        }
        
        /// <summary>
        /// The UpperBound property
        /// </summary>
        [DefaultValueAttribute(1)]
        [CategoryAttribute("TypedElement")]
        [XmlAttributeAttribute(true)]
        public int UpperBound
        {
            get
            {
                return this._upperBound;
            }
            set
            {
                if ((this._upperBound != value))
                {
                    int old = this._upperBound;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUpperBoundChanging(e);
                    this.OnPropertyChanging("UpperBound", e, _upperBoundAttribute);
                    this._upperBound = value;
                    this.OnUpperBoundChanged(e);
                    this.OnPropertyChanged("UpperBound", e, _upperBoundAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReferenceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/nmeta/#//Reference")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsContainment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsContainmentChanging;
        
        /// <summary>
        /// Gets fired when the IsContainment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsContainmentChanged;
        
        /// <summary>
        /// Gets fired before the DeclaringType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanging;
        
        /// <summary>
        /// Gets fired when the DeclaringType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanged;
        
        /// <summary>
        /// Gets fired before the Opposite property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OppositeChanging;
        
        /// <summary>
        /// Gets fired when the Opposite property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OppositeChanged;
        
        /// <summary>
        /// Gets fired before the ReferenceType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferenceTypeChanging;
        
        /// <summary>
        /// Gets fired when the ReferenceType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferenceTypeChanged;
        
        /// <summary>
        /// Gets fired before the Refines property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefinesChanging;
        
        /// <summary>
        /// Gets fired when the Refines property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefinesChanged;
        
        /// <summary>
        /// Gets fired before the Anchor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorChanging;
        
        /// <summary>
        /// Gets fired when the Anchor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorChanged;
        
        /// <summary>
        /// Gets fired before the IsOrdered property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsOrderedChanging;
        
        /// <summary>
        /// Gets fired when the IsOrdered property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsOrderedChanged;
        
        /// <summary>
        /// Gets fired before the IsUnique property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsUniqueChanging;
        
        /// <summary>
        /// Gets fired when the IsUnique property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsUniqueChanged;
        
        /// <summary>
        /// Gets fired before the LowerBound property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerBoundChanging;
        
        /// <summary>
        /// Gets fired when the LowerBound property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerBoundChanged;
        
        /// <summary>
        /// Gets fired before the UpperBound property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperBoundChanging;
        
        /// <summary>
        /// Gets fired when the UpperBound property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperBoundChanged;
        
        private static ITypedElement RetrieveIsContainmentAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Reference.ClassInstance)).Resolve("IsContainment")));
        }
        
        /// <summary>
        /// Raises the IsContainmentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsContainmentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsContainmentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsContainmentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsContainmentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsContainmentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDeclaringTypeReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Reference.ClassInstance)).Resolve("DeclaringType")));
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            IReferenceType oldDeclaringType = ModelHelper.CastAs<IReferenceType>(oldParent);
            IReferenceType newDeclaringType = ModelHelper.CastAs<IReferenceType>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDeclaringType, newDeclaringType);
            this.OnDeclaringTypeChanging(e);
            this.OnPropertyChanging("DeclaringType", e, _declaringTypeReference);
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(NMF.Models.IModelElement newParent, NMF.Models.IModelElement oldParent)
        {
            IReferenceType oldDeclaringType = ModelHelper.CastAs<IReferenceType>(oldParent);
            IReferenceType newDeclaringType = ModelHelper.CastAs<IReferenceType>(newParent);
            if ((oldDeclaringType != null))
            {
                oldDeclaringType.References.Remove(this);
            }
            if ((newDeclaringType != null))
            {
                newDeclaringType.References.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDeclaringType, newDeclaringType);
            this.OnDeclaringTypeChanged(e);
            this.OnPropertyChanged("DeclaringType", e, _declaringTypeReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveOppositeReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Reference.ClassInstance)).Resolve("Opposite")));
        }
        
        /// <summary>
        /// Raises the OppositeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OppositeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OppositeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OppositeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Opposite property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpposite(object sender, System.EventArgs eventArgs)
        {
            this.Opposite = null;
        }
        
        private static ITypedElement RetrieveReferenceTypeReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Reference.ClassInstance)).Resolve("ReferenceType")));
        }
        
        /// <summary>
        /// Raises the ReferenceTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferenceTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferenceTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReferenceTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferenceTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferenceTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReferenceType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReferenceType(object sender, System.EventArgs eventArgs)
        {
            this.ReferenceType = null;
        }
        
        private static ITypedElement RetrieveRefinesReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Reference.ClassInstance)).Resolve("Refines")));
        }
        
        /// <summary>
        /// Raises the RefinesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefinesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefinesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RefinesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefinesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefinesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Refines property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRefines(object sender, System.EventArgs eventArgs)
        {
            this.Refines = null;
        }
        
        private static ITypedElement RetrieveAnchorReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Reference.ClassInstance)).Resolve("Anchor")));
        }
        
        /// <summary>
        /// Raises the AnchorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Anchor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAnchor(object sender, System.EventArgs eventArgs)
        {
            this.Anchor = null;
        }
        
        private static ITypedElement RetrieveIsOrderedAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(TypedElement.ClassInstance)).Resolve("IsOrdered")));
        }
        
        /// <summary>
        /// Raises the IsOrderedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsOrderedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsOrderedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsOrderedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsUniqueAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(TypedElement.ClassInstance)).Resolve("IsUnique")));
        }
        
        /// <summary>
        /// Raises the IsUniqueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsUniqueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsUniqueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsUniqueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLowerBoundAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(TypedElement.ClassInstance)).Resolve("LowerBound")));
        }
        
        /// <summary>
        /// Raises the LowerBoundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerBoundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerBoundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerBoundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUpperBoundAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(TypedElement.ClassInstance)).Resolve("UpperBound")));
        }
        
        /// <summary>
        /// Raises the UpperBoundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperBoundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperBoundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperBoundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DECLARINGTYPE"))
            {
                return this.DeclaringType;
            }
            if ((reference == "OPPOSITE"))
            {
                return this.Opposite;
            }
            if ((reference == "REFERENCETYPE"))
            {
                return this.ReferenceType;
            }
            if ((reference == "REFINES"))
            {
                return this.Refines;
            }
            if ((reference == "ANCHOR"))
            {
                return this.Anchor;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISCONTAINMENT"))
            {
                return this.IsContainment;
            }
            if ((attribute == "ISORDERED"))
            {
                return this.IsOrdered;
            }
            if ((attribute == "ISUNIQUE"))
            {
                return this.IsUnique;
            }
            if ((attribute == "LOWERBOUND"))
            {
                return this.LowerBound;
            }
            if ((attribute == "UPPERBOUND"))
            {
                return this.UpperBound;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DECLARINGTYPE"))
            {
                this.DeclaringType = ((IReferenceType)(value));
                return;
            }
            if ((feature == "OPPOSITE"))
            {
                this.Opposite = ((IReference)(value));
                return;
            }
            if ((feature == "REFERENCETYPE"))
            {
                this.ReferenceType = ((IReferenceType)(value));
                return;
            }
            if ((feature == "REFINES"))
            {
                this.Refines = ((IReference)(value));
                return;
            }
            if ((feature == "ANCHOR"))
            {
                this.Anchor = ((IClass)(value));
                return;
            }
            if ((feature == "ISCONTAINMENT"))
            {
                this.IsContainment = ((bool)(value));
                return;
            }
            if ((feature == "ISORDERED"))
            {
                this.IsOrdered = ((bool)(value));
                return;
            }
            if ((feature == "ISUNIQUE"))
            {
                this.IsUnique = ((bool)(value));
                return;
            }
            if ((feature == "LOWERBOUND"))
            {
                this.LowerBound = ((int)(value));
                return;
            }
            if ((feature == "UPPERBOUND"))
            {
                this.UpperBound = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISCONTAINMENT"))
            {
                return Observable.Box(new IsContainmentProxy(this));
            }
            if ((attribute == "ISORDERED"))
            {
                return Observable.Box(new IsOrderedProxy(this));
            }
            if ((attribute == "ISUNIQUE"))
            {
                return Observable.Box(new IsUniqueProxy(this));
            }
            if ((attribute == "LOWERBOUND"))
            {
                return Observable.Box(new LowerBoundProxy(this));
            }
            if ((attribute == "UPPERBOUND"))
            {
                return Observable.Box(new UpperBoundProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DECLARINGTYPE"))
            {
                return new DeclaringTypeProxy(this);
            }
            if ((reference == "OPPOSITE"))
            {
                return new OppositeProxy(this);
            }
            if ((reference == "REFERENCETYPE"))
            {
                return new ReferenceTypeProxy(this);
            }
            if ((reference == "REFINES"))
            {
                return new RefinesProxy(this);
            }
            if ((reference == "ANCHOR"))
            {
                return new AnchorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/nmeta/#//Reference")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Reference class
        /// </summary>
        public class ReferenceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private Reference _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReferenceReferencedElementsCollection(Reference parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DeclaringType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Opposite != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReferenceType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Refines != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Anchor != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DeclaringTypeChanged += this.PropagateValueChanges;
                this._parent.OppositeChanged += this.PropagateValueChanges;
                this._parent.ReferenceTypeChanged += this.PropagateValueChanges;
                this._parent.RefinesChanged += this.PropagateValueChanges;
                this._parent.AnchorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DeclaringTypeChanged -= this.PropagateValueChanges;
                this._parent.OppositeChanged -= this.PropagateValueChanges;
                this._parent.ReferenceTypeChanged -= this.PropagateValueChanges;
                this._parent.RefinesChanged -= this.PropagateValueChanges;
                this._parent.AnchorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                if ((this._parent.DeclaringType == null))
                {
                    IReferenceType declaringTypeCasted = item.As<IReferenceType>();
                    if ((declaringTypeCasted != null))
                    {
                        this._parent.DeclaringType = declaringTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Opposite == null))
                {
                    IReference oppositeCasted = item.As<IReference>();
                    if ((oppositeCasted != null))
                    {
                        this._parent.Opposite = oppositeCasted;
                        return;
                    }
                }
                if ((this._parent.ReferenceType == null))
                {
                    IReferenceType referenceTypeCasted = item.As<IReferenceType>();
                    if ((referenceTypeCasted != null))
                    {
                        this._parent.ReferenceType = referenceTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Refines == null))
                {
                    IReference refinesCasted = item.As<IReference>();
                    if ((refinesCasted != null))
                    {
                        this._parent.Refines = refinesCasted;
                        return;
                    }
                }
                if ((this._parent.Anchor == null))
                {
                    IClass anchorCasted = item.As<IClass>();
                    if ((anchorCasted != null))
                    {
                        this._parent.Anchor = anchorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DeclaringType = null;
                this._parent.Opposite = null;
                this._parent.ReferenceType = null;
                this._parent.Refines = null;
                this._parent.Anchor = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if ((item == this._parent.DeclaringType))
                {
                    return true;
                }
                if ((item == this._parent.Opposite))
                {
                    return true;
                }
                if ((item == this._parent.ReferenceType))
                {
                    return true;
                }
                if ((item == this._parent.Refines))
                {
                    return true;
                }
                if ((item == this._parent.Anchor))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DeclaringType != null))
                {
                    array[arrayIndex] = this._parent.DeclaringType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Opposite != null))
                {
                    array[arrayIndex] = this._parent.Opposite;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReferenceType != null))
                {
                    array[arrayIndex] = this._parent.ReferenceType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Refines != null))
                {
                    array[arrayIndex] = this._parent.Refines;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Anchor != null))
                {
                    array[arrayIndex] = this._parent.Anchor;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                if ((this._parent.DeclaringType == item))
                {
                    this._parent.DeclaringType = null;
                    return true;
                }
                if ((this._parent.Opposite == item))
                {
                    this._parent.Opposite = null;
                    return true;
                }
                if ((this._parent.ReferenceType == item))
                {
                    this._parent.ReferenceType = null;
                    return true;
                }
                if ((this._parent.Refines == item))
                {
                    this._parent.Refines = null;
                    return true;
                }
                if ((this._parent.Anchor == item))
                {
                    this._parent.Anchor = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.DeclaringType).Concat(this._parent.Opposite).Concat(this._parent.ReferenceType).Concat(this._parent.Refines).Concat(this._parent.Anchor).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsContainment property
        /// </summary>
        private sealed class IsContainmentProxy : ModelPropertyChange<IReference, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsContainmentProxy(IReference modelElement) : 
                    base(modelElement, "IsContainment")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsContainment;
                }
                set
                {
                    this.ModelElement.IsContainment = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DeclaringType property
        /// </summary>
        private sealed class DeclaringTypeProxy : ModelPropertyChange<IReference, IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeclaringTypeProxy(IReference modelElement) : 
                    base(modelElement, "DeclaringType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReferenceType Value
            {
                get
                {
                    return this.ModelElement.DeclaringType;
                }
                set
                {
                    this.ModelElement.DeclaringType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Opposite property
        /// </summary>
        private sealed class OppositeProxy : ModelPropertyChange<IReference, IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OppositeProxy(IReference modelElement) : 
                    base(modelElement, "Opposite")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReference Value
            {
                get
                {
                    return this.ModelElement.Opposite;
                }
                set
                {
                    this.ModelElement.Opposite = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReferenceType property
        /// </summary>
        private sealed class ReferenceTypeProxy : ModelPropertyChange<IReference, IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferenceTypeProxy(IReference modelElement) : 
                    base(modelElement, "ReferenceType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReferenceType Value
            {
                get
                {
                    return this.ModelElement.ReferenceType;
                }
                set
                {
                    this.ModelElement.ReferenceType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Refines property
        /// </summary>
        private sealed class RefinesProxy : ModelPropertyChange<IReference, IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefinesProxy(IReference modelElement) : 
                    base(modelElement, "Refines")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReference Value
            {
                get
                {
                    return this.ModelElement.Refines;
                }
                set
                {
                    this.ModelElement.Refines = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Anchor property
        /// </summary>
        private sealed class AnchorProxy : ModelPropertyChange<IReference, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnchorProxy(IReference modelElement) : 
                    base(modelElement, "Anchor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.Anchor;
                }
                set
                {
                    this.ModelElement.Anchor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(ITypedElement modelElement) : 
                    base(modelElement, "IsOrdered")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(ITypedElement modelElement) : 
                    base(modelElement, "IsUnique")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LowerBound property
        /// </summary>
        private sealed class LowerBoundProxy : ModelPropertyChange<ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerBoundProxy(ITypedElement modelElement) : 
                    base(modelElement, "LowerBound")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.LowerBound;
                }
                set
                {
                    this.ModelElement.LowerBound = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the UpperBound property
        /// </summary>
        private sealed class UpperBoundProxy : ModelPropertyChange<ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperBoundProxy(ITypedElement modelElement) : 
                    base(modelElement, "UpperBound")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.UpperBound;
                }
                set
                {
                    this.ModelElement.UpperBound = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<ITypedElement, IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(ITypedElement modelElement) : 
                    base(modelElement, "Type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
    }
}

