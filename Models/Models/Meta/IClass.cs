//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;


namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The public interface for Class
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Class))]
    [XmlDefaultImplementationTypeAttribute(typeof(Class))]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//Class")]
    public partial interface IClass : NMF.Models.IModelElement, NMF.Models.Meta.IReferenceType
    {
        
        /// <summary>
        /// The IsAbstract property
        /// </summary>
        [DefaultValueAttribute(false)]
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        bool IsAbstract
        {
            get;
            set;
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [DescriptionAttribute("Specifies whether the identifier is valid only in the scope of its container or o" +
            "n a global scope.")]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        IdentifierScope IdentifierScope
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BaseTypes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        ICollectionExpression<NMF.Models.Meta.IClass> BaseTypes
        {
            get;
        }
        
        /// <summary>
        /// The InstanceOf property
        /// </summary>
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        NMF.Models.Meta.IClass InstanceOf
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets or sets the attribute that will identify instances of this class
        /// </summary>
        [DescriptionAttribute("Gets or sets the attribute that will identify instances of this class")]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        NMF.Models.Meta.IAttribute Identifier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AttributeConstraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        ICollectionExpression<NMF.Models.Meta.IAttributeConstraint> AttributeConstraints
        {
            get;
        }
        
        /// <summary>
        /// The ReferenceConstraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        ICollectionExpression<NMF.Models.Meta.IReferenceConstraint> ReferenceConstraints
        {
            get;
        }
        
        /// <summary>
        /// Gets fired when the IsAbstract property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsAbstractChanged;
        
        /// <summary>
        /// Gets fired before the IsAbstract property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsAbstractChanging;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Gets fired before the IdentifierScope property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanging;
        
        /// <summary>
        /// Gets fired before the InstanceOf property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InstanceOfChanging;
        
        /// <summary>
        /// Gets fired when the InstanceOf property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InstanceOfChanged;
        
        /// <summary>
        /// Gets fired before the Identifier property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdentifierChanging;
        
        /// <summary>
        /// Gets fired when the Identifier property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdentifierChanged;
    }
}
