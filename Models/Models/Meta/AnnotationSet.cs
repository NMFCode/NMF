//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{


    /// <summary>
    /// The Annotation extension
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//AnnotationSet")]
    public class AnnotationSet : ModelElementExtension<IModelElement, AnnotationSet>
    {
        
        private static Lazy<ITypedElement> _annotationsReference = new Lazy<ITypedElement>(RetrieveAnnotationsReference);
        
        /// <summary>
        /// The backing field for the Annotations property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<NMF.Models.Meta.IAnnotationEntry> _annotations;
        
        private static IExtension _extensionType;
        
        public AnnotationSet()
        {
            this._annotations = new ObservableCompositionOrderedSet<NMF.Models.Meta.IAnnotationEntry>(this);
            this._annotations.CollectionChanging += this.AnnotationsCollectionChanging;
            this._annotations.CollectionChanged += this.AnnotationsCollectionChanged;
        }
        
        /// <summary>
        /// The Annotations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<NMF.Models.Meta.IAnnotationEntry> Annotations
        {
            get
            {
                return this._annotations;
            }
        }

        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int annotationsIndex = ModelHelper.IndexOfReference(this.Annotations, element);
            if ((annotationsIndex != -1))
            {
                return ModelHelper.CreatePath("Annotations", annotationsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }

        private static ITypedElement RetrieveAnnotationsReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(NMF.Models.Meta.AnnotationSet.ClassInstance)).Resolve("Annotations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Annotations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnnotationsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Annotations", e, _annotationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Annotations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnnotationsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Annotations", e, _annotationsReference);
        }
        
        /// <summary>
        /// Gets the Annotation extension from the given model element
        /// </summary>
        /// <returns>The extension object or null, if the model element does not have this extension</returns>
        /// <param name="parent">The parent model element that may hold the extension</param>
        public static AnnotationSet FromModelElement(IModelElement parent)
        {
            if ((parent == null))
            {
                return null;
            }
            AnnotationSet extension = parent.GetExtension<AnnotationSet>();
            if ((extension != null))
            {
                return extension;
            }
            extension = new AnnotationSet();
            parent.Extensions.Add(extension);
            return extension;
        }
        
        /// <summary>
        /// Gets the extension model element for the given model extension class
        /// </summary>
        public override IExtension GetExtension()
        {
            if ((_extensionType == null))
            {
                _extensionType = ((IExtension)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/nmeta/#//Annotation")));
            }
            return _extensionType;
        }
    }
}

