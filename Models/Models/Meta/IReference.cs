//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;


namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The public interface for Reference
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Reference))]
    [XmlDefaultImplementationTypeAttribute(typeof(Reference))]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//Reference")]
    public interface IReference : NMF.Models.IModelElement, NMF.Models.Meta.ITypedElement
    {
        
        /// <summary>
        /// The IsContainment property
        /// </summary>
        [TypeConverterAttribute(typeof(LowercaseBooleanConverter))]
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        bool IsContainment
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DeclaringType property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("References")]
        NMF.Models.Meta.IReferenceType DeclaringType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Opposite property
        /// </summary>
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Opposite")]
        NMF.Models.Meta.IReference Opposite
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReferenceType property
        /// </summary>
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        NMF.Models.Meta.IReferenceType ReferenceType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reference that is refined by the current reference, only applicable if the reference is part of a class
        /// </summary>
        [DescriptionAttribute("The reference that is refined by the current reference, only applicable if the re" +
            "ference is part of a class")]
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        NMF.Models.Meta.IReference Refines
        {
            get;
            set;
        }
        
        /// <summary>
        /// The least common anchestor of an instance and its referenced element, if statically known
        /// </summary>
        [DescriptionAttribute("The least common anchestor of an instance and its referenced element, if statical" +
            "ly known")]
        [CategoryAttribute("Reference")]
        [XmlAttributeAttribute(true)]
        NMF.Models.Meta.IClass Anchor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the IsContainment property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsContainmentChanged;
        
        /// <summary>
        /// Gets fired before the IsContainment property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsContainmentChanging;
        
        /// <summary>
        /// Gets fired before the DeclaringType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanging;
        
        /// <summary>
        /// Gets fired when the DeclaringType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanged;
        
        /// <summary>
        /// Gets fired before the Opposite property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OppositeChanging;
        
        /// <summary>
        /// Gets fired when the Opposite property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OppositeChanged;
        
        /// <summary>
        /// Gets fired before the ReferenceType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReferenceTypeChanging;
        
        /// <summary>
        /// Gets fired when the ReferenceType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReferenceTypeChanged;
        
        /// <summary>
        /// Gets fired before the Refines property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RefinesChanging;
        
        /// <summary>
        /// Gets fired when the Refines property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RefinesChanged;
        
        /// <summary>
        /// Gets fired before the Anchor property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AnchorChanging;
        
        /// <summary>
        /// Gets fired when the Anchor property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AnchorChanged;
    }
}
