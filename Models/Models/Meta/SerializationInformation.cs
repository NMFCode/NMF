//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The SerializationInformation extension
    /// </summary>
    public class SerializationInformation : ModelElementExtension<IMetaElement, SerializationInformation>
    {
        
        /// <summary>
        /// The backing field for the SerializationName property
        /// </summary>
        private string _serializationName;
        
        private static Lazy<ITypedElement> _serializationNameAttribute = new Lazy<ITypedElement>(RetrieveSerializationNameAttribute);
        
        /// <summary>
        /// The backing field for the IsDefault property
        /// </summary>
        private bool _isDefault;
        
        private static Lazy<ITypedElement> _isDefaultAttribute = new Lazy<ITypedElement>(RetrieveIsDefaultAttribute);
        
        private static IExtension _extensionType;
        
        /// <summary>
        /// The SerializationName property
        /// </summary>
        [CategoryAttribute("SerializationInformation")]
        [XmlAttributeAttribute(true)]
        public string SerializationName
        {
            get
            {
                return this._serializationName;
            }
            set
            {
                if ((this._serializationName != value))
                {
                    string old = this._serializationName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSerializationNameChanging(e);
                    this.OnPropertyChanging("SerializationName", e, _serializationNameAttribute);
                    this._serializationName = value;
                    this.OnSerializationNameChanged(e);
                    this.OnPropertyChanged("SerializationName", e, _serializationNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The IsDefault property
        /// </summary>
        [CategoryAttribute("SerializationInformation")]
        [XmlAttributeAttribute(true)]
        public bool IsDefault
        {
            get
            {
                return this._isDefault;
            }
            set
            {
                if ((this._isDefault != value))
                {
                    bool old = this._isDefault;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsDefaultChanging(e);
                    this.OnPropertyChanging("IsDefault", e, _isDefaultAttribute);
                    this._isDefault = value;
                    this.OnIsDefaultChanged(e);
                    this.OnPropertyChanged("IsDefault", e, _isDefaultAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets fired before the SerializationName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SerializationNameChanging;
        
        /// <summary>
        /// Gets fired when the SerializationName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SerializationNameChanged;
        
        /// <summary>
        /// Gets fired before the IsDefault property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsDefaultChanging;
        
        /// <summary>
        /// Gets fired when the IsDefault property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsDefaultChanged;
        
        private static ITypedElement RetrieveSerializationNameAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(SerializationInformation.ClassInstance)).Resolve("SerializationName")));
        }
        
        /// <summary>
        /// Raises the SerializationNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSerializationNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SerializationNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SerializationNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSerializationNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SerializationNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsDefaultAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(SerializationInformation.ClassInstance)).Resolve("IsDefault")));
        }
        
        /// <summary>
        /// Raises the IsDefaultChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDefaultChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsDefaultChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsDefaultChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDefaultChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsDefaultChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the SerializationInformation extension from the given model element
        /// </summary>
        /// <returns>The extension object or null, if the model element does not have this extension</returns>
        /// <param name="parent">The parent model element that may hold the extension</param>
        public static SerializationInformation FromMetaElement(IMetaElement parent)
        {
            if ((parent == null))
            {
                return null;
            }
            SerializationInformation extension = parent.GetExtension<SerializationInformation>();
            if ((extension != null))
            {
                return extension;
            }
            extension = new SerializationInformation();
            parent.Extensions.Add(extension);
            return extension;
        }
        
        /// <summary>
        /// Gets the extension model element for the given model extension class
        /// </summary>
        public override IExtension GetExtension()
        {
            if ((_extensionType == null))
            {
                _extensionType = ((IExtension)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/nmeta/#//SerializationInformation")));
            }
            return _extensionType;
        }
    }
}

