//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// Represents a group of instances with common properties like attributes or references
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//Class")]
    [DebuggerDisplayAttribute("Class {Name}")]
    public partial class Class : ReferenceType, IClass, NMF.Models.IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsAbstract property
        /// </summary>
        private bool _isAbstract = false;
        
        private static Lazy<ITypedElement> _isAbstractAttribute = new Lazy<ITypedElement>(RetrieveIsAbstractAttribute);
        
        /// <summary>
        /// The backing field for the IdentifierScope property
        /// </summary>
        private NMF.Models.Meta.IdentifierScope _identifierScope;
        
        private static Lazy<ITypedElement> _identifierScopeAttribute = new Lazy<ITypedElement>(RetrieveIdentifierScopeAttribute);
        
        private static Lazy<ITypedElement> _baseTypesReference = new Lazy<ITypedElement>(RetrieveBaseTypesReference);
        
        /// <summary>
        /// The backing field for the BaseTypes property
        /// </summary>
        private ObservableAssociationList<IClass> _baseTypes;
        
        private static Lazy<ITypedElement> _instanceOfReference = new Lazy<ITypedElement>(RetrieveInstanceOfReference);
        
        /// <summary>
        /// The backing field for the InstanceOf property
        /// </summary>
        private IClass _instanceOf;
        
        private static Lazy<ITypedElement> _identifierReference = new Lazy<ITypedElement>(RetrieveIdentifierReference);
        
        /// <summary>
        /// The backing field for the Identifier property
        /// </summary>
        private IAttribute _identifier;
        
        private static Lazy<ITypedElement> _attributeConstraintsReference = new Lazy<ITypedElement>(RetrieveAttributeConstraintsReference);
        
        /// <summary>
        /// The backing field for the AttributeConstraints property
        /// </summary>
        private ClassAttributeConstraintsCollection _attributeConstraints;
        
        private static Lazy<ITypedElement> _referenceConstraintsReference = new Lazy<ITypedElement>(RetrieveReferenceConstraintsReference);
        
        /// <summary>
        /// The backing field for the ReferenceConstraints property
        /// </summary>
        private ClassReferenceConstraintsCollection _referenceConstraints;
        
        private static IClass _classInstance;
        
        public Class()
        {
            this._baseTypes = new ObservableAssociationList<IClass>();
            this._baseTypes.CollectionChanging += this.BaseTypesCollectionChanging;
            this._baseTypes.CollectionChanged += this.BaseTypesCollectionChanged;
            this._attributeConstraints = new ClassAttributeConstraintsCollection(this);
            this._attributeConstraints.CollectionChanging += this.AttributeConstraintsCollectionChanging;
            this._attributeConstraints.CollectionChanged += this.AttributeConstraintsCollectionChanged;
            this._referenceConstraints = new ClassReferenceConstraintsCollection(this);
            this._referenceConstraints.CollectionChanging += this.ReferenceConstraintsCollectionChanging;
            this._referenceConstraints.CollectionChanged += this.ReferenceConstraintsCollectionChanged;
        }
        
        /// <summary>
        /// The IsAbstract property
        /// </summary>
        [DefaultValueAttribute(false)]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public bool IsAbstract
        {
            get
            {
                return this._isAbstract;
            }
            set
            {
                if ((this._isAbstract != value))
                {
                    bool old = this._isAbstract;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsAbstractChanging(e);
                    this.OnPropertyChanging("IsAbstract", e, _isAbstractAttribute);
                    this._isAbstract = value;
                    this.OnIsAbstractChanged(e);
                    this.OnPropertyChanged("IsAbstract", e, _isAbstractAttribute);
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [DescriptionAttribute("Specifies whether the identifier is valid only in the scope of its container or o" +
            "n a global scope.")]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public NMF.Models.Meta.IdentifierScope IdentifierScope
        {
            get
            {
                return this._identifierScope;
            }
            set
            {
                if ((this._identifierScope != value))
                {
                    NMF.Models.Meta.IdentifierScope old = this._identifierScope;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierScopeChanging(e);
                    this.OnPropertyChanging("IdentifierScope", e, _identifierScopeAttribute);
                    this._identifierScope = value;
                    this.OnIdentifierScopeChanged(e);
                    this.OnPropertyChanged("IdentifierScope", e, _identifierScopeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The BaseTypes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ICollectionExpression<IClass> BaseTypes
        {
            get
            {
                return this._baseTypes;
            }
        }
        
        /// <summary>
        /// The InstanceOf property
        /// </summary>
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public IClass InstanceOf
        {
            get
            {
                return this._instanceOf;
            }
            set
            {
                if ((this._instanceOf != value))
                {
                    IClass old = this._instanceOf;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstanceOfChanging(e);
                    this.OnPropertyChanging("InstanceOf", e, _instanceOfReference);
                    this._instanceOf = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetInstanceOf;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetInstanceOf;
                    }
                    this.OnInstanceOfChanged(e);
                    this.OnPropertyChanged("InstanceOf", e, _instanceOfReference);
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the attribute that will identify instances of this class
        /// </summary>
        [DescriptionAttribute("Gets or sets the attribute that will identify instances of this class")]
        [CategoryAttribute("Class")]
        [XmlAttributeAttribute(true)]
        public IAttribute Identifier
        {
            get
            {
                return this._identifier;
            }
            set
            {
                if ((this._identifier != value))
                {
                    IAttribute old = this._identifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierChanging(e);
                    this.OnPropertyChanging("Identifier", e, _identifierReference);
                    this._identifier = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetIdentifier;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetIdentifier;
                    }
                    this.OnIdentifierChanged(e);
                    this.OnPropertyChanged("Identifier", e, _identifierReference);
                }
            }
        }
        
        /// <summary>
        /// The AttributeConstraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public ICollectionExpression<IAttributeConstraint> AttributeConstraints
        {
            get
            {
                return this._attributeConstraints;
            }
        }
        
        /// <summary>
        /// The ReferenceConstraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public ICollectionExpression<IReferenceConstraint> ReferenceConstraints
        {
            get
            {
                return this._referenceConstraints;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ClassChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<NMF.Models.IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/nmeta/#//Class")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsAbstract property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanging;
        
        /// <summary>
        /// Gets fired when the IsAbstract property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanged;
        
        /// <summary>
        /// Gets fired before the IdentifierScope property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanging;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Gets fired before the InstanceOf property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstanceOfChanging;
        
        /// <summary>
        /// Gets fired when the InstanceOf property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstanceOfChanged;
        
        /// <summary>
        /// Gets fired before the Identifier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierChanging;
        
        /// <summary>
        /// Gets fired when the Identifier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierChanged;
        
        private static ITypedElement RetrieveIsAbstractAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Class.ClassInstance)).Resolve("IsAbstract")));
        }
        
        /// <summary>
        /// Raises the IsAbstractChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsAbstractChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIdentifierScopeAttribute()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Class.ClassInstance)).Resolve("IdentifierScope")));
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBaseTypesReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Class.ClassInstance)).Resolve("BaseTypes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BaseTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BaseTypesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BaseTypes", e, _baseTypesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BaseTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BaseTypesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BaseTypes", e, _baseTypesReference);
        }
        
        private static ITypedElement RetrieveInstanceOfReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Class.ClassInstance)).Resolve("InstanceOf")));
        }
        
        /// <summary>
        /// Raises the InstanceOfChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceOfChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstanceOfChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstanceOfChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceOfChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstanceOfChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InstanceOf property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInstanceOf(object sender, System.EventArgs eventArgs)
        {
            this.InstanceOf = null;
        }
        
        private static ITypedElement RetrieveIdentifierReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Class.ClassInstance)).Resolve("Identifier")));
        }
        
        /// <summary>
        /// Raises the IdentifierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Identifier property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIdentifier(object sender, System.EventArgs eventArgs)
        {
            this.Identifier = null;
        }
        
        private static ITypedElement RetrieveAttributeConstraintsReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Class.ClassInstance)).Resolve("AttributeConstraints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AttributeConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributeConstraintsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("AttributeConstraints", e, _attributeConstraintsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AttributeConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributeConstraintsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AttributeConstraints", e, _attributeConstraintsReference);
        }
        
        private static ITypedElement RetrieveReferenceConstraintsReference()
        {
            return ((ITypedElement)(((NMF.Models.ModelElement)(Class.ClassInstance)).Resolve("ReferenceConstraints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ReferenceConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferenceConstraintsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ReferenceConstraints", e, _referenceConstraintsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ReferenceConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferenceConstraintsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReferenceConstraints", e, _referenceConstraintsReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override NMF.Models.IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "INSTANCEOF"))
            {
                return this.InstanceOf;
            }
            if ((reference == "IDENTIFIER"))
            {
                return this.Identifier;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISABSTRACT"))
            {
                return this.IsAbstract;
            }
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return this.IdentifierScope;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BASETYPES"))
            {
                return this._baseTypes;
            }
            if ((feature == "ATTRIBUTECONSTRAINTS"))
            {
                return this._attributeConstraints;
            }
            if ((feature == "REFERENCECONSTRAINTS"))
            {
                return this._referenceConstraints;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INSTANCEOF"))
            {
                this.InstanceOf = ((IClass)(value));
                return;
            }
            if ((feature == "IDENTIFIER"))
            {
                this.Identifier = ((IAttribute)(value));
                return;
            }
            if ((feature == "ISABSTRACT"))
            {
                this.IsAbstract = ((bool)(value));
                return;
            }
            if ((feature == "IDENTIFIERSCOPE"))
            {
                this.IdentifierScope = ((NMF.Models.Meta.IdentifierScope)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ISABSTRACT"))
            {
                return Observable.Box(new IsAbstractProxy(this));
            }
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return Observable.Box(new IdentifierScopeProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "INSTANCEOF"))
            {
                return new InstanceOfProxy(this);
            }
            if ((reference == "IDENTIFIER"))
            {
                return new IdentifierProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }

        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected internal override string GetCompositionName(object container)
        {
            if ((container == this._attributeConstraints))
            {
                return "AttributeConstraints";
            }
            if ((container == this._referenceConstraints))
            {
                return "ReferenceConstraints";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://nmf.codeplex.com/nmeta/#//Class")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Class class
        /// </summary>
        public class ClassChildrenCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private Class _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassChildrenCollection(Class parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AttributeConstraints.Count);
                    count = (count + this._parent.ReferenceConstraints.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                IAttributeConstraint attributeConstraintsCasted = item.As<IAttributeConstraint>();
                if ((attributeConstraintsCasted != null))
                {
                    this._parent.AttributeConstraints.Add(attributeConstraintsCasted);
                }
                IReferenceConstraint referenceConstraintsCasted = item.As<IReferenceConstraint>();
                if ((referenceConstraintsCasted != null))
                {
                    this._parent.ReferenceConstraints.Add(referenceConstraintsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AttributeConstraints.Clear();
                this._parent.ReferenceConstraints.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.AttributeConstraints.Contains(item))
                {
                    return true;
                }
                if (this._parent.ReferenceConstraints.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> attributeConstraintsEnumerator = this._parent.AttributeConstraints.GetEnumerator();
                try
                {
                    for (
                    ; attributeConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributeConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributeConstraintsEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> referenceConstraintsEnumerator = this._parent.ReferenceConstraints.GetEnumerator();
                try
                {
                    for (
                    ; referenceConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referenceConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referenceConstraintsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                IAttributeConstraint attributeConstraintItem = item.As<IAttributeConstraint>();
                if (((attributeConstraintItem != null) 
                            && this._parent.AttributeConstraints.Remove(attributeConstraintItem)))
                {
                    return true;
                }
                IReferenceConstraint referenceConstraintItem = item.As<IReferenceConstraint>();
                if (((referenceConstraintItem != null) 
                            && this._parent.ReferenceConstraints.Remove(referenceConstraintItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.AttributeConstraints).Concat(this._parent.ReferenceConstraints).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Class class
        /// </summary>
        public class ClassReferencedElementsCollection : ReferenceCollection, ICollectionExpression<NMF.Models.IModelElement>, ICollection<NMF.Models.IModelElement>
        {
            
            private Class _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassReferencedElementsCollection(Class parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.BaseTypes.Count);
                    if ((this._parent.InstanceOf != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Identifier != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.AttributeConstraints.Count);
                    count = (count + this._parent.ReferenceConstraints.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BaseTypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.InstanceOfChanged += this.PropagateValueChanges;
                this._parent.IdentifierChanged += this.PropagateValueChanges;
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BaseTypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.InstanceOfChanged -= this.PropagateValueChanges;
                this._parent.IdentifierChanged -= this.PropagateValueChanges;
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(NMF.Models.IModelElement item)
            {
                IClass baseTypesCasted = item.As<IClass>();
                if ((baseTypesCasted != null))
                {
                    this._parent.BaseTypes.Add(baseTypesCasted);
                }
                if ((this._parent.InstanceOf == null))
                {
                    IClass instanceOfCasted = item.As<IClass>();
                    if ((instanceOfCasted != null))
                    {
                        this._parent.InstanceOf = instanceOfCasted;
                        return;
                    }
                }
                if ((this._parent.Identifier == null))
                {
                    IAttribute identifierCasted = item.As<IAttribute>();
                    if ((identifierCasted != null))
                    {
                        this._parent.Identifier = identifierCasted;
                        return;
                    }
                }
                IAttributeConstraint attributeConstraintsCasted = item.As<IAttributeConstraint>();
                if ((attributeConstraintsCasted != null))
                {
                    this._parent.AttributeConstraints.Add(attributeConstraintsCasted);
                }
                IReferenceConstraint referenceConstraintsCasted = item.As<IReferenceConstraint>();
                if ((referenceConstraintsCasted != null))
                {
                    this._parent.ReferenceConstraints.Add(referenceConstraintsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BaseTypes.Clear();
                this._parent.InstanceOf = null;
                this._parent.Identifier = null;
                this._parent.AttributeConstraints.Clear();
                this._parent.ReferenceConstraints.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(NMF.Models.IModelElement item)
            {
                if (this._parent.BaseTypes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.InstanceOf))
                {
                    return true;
                }
                if ((item == this._parent.Identifier))
                {
                    return true;
                }
                if (this._parent.AttributeConstraints.Contains(item))
                {
                    return true;
                }
                if (this._parent.ReferenceConstraints.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(NMF.Models.IModelElement[] array, int arrayIndex)
            {
                IEnumerator<NMF.Models.IModelElement> baseTypesEnumerator = this._parent.BaseTypes.GetEnumerator();
                try
                {
                    for (
                    ; baseTypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = baseTypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    baseTypesEnumerator.Dispose();
                }
                if ((this._parent.InstanceOf != null))
                {
                    array[arrayIndex] = this._parent.InstanceOf;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Identifier != null))
                {
                    array[arrayIndex] = this._parent.Identifier;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<NMF.Models.IModelElement> attributeConstraintsEnumerator = this._parent.AttributeConstraints.GetEnumerator();
                try
                {
                    for (
                    ; attributeConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributeConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributeConstraintsEnumerator.Dispose();
                }
                IEnumerator<NMF.Models.IModelElement> referenceConstraintsEnumerator = this._parent.ReferenceConstraints.GetEnumerator();
                try
                {
                    for (
                    ; referenceConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referenceConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referenceConstraintsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(NMF.Models.IModelElement item)
            {
                IClass classItem = item.As<IClass>();
                if (((classItem != null) 
                            && this._parent.BaseTypes.Remove(classItem)))
                {
                    return true;
                }
                if ((this._parent.InstanceOf == item))
                {
                    this._parent.InstanceOf = null;
                    return true;
                }
                if ((this._parent.Identifier == item))
                {
                    this._parent.Identifier = null;
                    return true;
                }
                IAttributeConstraint attributeConstraintItem = item.As<IAttributeConstraint>();
                if (((attributeConstraintItem != null) 
                            && this._parent.AttributeConstraints.Remove(attributeConstraintItem)))
                {
                    return true;
                }
                IReferenceConstraint referenceConstraintItem = item.As<IReferenceConstraint>();
                if (((referenceConstraintItem != null) 
                            && this._parent.ReferenceConstraints.Remove(referenceConstraintItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<NMF.Models.IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<NMF.Models.IModelElement>().Concat(this._parent.BaseTypes).Concat(this._parent.InstanceOf).Concat(this._parent.Identifier).Concat(this._parent.AttributeConstraints).Concat(this._parent.ReferenceConstraints).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IClass modelElement) : 
                    base(modelElement, "IsAbstract")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<IClass, NMF.Models.Meta.IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(IClass modelElement) : 
                    base(modelElement, "IdentifierScope")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Meta.IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<IClass, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(IClass modelElement) : 
                    base(modelElement, "InstanceOf")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<IClass, IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(IClass modelElement) : 
                    base(modelElement, "Identifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
        }
    }
}

