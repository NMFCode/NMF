//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;


namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The public interface for Type
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Type))]
    [XmlDefaultImplementationTypeAttribute(typeof(Type))]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//Type")]
    public interface IType : NMF.Models.IModelElement, NMF.Models.Meta.IMetaElement
    {
        
        /// <summary>
        /// The Namespace property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(true)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlOppositeAttribute("Types")]
        NMF.Models.Meta.INamespace Namespace
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Namespace property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NamespaceChanging;
        
        /// <summary>
        /// Gets fired when the Namespace property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NamespaceChanged;
    }
}
