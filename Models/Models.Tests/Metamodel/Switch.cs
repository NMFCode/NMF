//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Tests.Railway
{
    
    
    /// <summary>
    /// The default implementation of the Switch class
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Switch")]
    [DebuggerDisplayAttribute("Switch {Id}")]
    public partial class Switch : TrackElement, ISwitch, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CurrentPosition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Position _currentPosition;
        
        private static Lazy<ITypedElement> _currentPositionAttribute = new Lazy<ITypedElement>(RetrieveCurrentPositionAttribute);
        
        private static Lazy<ITypedElement> _positionsReference = new Lazy<ITypedElement>(RetrievePositionsReference);
        
        /// <summary>
        /// The backing field for the Positions property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private SwitchPositionsCollection _positions;
        
        private static IClass _classInstance;
        
        public Switch()
        {
            this._positions = new SwitchPositionsCollection(this);
            this._positions.CollectionChanging += this.PositionsCollectionChanging;
            this._positions.CollectionChanged += this.PositionsCollectionChanged;
        }
        
        /// <summary>
        /// The currentPosition property
        /// </summary>
        [DisplayNameAttribute("currentPosition")]
        [CategoryAttribute("Switch")]
        [XmlElementNameAttribute("currentPosition")]
        [XmlAttributeAttribute(true)]
        public Position CurrentPosition
        {
            get
            {
                return this._currentPosition;
            }
            set
            {
                if ((this._currentPosition != value))
                {
                    Position old = this._currentPosition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentPositionChanging(e);
                    this.OnPropertyChanging("CurrentPosition", e, _currentPositionAttribute);
                    this._currentPosition = value;
                    this.OnCurrentPositionChanged(e);
                    this.OnPropertyChanged("CurrentPosition", e, _currentPositionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The positions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("positions")]
        [CategoryAttribute("Switch")]
        [XmlElementNameAttribute("positions")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("switch")]
        [ConstantAttribute()]
        public IListExpression<ISwitchPosition> Positions
        {
            get
            {
                return this._positions;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SwitchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Switch")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CurrentPosition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentPositionChanging;
        
        /// <summary>
        /// Gets fired when the CurrentPosition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentPositionChanged;
        
        private static ITypedElement RetrieveCurrentPositionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Models.Tests.Railway.Switch.ClassInstance)).Resolve("currentPosition")));
        }
        
        /// <summary>
        /// Raises the CurrentPositionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentPositionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentPositionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentPositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentPositionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentPositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePositionsReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Models.Tests.Railway.Switch.ClassInstance)).Resolve("positions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Positions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PositionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Positions", e, _positionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Positions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PositionsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Positions", e, _positionsReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "POSITIONS"))
            {
                if ((index < this.Positions.Count))
                {
                    return this.Positions[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CURRENTPOSITION"))
            {
                return this.CurrentPosition;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "POSITIONS"))
            {
                return this._positions;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CURRENTPOSITION"))
            {
                this.CurrentPosition = ((Position)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CURRENTPOSITION"))
            {
                return Observable.Box(new CurrentPositionProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Switch")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Switch class
        /// </summary>
        public class SwitchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Switch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SwitchReferencedElementsCollection(Switch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Positions.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Positions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Positions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISwitchPosition positionsCasted = item.As<ISwitchPosition>();
                if ((positionsCasted != null))
                {
                    this._parent.Positions.Add(positionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Positions.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Positions.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> positionsEnumerator = this._parent.Positions.GetEnumerator();
                try
                {
                    for (
                    ; positionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = positionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    positionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISwitchPosition switchPositionItem = item.As<ISwitchPosition>();
                if (((switchPositionItem != null) 
                            && this._parent.Positions.Remove(switchPositionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Positions).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentPosition property
        /// </summary>
        private sealed class CurrentPositionProxy : ModelPropertyChange<ISwitch, Position>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentPositionProxy(ISwitch modelElement) : 
                    base(modelElement, "currentPosition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Position Value
            {
                get
                {
                    return this.ModelElement.CurrentPosition;
                }
                set
                {
                    this.ModelElement.CurrentPosition = value;
                }
            }
        }
    }
}

