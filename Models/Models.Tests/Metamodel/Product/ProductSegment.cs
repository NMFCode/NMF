//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Tests.Minimal_example.Product
{
    
    
    /// <summary>
    /// The default implementation of the ProductSegment class
    /// </summary>
    [XmlNamespaceAttribute("product")]
    [XmlNamespacePrefixAttribute("example")]
    [ModelRepresentationClassAttribute("http://www.example.org/minimal_example#//product/ProductSegment")]
    public partial class ProductSegment : ModelElement, IProductSegment, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _iD;
        
        private static Lazy<ITypedElement> _iDAttribute = new Lazy<ITypedElement>(RetrieveIDAttribute);
        
        private static Lazy<ITypedElement> _workpieceInReference = new Lazy<ITypedElement>(RetrieveWorkpieceInReference);
        
        /// <summary>
        /// The backing field for the WorkpieceIn property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableAssociationOrderedSet<IWorkpieceType> _workpieceIn;
        
        private static Lazy<ITypedElement> _workpieceOutReference = new Lazy<ITypedElement>(RetrieveWorkpieceOutReference);
        
        /// <summary>
        /// The backing field for the WorkpieceOut property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IWorkpieceType _workpieceOut;
        
        private static IClass _classInstance;
        
        public ProductSegment()
        {
            this._workpieceIn = new ObservableAssociationOrderedSet<IWorkpieceType>();
            this._workpieceIn.CollectionChanging += this.WorkpieceInCollectionChanging;
            this._workpieceIn.CollectionChanged += this.WorkpieceInCollectionChanged;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [CategoryAttribute("ProductSegment")]
        [XmlAttributeAttribute(true)]
        public string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e, _iDAttribute);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e, _iDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The workpieceIn property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("workpieceIn")]
        [CategoryAttribute("ProductSegment")]
        [XmlElementNameAttribute("workpieceIn")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<IWorkpieceType> WorkpieceIn
        {
            get
            {
                return this._workpieceIn;
            }
        }
        
        /// <summary>
        /// The workpieceOut property
        /// </summary>
        [DisplayNameAttribute("workpieceOut")]
        [CategoryAttribute("ProductSegment")]
        [XmlElementNameAttribute("workpieceOut")]
        [XmlAttributeAttribute(true)]
        public IWorkpieceType WorkpieceOut
        {
            get
            {
                return this._workpieceOut;
            }
            set
            {
                if ((this._workpieceOut != value))
                {
                    IWorkpieceType old = this._workpieceOut;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkpieceOutChanging(e);
                    this.OnPropertyChanging("WorkpieceOut", e, _workpieceOutReference);
                    this._workpieceOut = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetWorkpieceOut;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetWorkpieceOut;
                    }
                    this.OnWorkpieceOutChanged(e);
                    this.OnPropertyChanged("WorkpieceOut", e, _workpieceOutReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProductSegmentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/minimal_example#//product/ProductSegment")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the WorkpieceOut property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkpieceOutChanging;
        
        /// <summary>
        /// Gets fired when the WorkpieceOut property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkpieceOutChanged;
        
        private static ITypedElement RetrieveIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Models.Tests.Minimal_example.Product.ProductSegment.ClassInstance)).Resolve("ID")));
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWorkpieceInReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Models.Tests.Minimal_example.Product.ProductSegment.ClassInstance)).Resolve("workpieceIn")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkpieceIn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkpieceInCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WorkpieceIn", e, _workpieceInReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkpieceIn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkpieceInCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkpieceIn", e, _workpieceInReference);
        }
        
        private static ITypedElement RetrieveWorkpieceOutReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Models.Tests.Minimal_example.Product.ProductSegment.ClassInstance)).Resolve("workpieceOut")));
        }
        
        /// <summary>
        /// Raises the WorkpieceOutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkpieceOutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkpieceOutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkpieceOutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkpieceOutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkpieceOutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkpieceOut property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkpieceOut(object sender, System.EventArgs eventArgs)
        {
            this.WorkpieceOut = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "WORKPIECEIN"))
            {
                if ((index < this.WorkpieceIn.Count))
                {
                    return this.WorkpieceIn[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "WORKPIECEOUT"))
            {
                return this.WorkpieceOut;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WORKPIECEIN"))
            {
                return this._workpieceIn;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "WORKPIECEOUT"))
            {
                this.WorkpieceOut = ((IWorkpieceType)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ID"))
            {
                return new IDProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "WORKPIECEOUT"))
            {
                return new WorkpieceOutProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/minimal_example#//product/ProductSegment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProductSegment class
        /// </summary>
        public class ProductSegmentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProductSegment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProductSegmentReferencedElementsCollection(ProductSegment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.WorkpieceIn.Count);
                    if ((this._parent.WorkpieceOut != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.WorkpieceIn.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkpieceOutChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.WorkpieceIn.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkpieceOutChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IWorkpieceType workpieceInCasted = item.As<IWorkpieceType>();
                if ((workpieceInCasted != null))
                {
                    this._parent.WorkpieceIn.Add(workpieceInCasted);
                }
                if ((this._parent.WorkpieceOut == null))
                {
                    IWorkpieceType workpieceOutCasted = item.As<IWorkpieceType>();
                    if ((workpieceOutCasted != null))
                    {
                        this._parent.WorkpieceOut = workpieceOutCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.WorkpieceIn.Clear();
                this._parent.WorkpieceOut = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.WorkpieceIn.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.WorkpieceOut))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> workpieceInEnumerator = this._parent.WorkpieceIn.GetEnumerator();
                try
                {
                    for (
                    ; workpieceInEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workpieceInEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workpieceInEnumerator.Dispose();
                }
                if ((this._parent.WorkpieceOut != null))
                {
                    array[arrayIndex] = this._parent.WorkpieceOut;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IWorkpieceType workpieceTypeItem = item.As<IWorkpieceType>();
                if (((workpieceTypeItem != null) 
                            && this._parent.WorkpieceIn.Remove(workpieceTypeItem)))
                {
                    return true;
                }
                if ((this._parent.WorkpieceOut == item))
                {
                    this._parent.WorkpieceOut = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.WorkpieceIn).Concat(this._parent.WorkpieceOut).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IProductSegment, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IProductSegment modelElement) : 
                    base(modelElement, "ID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the workpieceOut property
        /// </summary>
        private sealed class WorkpieceOutProxy : ModelPropertyChange<IProductSegment, IWorkpieceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkpieceOutProxy(IProductSegment modelElement) : 
                    base(modelElement, "workpieceOut")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkpieceType Value
            {
                get
                {
                    return this.ModelElement.WorkpieceOut;
                }
                set
                {
                    this.ModelElement.WorkpieceOut = value;
                }
            }
        }
    }
}

