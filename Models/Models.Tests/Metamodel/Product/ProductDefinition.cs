//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Tests.Minimal_example.Product
{
    
    
    /// <summary>
    /// The default implementation of the ProductDefinition class
    /// </summary>
    [XmlIdentifierAttribute("ID")]
    [XmlNamespaceAttribute("product")]
    [XmlNamespacePrefixAttribute("example")]
    [ModelRepresentationClassAttribute("http://www.example.org/minimal_example#//product/ProductDefinition")]
    [DebuggerDisplayAttribute("ProductDefinition {ID}")]
    public partial class ProductDefinition : ModelElement, IProductDefinition, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _iD;
        
        private static Lazy<ITypedElement> _iDAttribute = new Lazy<ITypedElement>(RetrieveIDAttribute);
        
        private static Lazy<ITypedElement> _productsegmentsReference = new Lazy<ITypedElement>(RetrieveProductsegmentsReference);
        
        /// <summary>
        /// The backing field for the Productsegments property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IProductSegment> _productsegments;
        
        private static Lazy<ITypedElement> _workpiecetypesReference = new Lazy<ITypedElement>(RetrieveWorkpiecetypesReference);
        
        /// <summary>
        /// The backing field for the Workpiecetypes property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IWorkpieceType> _workpiecetypes;
        
        private static IClass _classInstance;
        
        public ProductDefinition()
        {
            this._productsegments = new ObservableCompositionOrderedSet<IProductSegment>(this);
            this._productsegments.CollectionChanging += this.ProductsegmentsCollectionChanging;
            this._productsegments.CollectionChanged += this.ProductsegmentsCollectionChanged;
            this._workpiecetypes = new ObservableCompositionOrderedSet<IWorkpieceType>(this);
            this._workpiecetypes.CollectionChanging += this.WorkpiecetypesCollectionChanging;
            this._workpiecetypes.CollectionChanged += this.WorkpiecetypesCollectionChanged;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [CategoryAttribute("ProductDefinition")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e, _iDAttribute);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e, _iDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The productsegments property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("productsegments")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IProductSegment> Productsegments
        {
            get
            {
                return this._productsegments;
            }
        }
        
        /// <summary>
        /// The workpiecetypes property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("workpiecetypes")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IWorkpieceType> Workpiecetypes
        {
            get
            {
                return this._workpiecetypes;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ProductDefinitionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProductDefinitionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/minimal_example#//product/ProductDefinition")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        private static ITypedElement RetrieveIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Models.Tests.Minimal_example.Product.ProductDefinition.ClassInstance)).Resolve("ID")));
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveProductsegmentsReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Models.Tests.Minimal_example.Product.ProductDefinition.ClassInstance)).Resolve("productsegments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Productsegments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProductsegmentsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Productsegments", e, _productsegmentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Productsegments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProductsegmentsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Productsegments", e, _productsegmentsReference);
        }
        
        private static ITypedElement RetrieveWorkpiecetypesReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Models.Tests.Minimal_example.Product.ProductDefinition.ClassInstance)).Resolve("workpiecetypes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Workpiecetypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkpiecetypesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Workpiecetypes", e, _workpiecetypesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Workpiecetypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkpiecetypesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Workpiecetypes", e, _workpiecetypesReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int productsegmentsIndex = ModelHelper.IndexOfReference(this.Productsegments, element);
            if ((productsegmentsIndex != -1))
            {
                return ModelHelper.CreatePath("productsegments", productsegmentsIndex);
            }
            int workpiecetypesIndex = ModelHelper.IndexOfReference(this.Workpiecetypes, element);
            if ((workpiecetypesIndex != -1))
            {
                return ModelHelper.CreatePath("workpiecetypes", workpiecetypesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PRODUCTSEGMENTS"))
            {
                if ((index < this.Productsegments.Count))
                {
                    return this.Productsegments[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "WORKPIECETYPES"))
            {
                if ((index < this.Workpiecetypes.Count))
                {
                    return this.Workpiecetypes[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PRODUCTSEGMENTS"))
            {
                return this._productsegments;
            }
            if ((feature == "WORKPIECETYPES"))
            {
                return this._workpiecetypes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ID"))
            {
                return new IDProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._productsegments))
            {
                return "productsegments";
            }
            if ((container == this._workpiecetypes))
            {
                return "workpiecetypes";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/minimal_example#//product/ProductDefinition")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.ID == null))
            {
                return null;
            }
            return this.ID.ToString();
        }
        
        protected override Uri CreateUriWithFragment(string fragment, bool absolute, IModelElement baseElement)
        {
            return this.CreateUriFromGlobalIdentifier(fragment, absolute);
        }
        
        protected override void PropagateNewModel(Model newModel, Model oldModel, IModelElement subtreeRoot)
        {
            string id = this.ToIdentifierString();
            if ((oldModel != null))
            {
                oldModel.UnregisterId(id);
            }
            if ((newModel != null))
            {
                newModel.RegisterId(id, this);
            }
            base.PropagateNewModel(newModel, oldModel, subtreeRoot);
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProductDefinition class
        /// </summary>
        public class ProductDefinitionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProductDefinition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProductDefinitionChildrenCollection(ProductDefinition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Productsegments.Count);
                    count = (count + this._parent.Workpiecetypes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Productsegments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Workpiecetypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Productsegments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Workpiecetypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProductSegment productsegmentsCasted = item.As<IProductSegment>();
                if ((productsegmentsCasted != null))
                {
                    this._parent.Productsegments.Add(productsegmentsCasted);
                }
                IWorkpieceType workpiecetypesCasted = item.As<IWorkpieceType>();
                if ((workpiecetypesCasted != null))
                {
                    this._parent.Workpiecetypes.Add(workpiecetypesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Productsegments.Clear();
                this._parent.Workpiecetypes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Productsegments.Contains(item))
                {
                    return true;
                }
                if (this._parent.Workpiecetypes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> productsegmentsEnumerator = this._parent.Productsegments.GetEnumerator();
                try
                {
                    for (
                    ; productsegmentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = productsegmentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    productsegmentsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workpiecetypesEnumerator = this._parent.Workpiecetypes.GetEnumerator();
                try
                {
                    for (
                    ; workpiecetypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workpiecetypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workpiecetypesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProductSegment productSegmentItem = item.As<IProductSegment>();
                if (((productSegmentItem != null) 
                            && this._parent.Productsegments.Remove(productSegmentItem)))
                {
                    return true;
                }
                IWorkpieceType workpieceTypeItem = item.As<IWorkpieceType>();
                if (((workpieceTypeItem != null) 
                            && this._parent.Workpiecetypes.Remove(workpieceTypeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Productsegments).Concat(this._parent.Workpiecetypes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProductDefinition class
        /// </summary>
        public class ProductDefinitionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProductDefinition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProductDefinitionReferencedElementsCollection(ProductDefinition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Productsegments.Count);
                    count = (count + this._parent.Workpiecetypes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Productsegments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Workpiecetypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Productsegments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Workpiecetypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProductSegment productsegmentsCasted = item.As<IProductSegment>();
                if ((productsegmentsCasted != null))
                {
                    this._parent.Productsegments.Add(productsegmentsCasted);
                }
                IWorkpieceType workpiecetypesCasted = item.As<IWorkpieceType>();
                if ((workpiecetypesCasted != null))
                {
                    this._parent.Workpiecetypes.Add(workpiecetypesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Productsegments.Clear();
                this._parent.Workpiecetypes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Productsegments.Contains(item))
                {
                    return true;
                }
                if (this._parent.Workpiecetypes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> productsegmentsEnumerator = this._parent.Productsegments.GetEnumerator();
                try
                {
                    for (
                    ; productsegmentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = productsegmentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    productsegmentsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workpiecetypesEnumerator = this._parent.Workpiecetypes.GetEnumerator();
                try
                {
                    for (
                    ; workpiecetypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workpiecetypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workpiecetypesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProductSegment productSegmentItem = item.As<IProductSegment>();
                if (((productSegmentItem != null) 
                            && this._parent.Productsegments.Remove(productSegmentItem)))
                {
                    return true;
                }
                IWorkpieceType workpieceTypeItem = item.As<IWorkpieceType>();
                if (((workpieceTypeItem != null) 
                            && this._parent.Workpiecetypes.Remove(workpieceTypeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Productsegments).Concat(this._parent.Workpiecetypes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IProductDefinition, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IProductDefinition modelElement) : 
                    base(modelElement, "ID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
        }
    }
}

