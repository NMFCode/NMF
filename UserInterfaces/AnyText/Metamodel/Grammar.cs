//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;


namespace NMF.AnyText.Metamodel
{
    
    
    /// <summary>
    /// The default implementation of the Grammar class
    /// </summary>
    [XmlIdentifierAttribute("Name")]
    [XmlNamespaceAttribute("http://github.com/NMFCode/NMF/AnyText")]
    [XmlNamespacePrefixAttribute("anytext")]
    [ModelRepresentationClassAttribute("http://github.com/NMFCode/NMF/AnyText#//Grammar")]
    [DebuggerDisplayAttribute("Grammar {Name}")]
    public partial class Grammar : ModelElement, IGrammar, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        /// <summary>
        /// The backing field for the LanguageId property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _languageId;
        
        private static Lazy<ITypedElement> _languageIdAttribute = new Lazy<ITypedElement>(RetrieveLanguageIdAttribute);
        
        private static Lazy<ITypedElement> _importsReference = new Lazy<ITypedElement>(RetrieveImportsReference);
        
        /// <summary>
        /// The backing field for the Imports property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IMetamodelImport> _imports;
        
        private static Lazy<ITypedElement> _rulesReference = new Lazy<ITypedElement>(RetrieveRulesReference);
        
        /// <summary>
        /// The backing field for the Rules property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IRule> _rules;
        
        private static Lazy<ITypedElement> _startRuleReference = new Lazy<ITypedElement>(RetrieveStartRuleReference);
        
        /// <summary>
        /// The backing field for the StartRule property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IClassRule _startRule;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public Grammar()
        {
            this._imports = new ObservableCompositionOrderedSet<IMetamodelImport>(this);
            this._imports.CollectionChanging += this.ImportsCollectionChanging;
            this._imports.CollectionChanged += this.ImportsCollectionChanged;
            this._rules = new ObservableCompositionOrderedSet<IRule>(this);
            this._rules.CollectionChanging += this.RulesCollectionChanging;
            this._rules.CollectionChanged += this.RulesCollectionChanged;
        }
        
        /// <summary>
        /// The Name property
        /// </summary>
        [CategoryAttribute("Grammar")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The LanguageId property
        /// </summary>
        [CategoryAttribute("Grammar")]
        [XmlAttributeAttribute(true)]
        public string LanguageId
        {
            get
            {
                return this._languageId;
            }
            set
            {
                if ((this._languageId != value))
                {
                    string old = this._languageId;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("LanguageId", e, _languageIdAttribute);
                    this._languageId = value;
                    this.OnPropertyChanged("LanguageId", e, _languageIdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Imports property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IMetamodelImport> Imports
        {
            get
            {
                return this._imports;
            }
        }
        
        /// <summary>
        /// The Rules property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IRule> Rules
        {
            get
            {
                return this._rules;
            }
        }
        
        /// <summary>
        /// The StartRule property
        /// </summary>
        [CategoryAttribute("Grammar")]
        [XmlAttributeAttribute(true)]
        public IClassRule StartRule
        {
            get
            {
                return this._startRule;
            }
            set
            {
                if ((this._startRule != value))
                {
                    IClassRule old = this._startRule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging("StartRule", e, _startRuleReference);
                    this._startRule = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStartRule;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStartRule;
                    }
                    this.OnPropertyChanged("StartRule", e, _startRuleReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new GrammarChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GrammarReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/NMFCode/NMF/AnyText#//Grammar")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMF.AnyText.Metamodel.Grammar.ClassInstance)).Resolve("Name")));
        }
        
        private static ITypedElement RetrieveLanguageIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMF.AnyText.Metamodel.Grammar.ClassInstance)).Resolve("LanguageId")));
        }
        
        private static ITypedElement RetrieveImportsReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.AnyText.Metamodel.Grammar.ClassInstance)).Resolve("Imports")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Imports property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ImportsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Imports", e, _importsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Imports property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ImportsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Imports", e, _importsReference);
        }
        
        private static ITypedElement RetrieveRulesReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.AnyText.Metamodel.Grammar.ClassInstance)).Resolve("Rules")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Rules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RulesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Rules", e, _rulesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Rules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RulesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Rules", e, _rulesReference);
        }
        
        private static ITypedElement RetrieveStartRuleReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.AnyText.Metamodel.Grammar.ClassInstance)).Resolve("StartRule")));
        }
        
        /// <summary>
        /// Handles the event that the StartRule property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStartRule(object sender, System.EventArgs eventArgs)
        {
            if ((sender == this.StartRule))
            {
                this.StartRule = null;
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int importsIndex = ModelHelper.IndexOfReference(this.Imports, element);
            if ((importsIndex != -1))
            {
                return ModelHelper.CreatePath("Imports", importsIndex);
            }
            int rulesIndex = ModelHelper.IndexOfReference(this.Rules, element);
            if ((rulesIndex != -1))
            {
                return ModelHelper.CreatePath("Rules", rulesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "IMPORTS"))
            {
                if ((index < this.Imports.Count))
                {
                    return this.Imports[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "RULES"))
            {
                if ((index < this.Rules.Count))
                {
                    return this.Rules[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "STARTRULE"))
            {
                return this.StartRule;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "LANGUAGEID"))
            {
                return this.LanguageId;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "IMPORTS"))
            {
                return this._imports;
            }
            if ((feature == "RULES"))
            {
                return this._rules;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STARTRULE"))
            {
                this.StartRule = ((IClassRule)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "LANGUAGEID"))
            {
                this.LanguageId = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            if ((attribute == "LANGUAGEID"))
            {
                return new LanguageIdProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "STARTRULE"))
            {
                return new StartRuleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._imports))
            {
                return "Imports";
            }
            if ((container == this._rules))
            {
                return "Rules";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/NMFCode/NMF/AnyText#//Grammar")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Grammar class
        /// </summary>
        public class GrammarChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Grammar _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GrammarChildrenCollection(Grammar parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Imports.Count);
                    count = (count + this._parent.Rules.Count);
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Imports.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Rules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Imports.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Rules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IMetamodelImport importsCasted = item.As<IMetamodelImport>();
                if ((importsCasted != null))
                {
                    this._parent.Imports.Add(importsCasted);
                }
                IRule rulesCasted = item.As<IRule>();
                if ((rulesCasted != null))
                {
                    this._parent.Rules.Add(rulesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Imports.Clear();
                this._parent.Rules.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Imports.Contains(item))
                {
                    return true;
                }
                if (this._parent.Rules.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> importsEnumerator = this._parent.Imports.GetEnumerator();
                try
                {
                    for (
                    ; importsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = importsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    importsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> rulesEnumerator = this._parent.Rules.GetEnumerator();
                try
                {
                    for (
                    ; rulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = rulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    rulesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IMetamodelImport metamodelImportItem = item.As<IMetamodelImport>();
                if (((metamodelImportItem != null) 
                            && this._parent.Imports.Remove(metamodelImportItem)))
                {
                    return true;
                }
                IRule ruleItem = item.As<IRule>();
                if (((ruleItem != null) 
                            && this._parent.Rules.Remove(ruleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Imports).Concat(this._parent.Rules).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Grammar class
        /// </summary>
        public class GrammarReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Grammar _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GrammarReferencedElementsCollection(Grammar parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Imports.Count);
                    count = (count + this._parent.Rules.Count);
                    if ((this._parent.StartRule != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            /// <summary>
            /// Registers event hooks to keep the collection up to date
            /// </summary>
            protected override void AttachCore()
            {
                this._parent.Imports.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Rules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BubbledChange += this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Unregisters all event hooks registered by AttachCore
            /// </summary>
            protected override void DetachCore()
            {
                this._parent.Imports.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Rules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BubbledChange -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IMetamodelImport importsCasted = item.As<IMetamodelImport>();
                if ((importsCasted != null))
                {
                    this._parent.Imports.Add(importsCasted);
                }
                IRule rulesCasted = item.As<IRule>();
                if ((rulesCasted != null))
                {
                    this._parent.Rules.Add(rulesCasted);
                }
                if ((this._parent.StartRule == null))
                {
                    IClassRule startRuleCasted = item.As<IClassRule>();
                    if ((startRuleCasted != null))
                    {
                        this._parent.StartRule = startRuleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Imports.Clear();
                this._parent.Rules.Clear();
                this._parent.StartRule = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Imports.Contains(item))
                {
                    return true;
                }
                if (this._parent.Rules.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.StartRule))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> importsEnumerator = this._parent.Imports.GetEnumerator();
                try
                {
                    for (
                    ; importsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = importsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    importsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> rulesEnumerator = this._parent.Rules.GetEnumerator();
                try
                {
                    for (
                    ; rulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = rulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    rulesEnumerator.Dispose();
                }
                if ((this._parent.StartRule != null))
                {
                    array[arrayIndex] = this._parent.StartRule;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IMetamodelImport metamodelImportItem = item.As<IMetamodelImport>();
                if (((metamodelImportItem != null) 
                            && this._parent.Imports.Remove(metamodelImportItem)))
                {
                    return true;
                }
                IRule ruleItem = item.As<IRule>();
                if (((ruleItem != null) 
                            && this._parent.Rules.Remove(ruleItem)))
                {
                    return true;
                }
                if ((this._parent.StartRule == item))
                {
                    this._parent.StartRule = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Imports).Concat(this._parent.Rules).Concat(this._parent.StartRule).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IGrammar, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IGrammar modelElement) : 
                    base(modelElement, "Name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LanguageId property
        /// </summary>
        private sealed class LanguageIdProxy : ModelPropertyChange<IGrammar, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LanguageIdProxy(IGrammar modelElement) : 
                    base(modelElement, "LanguageId")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LanguageId;
                }
                set
                {
                    this.ModelElement.LanguageId = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StartRule property
        /// </summary>
        private sealed class StartRuleProxy : ModelPropertyChange<IGrammar, IClassRule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartRuleProxy(IGrammar modelElement) : 
                    base(modelElement, "StartRule")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClassRule Value
            {
                get
                {
                    return this.ModelElement.StartRule;
                }
                set
                {
                    this.ModelElement.StartRule = value;
                }
            }
        }
    }
}
