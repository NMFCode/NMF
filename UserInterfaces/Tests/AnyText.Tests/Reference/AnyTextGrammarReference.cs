//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:8.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.AnyText;
using NMF.AnyText.Grammars;
using NMF.AnyText.Metamodel;
using NMF.AnyText.Model;
using NMF.AnyText.Rules;
using System.Collections.Generic;
using System.Text.RegularExpressions;


namespace Generated
{


    public class AnyTextGrammarReference : ReflectiveGrammar
    {
        public override string LanguageId
        {
            get
            {
                return "anytext";
            }
        }

        protected override NMF.AnyText.Rules.Rule GetRootRule(GrammarContext context)
        {
            return context.ResolveRule<GrammarRule>();
        }

        public partial class GrammarRule : ModelElementRule<NMF.AnyText.Metamodel.Grammar>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("grammar"),
                        context.ResolveRule<GrammarNameRule>(),
                        new ZeroOrMoreRule(context.ResolveRule<GrammarImportsRule>()),
                        new OneOrMoreRule(context.ResolveRule<GrammarRulesRule>())};
            }
        }

        public partial class MetamodelImportRule : ModelElementRule<MetamodelImport>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("imports"),
                        new ZeroOrOneRule(new SequenceRule(context.ResolveRule<MetamodelImportPrefixRule>(), context.ResolveKeyword("from"))),
                        context.ResolveRule<MetamodelImportFileRule>()};
            }
        }

        public partial class RuleRule : ChoiceRule
        {

            public override void Initialize(GrammarContext context)
            {
                Alternatives = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<ClassRuleRule>(),
                        context.ResolveRule<DataRuleRule>(),
                        context.ResolveRule<FragmentRuleRule>(),
                        context.ResolveRule<ParanthesisRuleRule>(),
                        context.ResolveRule<EnumRuleRule>()};
            }
        }

        public partial class ClassRuleRule : ChoiceRule
        {

            public override void Initialize(GrammarContext context)
            {
                Alternatives = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<InheritanceRuleRule>(),
                        context.ResolveRule<ModelRuleRule>()};
            }
        }

        public partial class InheritanceRuleRule : ModelElementRule<InheritanceRule>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<RuleNameRule>(),
                        context.ResolveRule<RuleTypeFragmentRule>(),
                        context.ResolveKeyword(":"),
                        context.ResolveRule<InheritanceRuleSubtypesRule>(),
                        new OneOrMoreRule(new SequenceRule(context.ResolveKeyword("|"), context.ResolveRule<InheritanceRuleSubtypesRule>())),
                        context.ResolveKeyword(";")};
            }
        }

        public partial class ModelRuleRule : ModelElementRule<ModelRule>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<RuleNameRule>(),
                        context.ResolveRule<RuleTypeFragmentRule>(),
                        context.ResolveKeyword(":"),
                        context.ResolveRule<ModelRuleExpressionRule>(),
                        context.ResolveKeyword(";")};
            }
        }

        public partial class DataRuleRule : ModelElementRule<DataRule>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("terminal"),
                        context.ResolveRule<RuleNameRule>(),
                        context.ResolveRule<RuleTypeFragmentRule>(),
                        context.ResolveKeyword(":"),
                        context.ResolveRule<DataRuleRegexRule>(),
                        context.ResolveKeyword(";")};
            }
        }

        public partial class FragmentRuleRule : ModelElementRule<FragmentRule>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("fragment"),
                        context.ResolveRule<RuleNameRule>(),
                        context.ResolveKeyword("processes"),
                        new ZeroOrOneRule(new SequenceRule(context.ResolveRule<RulePrefixRule>(), context.ResolveKeyword("."))),
                        context.ResolveRule<RuleTypeNameRule>(),
                        context.ResolveKeyword(":"),
                        context.ResolveRule<FragmentRuleExpressionRule>(),
                        context.ResolveKeyword(";")};
            }
        }

        public partial class ParanthesisRuleRule : ModelElementRule<ParanthesisRule>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("parantheses"),
                        context.ResolveRule<RuleNameRule>(),
                        context.ResolveKeyword(":"),
                        context.ResolveRule<ParanthesisRuleOpeningParanthesisRule>(),
                        context.ResolveRule<ParanthesisRuleInnerRuleRule>(),
                        context.ResolveRule<ParanthesisRuleClosingParanthesisRule>(),
                        context.ResolveKeyword(";")};
            }
        }

        public partial class EnumRuleRule : ModelElementRule<EnumRule>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("enum"),
                        context.ResolveRule<RuleNameRule>(),
                        context.ResolveRule<RuleTypeFragmentRule>(),
                        context.ResolveKeyword(":"),
                        context.ResolveRule<EnumRuleLiteralsRule>(),
                        new ZeroOrMoreRule(new SequenceRule(context.ResolveKeyword(","), context.ResolveRule<EnumRuleLiteralsRule>())),
                        context.ResolveKeyword(";")};
            }
        }

        public partial class LiteralRuleRule : ModelElementRule<NMF.AnyText.Metamodel.LiteralRule>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<LiteralRuleLiteralRule>(),
                        context.ResolveKeyword("=>"),
                        context.ResolveKeyword("\'"),
                        context.ResolveRule<LiteralRuleKeywordRule>(),
                        context.ResolveKeyword("\'")};
            }
        }

        public partial class RuleTypeFragmentRule : QuoteRule
        {

            public override void Initialize(GrammarContext context)
            {
                Inner = new ZeroOrOneRule(new SequenceRule(context.ResolveKeyword("returns"), new ZeroOrOneRule(new SequenceRule(context.ResolveRule<RulePrefixRule>(), context.ResolveKeyword("."))), context.ResolveRule<RuleTypeNameRule>()));
            }
        }

        public partial class FormattingInstructionFragmentRule : QuoteRule
        {

            public override void Initialize(GrammarContext context)
            {
                Inner = new ZeroOrMoreRule(context.ResolveRule<ParserExpressionFormattingInstructionsRule>());
            }
        }

        public partial class FormattingInstructionRule : EnumRule<FormattingInstruction>
        {

            public override void Initialize(GrammarContext context)
            {
                Alternatives = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("<nl>"),
                        context.ResolveKeyword("<ind>"),
                        context.ResolveKeyword("<unind>")};
                Values = new FormattingInstruction[] {
                        FormattingInstruction.Newline,
                        FormattingInstruction.Indent,
                        FormattingInstruction.Unindent};
            }
        }

        public partial class ParserExpressionRule : ChoiceRule
        {

            public override void Initialize(GrammarContext context)
            {
                Alternatives = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<ChoiceExpressionRule>(),
                        context.ResolveRule<ConjunctiveParserExpressionRule>()};
            }
        }

        public partial class ConjunctiveParserExpressionRule : ChoiceRule
        {

            public override void Initialize(GrammarContext context)
            {
                Alternatives = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<SequenceExpressionRule>(),
                        context.ResolveRule<PlusExpressionRule>(),
                        context.ResolveRule<StarExpressionRule>(),
                        context.ResolveRule<MaybeExpressionRule>(),
                        context.ResolveRule<BasicParserExpressionRule>()};
            }
        }

        public partial class BasicParserExpressionRule : ChoiceRule
        {

            public override void Initialize(GrammarContext context)
            {
                Alternatives = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<ParanthesisExpressionRule>(),
                        context.ResolveRule<KeywordExpressionRule>(),
                        context.ResolveRule<ReferenceExpressionRule>(),
                        context.ResolveRule<RuleExpressionRule>(),
                        context.ResolveRule<AssignExpressionRule>(),
                        context.ResolveRule<AddAssignExpressionRule>(),
                        context.ResolveRule<ExistsAssignExpressionRule>()};
            }
        }

        public partial class ParanthesisExpressionRule : ParanthesesRule
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("("),
                        context.ResolveRule<ParserExpressionRule>(),
                        context.ResolveKeyword(")")};
            }
        }

        public partial class SequenceExpressionRule : ModelElementRule<SequenceExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<SequenceExpressionInnerExpressionsRule>(),
                        new OneOrMoreRule(context.ResolveRule<SequenceExpressionInnerExpressionsRule>())};
            }
        }

        public partial class PlusExpressionRule : ModelElementRule<PlusExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<UnaryParserExpressionInnerRule>(),
                        context.ResolveKeyword("+"),
                        context.ResolveRule<FormattingInstructionFragmentRule>()};
            }
        }

        public partial class StarExpressionRule : ModelElementRule<StarExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<UnaryParserExpressionInnerRule>(),
                        context.ResolveKeyword("*"),
                        context.ResolveRule<FormattingInstructionFragmentRule>()};
            }
        }

        public partial class MaybeExpressionRule : ModelElementRule<MaybeExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<UnaryParserExpressionInnerRule>(),
                        context.ResolveKeyword("?"),
                        context.ResolveRule<FormattingInstructionFragmentRule>()};
            }
        }

        public partial class KeywordExpressionRule : ModelElementRule<KeywordExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("\'"),
                        context.ResolveRule<KeywordExpressionKeywordRule>(),
                        context.ResolveKeyword("\'")};
            }
        }

        public partial class ChoiceExpressionRule : ModelElementRule<ChoiceExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<ChoiceExpressionAlternativesRule>(),
                        new OneOrMoreRule(new SequenceRule(context.ResolveKeyword("|"), context.ResolveRule<ChoiceExpressionAlternativesRule>()))};
            }
        }

        public partial class AssignExpressionRule : ModelElementRule<AssignExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<FeatureExpressionFeatureRule>(),
                        context.ResolveKeyword("="),
                        context.ResolveRule<FeatureExpressionAssignedRule>(),
                        context.ResolveRule<FormattingInstructionFragmentRule>()};
            }
        }

        public partial class AddAssignExpressionRule : ModelElementRule<AddAssignExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<FeatureExpressionFeatureRule>(),
                        context.ResolveKeyword("+="),
                        context.ResolveRule<FeatureExpressionAssignedRule>(),
                        context.ResolveRule<FormattingInstructionFragmentRule>()};
            }
        }

        public partial class ExistsAssignExpressionRule : ModelElementRule<ExistsAssignExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<FeatureExpressionFeatureRule>(),
                        context.ResolveKeyword("?="),
                        context.ResolveRule<FeatureExpressionAssignedRule>(),
                        context.ResolveRule<FormattingInstructionFragmentRule>()};
            }
        }

        public partial class RuleExpressionRule : ModelElementRule<RuleExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveRule<RuleExpressionRuleRule>(),
                        new NegativeLookaheadRule(context.ResolveKeyword("=")),
                        new NegativeLookaheadRule(context.ResolveKeyword("+=")),
                        new NegativeLookaheadRule(context.ResolveKeyword("?="))};
            }
        }

        public partial class ReferenceExpressionRule : ModelElementRule<ReferenceExpression>
        {

            public override void Initialize(GrammarContext context)
            {
                Rules = new NMF.AnyText.Rules.Rule[] {
                        context.ResolveKeyword("["),
                        context.ResolveRule<ReferenceExpressionReferencedRuleRule>(),
                        context.ResolveKeyword("]")};
            }
        }

        public partial class IDRule : NMF.AnyText.Rules.RegexRule
        {

            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[a-zA-Z]\\\\w*", RegexOptions.Compiled);
            }
        }

        public partial class KeywordRule : NMF.AnyText.Rules.RegexRule
        {

            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^(\\\\\'|[^\'])+", RegexOptions.Compiled);
            }
        }

        public partial class RegexRule : NMF.AnyText.Rules.RegexRule
        {

            public override void Initialize(GrammarContext context)
            {
                Regex = new Regex("^[^\\/]*", RegexOptions.Compiled);
            }
        }

        public class GrammarRulesRule : AddAssignRule<IGrammar, IRule>
        {

            protected override String Feature
            {
                get
                {
                    return "Rules";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<RuleRule>();
                FormattingInstructions = new NMF.AnyText.PrettyPrinting.FormattingInstruction[] {
                        NMF.AnyText.PrettyPrinting.FormattingInstruction.Newline};
            }

            public override ICollection<IRule> GetCollection(IGrammar semanticElement, ParseContext context)
            {
                return semanticElement.Rules;
            }
        }

        public class GrammarImportsRule : AddAssignRule<IGrammar, IMetamodelImport>
        {

            protected override String Feature
            {
                get
                {
                    return "Imports";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<MetamodelImportRule>();
                FormattingInstructions = new NMF.AnyText.PrettyPrinting.FormattingInstruction[] {
                        NMF.AnyText.PrettyPrinting.FormattingInstruction.Newline};
            }

            public override ICollection<IMetamodelImport> GetCollection(IGrammar semanticElement, ParseContext context)
            {
                return semanticElement.Imports;
            }
        }

        public class GrammarNameRule : AssignRule<IGrammar, string>
        {

            protected override String Feature
            {
                get
                {
                    return "Name";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override string GetValue(IGrammar semanticElement, ParseContext context)
            {
                return semanticElement.Name;
            }

            protected override void SetValue(IGrammar semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Name = propertyValue;
            }
        }

        public class MetamodelImportFileRule : AssignRule<IMetamodelImport, string>
        {

            protected override String Feature
            {
                get
                {
                    return "File";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override string GetValue(IMetamodelImport semanticElement, ParseContext context)
            {
                return semanticElement.File;
            }

            protected override void SetValue(IMetamodelImport semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.File = propertyValue;
            }
        }

        public class MetamodelImportPrefixRule : AssignRule<MetamodelImport, string>
        {

            protected override String Feature
            {
                get
                {
                    return "Prefix";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override string GetValue(MetamodelImport semanticElement, ParseContext context)
            {
                return semanticElement.Prefix;
            }

            protected override void SetValue(MetamodelImport semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Prefix = propertyValue;
            }
        }

        public class InheritanceRuleSubtypesRule : AddAssignModelReferenceRule<IInheritanceRule, IClassRule>
        {

            protected override String Feature
            {
                get
                {
                    return "Subtypes";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            public override ICollection<IClassRule> GetCollection(IInheritanceRule semanticElement, ParseContext context)
            {
                return semanticElement.Subtypes;
            }
        }

        public class RuleNameRule : AssignRule<IRule, string>
        {

            protected override String Feature
            {
                get
                {
                    return "Name";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override string GetValue(IRule semanticElement, ParseContext context)
            {
                return semanticElement.Name;
            }

            protected override void SetValue(IRule semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Name = propertyValue;
            }
        }

        public class ModelRuleExpressionRule : AssignRule<IModelRule, IParserExpression>
        {

            protected override String Feature
            {
                get
                {
                    return "Expression";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<ParserExpressionRule>();
            }

            protected override IParserExpression GetValue(IModelRule semanticElement, ParseContext context)
            {
                return semanticElement.Expression;
            }

            protected override void SetValue(IModelRule semanticElement, IParserExpression propertyValue, ParseContext context)
            {
                semanticElement.Expression = propertyValue;
            }
        }

        public class DataRuleRegexRule : AssignRule<IDataRule, string>
        {

            protected override String Feature
            {
                get
                {
                    return "Regex";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<RegexRule>();
            }

            protected override string GetValue(IDataRule semanticElement, ParseContext context)
            {
                return semanticElement.Regex;
            }

            protected override void SetValue(IDataRule semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Regex = propertyValue;
            }
        }

        public class FragmentRuleExpressionRule : AssignRule<IFragmentRule, IParserExpression>
        {

            protected override String Feature
            {
                get
                {
                    return "Expression";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<ParserExpressionRule>();
            }

            protected override IParserExpression GetValue(IFragmentRule semanticElement, ParseContext context)
            {
                return semanticElement.Expression;
            }

            protected override void SetValue(IFragmentRule semanticElement, IParserExpression propertyValue, ParseContext context)
            {
                semanticElement.Expression = propertyValue;
            }
        }

        public class RuleTypeNameRule : AssignRule<IRule, string>
        {

            protected override String Feature
            {
                get
                {
                    return "TypeName";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override string GetValue(IRule semanticElement, ParseContext context)
            {
                return semanticElement.TypeName;
            }

            protected override void SetValue(IRule semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.TypeName = propertyValue;
            }
        }

        public class RulePrefixRule : AssignRule<IRule, string>
        {

            protected override String Feature
            {
                get
                {
                    return "Prefix";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override string GetValue(IRule semanticElement, ParseContext context)
            {
                return semanticElement.Prefix;
            }

            protected override void SetValue(IRule semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Prefix = propertyValue;
            }
        }

        public class ParanthesisRuleClosingParanthesisRule : AssignRule<IParanthesisRule, IKeywordExpression>
        {

            protected override String Feature
            {
                get
                {
                    return "ClosingParanthesis";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<KeywordExpressionRule>();
            }

            protected override IKeywordExpression GetValue(IParanthesisRule semanticElement, ParseContext context)
            {
                return semanticElement.ClosingParanthesis;
            }

            protected override void SetValue(IParanthesisRule semanticElement, IKeywordExpression propertyValue, ParseContext context)
            {
                semanticElement.ClosingParanthesis = propertyValue;
            }
        }

        public class ParanthesisRuleInnerRuleRule : AssignModelReferenceRule<IParanthesisRule, IClassRule>
        {

            protected override String Feature
            {
                get
                {
                    return "InnerRule";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override IClassRule GetValue(IParanthesisRule semanticElement, ParseContext context)
            {
                return semanticElement.InnerRule;
            }

            protected override void SetValue(IParanthesisRule semanticElement, IClassRule propertyValue, ParseContext context)
            {
                semanticElement.InnerRule = propertyValue;
            }
        }

        public class ParanthesisRuleOpeningParanthesisRule : AssignRule<IParanthesisRule, IKeywordExpression>
        {

            protected override String Feature
            {
                get
                {
                    return "OpeningParanthesis";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<KeywordExpressionRule>();
            }

            protected override IKeywordExpression GetValue(IParanthesisRule semanticElement, ParseContext context)
            {
                return semanticElement.OpeningParanthesis;
            }

            protected override void SetValue(IParanthesisRule semanticElement, IKeywordExpression propertyValue, ParseContext context)
            {
                semanticElement.OpeningParanthesis = propertyValue;
            }
        }

        public class EnumRuleLiteralsRule : AddAssignRule<IEnumRule, ILiteralRule>
        {

            protected override String Feature
            {
                get
                {
                    return "Literals";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<LiteralRuleRule>();
            }

            public override ICollection<ILiteralRule> GetCollection(IEnumRule semanticElement, ParseContext context)
            {
                return semanticElement.Literals;
            }
        }

        public class LiteralRuleKeywordRule : AssignRule<ILiteralRule, string>
        {

            protected override String Feature
            {
                get
                {
                    return "Keyword";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<KeywordRule>();
            }

            protected override string GetValue(ILiteralRule semanticElement, ParseContext context)
            {
                return semanticElement.Keyword;
            }

            protected override void SetValue(ILiteralRule semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Keyword = propertyValue;
            }
        }

        public class LiteralRuleLiteralRule : AssignRule<ILiteralRule, string>
        {

            protected override String Feature
            {
                get
                {
                    return "Literal";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override string GetValue(ILiteralRule semanticElement, ParseContext context)
            {
                return semanticElement.Literal;
            }

            protected override void SetValue(ILiteralRule semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Literal = propertyValue;
            }
        }

        public class SequenceExpressionInnerExpressionsRule : AddAssignRule<ISequenceExpression, IParserExpression>
        {

            protected override String Feature
            {
                get
                {
                    return "InnerExpressions";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<BasicParserExpressionRule>();
            }

            public override ICollection<IParserExpression> GetCollection(ISequenceExpression semanticElement, ParseContext context)
            {
                return semanticElement.InnerExpressions;
            }
        }

        public class UnaryParserExpressionInnerRule : AssignRule<IUnaryParserExpression, IParserExpression>
        {

            protected override String Feature
            {
                get
                {
                    return "Inner";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<BasicParserExpressionRule>();
            }

            protected override IParserExpression GetValue(IUnaryParserExpression semanticElement, ParseContext context)
            {
                return semanticElement.Inner;
            }

            protected override void SetValue(IUnaryParserExpression semanticElement, IParserExpression propertyValue, ParseContext context)
            {
                semanticElement.Inner = propertyValue;
            }
        }

        public class KeywordExpressionKeywordRule : AssignRule<IKeywordExpression, string>
        {

            protected override String Feature
            {
                get
                {
                    return "Keyword";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<KeywordRule>();
            }

            protected override string GetValue(IKeywordExpression semanticElement, ParseContext context)
            {
                return semanticElement.Keyword;
            }

            protected override void SetValue(IKeywordExpression semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Keyword = propertyValue;
            }
        }

        public class ChoiceExpressionAlternativesRule : AddAssignRule<IChoiceExpression, IParserExpression>
        {

            protected override String Feature
            {
                get
                {
                    return "Alternatives";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<ConjunctiveParserExpressionRule>();
            }

            public override ICollection<IParserExpression> GetCollection(IChoiceExpression semanticElement, ParseContext context)
            {
                return semanticElement.Alternatives;
            }
        }

        public class FeatureExpressionAssignedRule : AssignRule<IFeatureExpression, IParserExpression>
        {

            protected override String Feature
            {
                get
                {
                    return "Assigned";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<BasicParserExpressionRule>();
            }

            protected override IParserExpression GetValue(IFeatureExpression semanticElement, ParseContext context)
            {
                return semanticElement.Assigned;
            }

            protected override void SetValue(IFeatureExpression semanticElement, IParserExpression propertyValue, ParseContext context)
            {
                semanticElement.Assigned = propertyValue;
            }
        }

        public class FeatureExpressionFeatureRule : AssignRule<FeatureExpression, string>
        {

            protected override String Feature
            {
                get
                {
                    return "Feature";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override string GetValue(FeatureExpression semanticElement, ParseContext context)
            {
                return semanticElement.Feature;
            }

            protected override void SetValue(FeatureExpression semanticElement, string propertyValue, ParseContext context)
            {
                semanticElement.Feature = propertyValue;
            }
        }

        public class RuleExpressionRuleRule : AssignModelReferenceRule<IRuleExpression, IRule>
        {

            protected override String Feature
            {
                get
                {
                    return "Rule";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override IRule GetValue(IRuleExpression semanticElement, ParseContext context)
            {
                return semanticElement.Rule;
            }

            protected override void SetValue(IRuleExpression semanticElement, IRule propertyValue, ParseContext context)
            {
                semanticElement.Rule = propertyValue;
            }
        }

        public class ReferenceExpressionReferencedRuleRule : AssignModelReferenceRule<IReferenceExpression, IClassRule>
        {

            protected override String Feature
            {
                get
                {
                    return "ReferencedRule";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<IDRule>();
            }

            protected override IClassRule GetValue(IReferenceExpression semanticElement, ParseContext context)
            {
                return semanticElement.ReferencedRule;
            }

            protected override void SetValue(IReferenceExpression semanticElement, IClassRule propertyValue, ParseContext context)
            {
                semanticElement.ReferencedRule = propertyValue;
            }
        }

        public class ParserExpressionFormattingInstructionsRule : AddAssignRule<ParserExpression, FormattingInstruction>
        {

            protected override String Feature
            {
                get
                {
                    return "FormattingInstructions";
                }
            }

            public override void Initialize(GrammarContext context)
            {
                Inner = context.ResolveRule<FormattingInstructionRule>();
            }

            public override ICollection<FormattingInstruction> GetCollection(ParserExpression semanticElement, ParseContext context)
            {
                return semanticElement.FormattingInstructions;
            }
        }
    }
}
