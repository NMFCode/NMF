<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using NMF.Models;

namespace NMF.Expressions
{
<# for (int i = 1; i <= 15; i++) { #>
    internal class ObservablePromotionMethodCall<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> : ObservableStaticMethodCall<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>
    {
<# for (int j = 1; j <= i; j++) { #>
        private static bool isT<#= j #>Collection = typeof(INotifyEnumerable).IsAssignableFrom(typeof(T<#= j #>)) || typeof(IEnumerableExpression).IsAssignableFrom(typeof(T<#= j #>));
<# } #>

<# for (int j = 1; j <= i; j++) { #>
        public ICollection<string> Arg<#= j #>Properties { get; private set; }
        public bool Arg<#= j #>Composition { get; private set; }
<# } #>

        public ObservablePromotionMethodCall(Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> func<# for (int j = 1; j <= i; j++) { #>, INotifyExpression<T<#= j #>> argument<#= j #>, ICollection<string> arg<#= j #>Properties, bool arg<#= j #>Composition<# } #>)
            : base(func<# for (int j = 1; j <= i; j++) { #>, argument<#= j #><# } #>)
        {
<# for (int j = 1; j <= i; j++) { #>
            Arg<#= j #>Properties = arg<#= j #>Properties;
            Arg<#= j #>Composition = arg<#= j #>Composition;
<# } #>
        }

        protected override void OnAttach()
        {
<# for (int j = 1; j <= i; j++) { #>
            if (Arg<#= j #>Properties != null)
            {
                if (isT<#= j #>Collection)
                {
                    throw new NotImplementedException();
                }
                else
                {
                    RegisterArg<#= j #>BubbledChange((IModelElement)Argument<#= j #>.Value);
                }
            }
<# } #>
        }
        
<# for (int j = 1; j <= i; j++) { #>
        private void RegisterArg<#= j #>BubbledChange(IModelElement arg<#= j #>)
        {
            if (arg<#= j #> != null)
            {
                if (Arg<#= j #>Composition)
                {
                    arg<#= j #>.BubbledChange += Arg<#= j #>BubbledChange;
                }
                else
                {
                    arg<#= j #>.PropertyChanged += Arg<#= j #>PropertyChanged;
                }
            }
        }

        private void UnregisterArg<#= j #>BubbledChange(IModelElement arg<#= j #>)
        {
            if (arg<#= j #> != null)
            {
                if (Arg<#= j #>Composition)
                {
                    arg<#= j #>.BubbledChange -= Arg<#= j #>BubbledChange;
                }
                else
                {
                    arg<#= j #>.PropertyChanged -= Arg<#= j #>PropertyChanged;
                }
            }
        }

        private void Arg<#= j #>BubbledChange(object sender, BubbledChangeEventArgs e)
        {
            if (Successors.IsAttached && Arg<#= j #>Properties.Contains(e.PropertyName))
            {
                ExecutionEngine.Current.InvalidateNode(this);
            }
        }

        private void Arg<#= j #>PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (Successors.IsAttached && Arg<#= j #>Properties.Contains(e.PropertyName))
            {
                ExecutionEngine.Current.InvalidateNode(this);
            }
        }
<# } #>

        protected override void OnDetach()
        {
<# for (int j = 1; j <= i; j++) { #>
            if (Arg<#= j #>Properties != null)
            {
                if (isT<#= j #>Collection)
                {
                    throw new NotImplementedException();
                }
                else
                {
                    UnregisterArg<#= j #>BubbledChange((IModelElement)Argument<#= j #>.Value);
                }
            }
<# } #>
        }

        protected override INotifyExpression<TResult> ApplyParametersCore(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
        {
            return new ObservablePromotionMethodCall<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(Function<# for (int j = 1; j <= i; j++) { #>, Argument<#= j #>.ApplyParameters(parameters, trace), Arg<#= j #>Properties, Arg<#= j #>Composition<# } #>);
        }

        public override INotificationResult Notify(IList<INotificationResult> sources)
        {
            foreach (IValueChangedNotificationResult change in sources)
            {
<# for (int j = 1; j <= i; j++) { #>
                if (change.Source == Argument<#= j #>)
                {
                    if (isT<#= j #>Collection)
                    {
                        throw new NotImplementedException();
                    }
                    else
                    {
                        UnregisterArg<#= j #>BubbledChange((IModelElement)change.OldValue);
                        RegisterArg<#= j #>BubbledChange((IModelElement)Argument<#= j #>.Value);
                    }
                }
<# } #>
            }

            return base.Notify(sources);
        }
    }
<# } #>
}
