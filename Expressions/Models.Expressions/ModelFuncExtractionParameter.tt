<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NMF.Expressions
{
<# for (int i = 1; i < 8; i++) { #>
    internal class ModelFuncExtractionParameter<<# for (int j = 1; j <= i; j++) { #>TBase<#= j #>, <# } #>T> : INotifyExpression<T>
    {
        

<# for (int j = 1; j <= i; j++) { #>
        public INotifyExpression<TBase<#= j #>> Base<#= j #> { get; private set; }
<# } #>
        public Func<<# for (int j = 1; j <= i; j++) { #>TBase<#= j #>, <# } #>T> MemberGetter { get; private set; }

        public IEnumerable<INotifiable> Dependencies
        {
            get
            {
<# for (int j = 1; j <= i; j++) { #>
                yield return Base<#= j #>;
<# } #>
            }
        }

        public ISuccessorList Successors { get; } = NotifySystem.DefaultSystem.CreateSuccessorList();

        public ExecutionMetaData ExecutionMetaData { get; } = new ExecutionMetaData();

        public ModelFuncExtractionParameter(<# for (int j = 1; j <= i; j++) { #>INotifyExpression<TBase<#= j #>> base<#= j #>, <# } #>Func<<# for (int j = 1; j <= i; j++) { #>TBase<#= j #>, <# } #>T> memberGetter)
        {
<# for (int j = 1; j <= i; j++) { #>
            Base<#= j #> = base<#= j #>;
<# } #>
            MemberGetter = memberGetter;
        }

        public bool CanBeConstant
        {
            get
            {
                return Base1.CanBeConstant;
            }
        }

        public bool IsConstant
        {
            get
            {
                return false;
            }
        }

        public bool IsParameterFree
        {
            get
            {
                return Base1.IsParameterFree;
            }
        }

        public T Value
        {
            get
            {
                return MemberGetter(Base1.Value<# for (int j = 2; j <= i; j++) { #>, Base<#= j #>.Value<# } #>);
            }
        }

        public object ValueObject
        {
            get
            {
                return Value;
            }
        }

        public event EventHandler<ValueChangedEventArgs> ValueChanged
        {
            add { }
            remove { }
        }

        public INotifyExpression<T> ApplyParameters(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
        {
            return this;
        }

        INotifyExpression INotifyExpression.ApplyParameters(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
        {
            return ApplyParameters(parameters, trace);
        }

        public void Attach() { }

        public void Detach() { }

        public INotifyExpression<T> Reduce()
        {
            return this;
        }

        public void Dispose() { }

        public INotificationResult Notify(IList<INotificationResult> sources)
        {
            return new ValueChangedNotificationResult<T>(this, Value, Value);
        }
    }
<# } #>
}
