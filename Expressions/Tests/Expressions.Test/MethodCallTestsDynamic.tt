<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TestGenerationSettings.t4" once="true"#>
using System;
using System.Collections.Generic;
using NMF.Expressions.Linq;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace NMF.Expressions.Test
{ 
    [TestClass]
    public class MethodCallTestsDynamic
    {        

        public class Helper
        {
<#
    // Generate helper functions for each number of parameter (maxNumParameter is configured globally in TestGenerationSettings.t4)
    for(int i=1;i<=maxNumParameter;i++)
    {
        foreach( var isRecursive in new bool[] { false, true } )
        {
            foreach( var isINotifyValue in new bool[] { false, true } )
            {
#>
<#          // [...] ObservingFunc<Dummy<string>(, Dummy<string>)*, string> combineFunc[0-9]+ = new ObservingFunc<Dummy<Dummy<string>(, Dummy<string>)*, string>\(\(d[0-9]+(, d[0-9]+)*\) => (d1.Item (\+ d[0-9]+.Item)* \);#>
            private static readonly ObservingFunc<<#= Interpolate((isINotifyValue?"INotifyValue<":"") + "Dummy<string>" + (isINotifyValue?">":""), ", ", i, 0) #>, string> combineFunc<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #><#= i #> = new ObservingFunc<<#= Interpolate((isINotifyValue?"INotifyValue<":"") + "Dummy<string>" + (isINotifyValue?">":""), ", ", i, 0) #>, string>((<#= Interpolate("d{0}", ", ", i, 0) #>) => <#= Interpolate("d{0}" + (isINotifyValue?".Value":"") + ".Item", " + \", \" + ", i, 0) #>);

            [ObservableProxy(typeof(Helper), "CombineProxy<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #>", isRecursive:<#= isRecursive?"true":"false" #>)]
<#          // [...] \(Dummy<string> arg1(, Dummy<string> arg[0-9]+)*\) #>
            public static string Combine<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #>(<#= Interpolate((isINotifyValue?"INotifyValue<":"") + "Dummy<string>" + (isINotifyValue?">":"") + " arg{0}", ", ", i, 0) #>)
            {
<#              // [...] \(arg1(, arg[0-9]+)*\) #>
                return combineFunc<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #><#= i #>.Evaluate(<#= Interpolate("arg{0}", ", ", i, 0) #>);
            }

            [ObservableProxy(typeof(Helper), "CombineProxyInstance<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #>", isRecursive:<#= isRecursive?"true":"false" #>)]
<#          // [...] \(arg1(, arg[0-9]+)*\) #>
            public string CombineInstace<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #>(<#= Interpolate((isINotifyValue?"INotifyValue<":"") + "Dummy<string>" + (isINotifyValue?">":"") + " arg{0}", ", ", i, 0) #>)
            {
<#              // [...] \(arg1(, arg[0-9]+)*\) #>
                return combineFunc<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #><#= i #>.Evaluate(<#= Interpolate("arg{0}", ", ", i, 0) #>);
            }

<#          // [...] \(Dummy<string> arg1(, Dummy<string> arg[0-9]+)*\) #>
            public static INotifyValue<string> CombineProxy<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #>(<#= Interpolate((isINotifyValue?"INotifyValue<":"") + "Dummy<string>" + (isINotifyValue?">":"") + " arg{0}", ", ", i, 0) #>)
            {
<#              // [...] \(arg1(, arg[0-9]+)*\) #>
                return combineFunc<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #><#= i #>.Observe(<#= Interpolate("arg{0}", ", ", i, 0) #>);
            }

<#          // [...] \(Dummy<string> arg1(, Dummy<string> arg[0-9]+)*\) #>
            public INotifyValue<string> CombineProxyInstance<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #>(<#= Interpolate((isINotifyValue?"INotifyValue<":"") + "Dummy<string>" + (isINotifyValue?">":"") + " arg{0}", ", ", i, 0) #>)
            {
<#              // [...] \(arg1(, arg[0-9]+)*\) #>
                return combineFunc<#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #><#= i #>.Observe(<#= Interpolate("arg{0}", ", ", i, 0) #>);
            }
<#
            }
        }
    }
#>
        }

<#
    // Generate a test for each number of parameter (maxNumParameter is configured globally in TestGenerationSettings.t4)
    for(int i=1;i<=maxNumParameter;i++)
    {
#>
        #region New tests with <#= i #> parameters
<#
        // Generate a test for observaable and non observable items
        foreach(var isObservable in new[] { false , true })
        {
            // Generate a test for instance and static methodes
            foreach(var isStatic in new[] { false, true })
            {
                foreach( var isRecursive in new bool[] { false, true } )
                {
                    foreach( var isINotifyValue in new bool[] { false, true } )
                    {
#> 
        [TestMethod]
<#      // The test method name generation
        // Syntax: MethodCall__[ObservableTarget|NoObservableTarget]_[Static|Instance][number of parameter] #>
        public void MethodCall_<#= isObservable?"":"No" #>ObservableTarget_<#= isStatic?"Static":"Instance" #><#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #><#= i #>()
        {
            var update = false;
            var dummy = new NotifyCollection<<#= isINotifyValue?"INotifyValue<":"" #><#= isObservable?"Observable":"" #>Dummy<string>><#= isINotifyValue?">":"" #>();
            
            for(int j = 1; j<= <#= i #>; j++)
            {
                dummy.Add( <#= isINotifyValue?"new ConstantValue<" + (isObservable?"Observable":"") + "Dummy<string>>":"" #>(new <#= isObservable?"Observable":"" #>Dummy<string>() { Item = j.ToString() }) );
            }
<#          // Build the expression with a static or a instance methode call 
            // Interpolate() is used to generate a paramter string of the from: (dummy[0-9]+)(, dummy[0-9]+)*#>
            var test = Observable.Expression<string>(() => <#= isStatic?"Helper.Combine":"(new Helper()).CombineInstace" #><#= isINotifyValue?"INotify":"Dummy" #><#= isRecursive?"Recursive":"" #>(<#= Interpolate("dummy[{0}]", ", ", i, -1) #>));
<#
            if(isObservable)
            {
#>
            test.ValueChanged += (o, e) =>
            {
                update = true;
<#              // Test string is a comma spearated string with numbers from 1 to i  e.g. "1, 2, 3"#>
                Assert.AreEqual("<#= GenerateTestString( i, 0, 0 ) #>", e.OldValue);
<#              // Test string is a comma spearated string with numbers from 1 to i with last element +1 e.g "1, 2, 4"#>
                Assert.AreEqual("<#= GenerateTestString( i, 0, 1 ) #>", e.NewValue);
            };
<#
            }
            else
            {
#>
            test.ValueChanged += (o, e) => update = true;
<#
}
#>
<#          // Test string is a comma spearated string with numbers from 1 to i  e.g. "1, 2, 3"#>
            Assert.AreEqual("<#= GenerateTestString( i, 0, 0 ) #>", test.Value);
            Assert.IsFalse(update);
<#          // Increment the last element by 1 #>
            dummy[<#= i - 1 #>]<#= isINotifyValue?".Value":"" #>.Item = "<#= i + 1 #>";

            Assert.Is<#= isObservable?"True":"False" #>(update);
<#
            if(isObservable)
            {
#>
<#          // Test string is a comma spearated string with numbers from 1 to i with last element +1 e.g "1, 2, 4"#>
            Assert.AreEqual("<#= GenerateTestString( i, 0, 1 ) #>", test.Value);
<#
            }
#>
        }
<#
                    }
                }
            }
        }
#>


        #endregion

<#
    }
#>
    }
}
<#+
    // Function to generate comma spearated string of the numbers 1 to length
    // length: count of numbers to generate
    // offset: offset is added to each number before putting it to the result string
    // lastOffset: lastOffset is added to the last numer (and only to this number) before putting it to the result string
    private string GenerateTestString(int length, int offset, int lastOffset)
    {
        var list = Enumerable.Range(1, length).ToList();
        list[length-1] += lastOffset;
        return String.Join(", ", list.Select(x => (x + offset).ToString()));
    }    
#>