<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TestGenerationSettings.t4" once="true"#> 
using Microsoft.VisualStudio.TestTools.UnitTesting;
<#
var isIncCombinations = new bool[] { false/*, true //Not implemented in framework yet*/ } ;
#>

namespace NMF.Expressions.Test
{
    [TestClass]
    public class LensPutProxyTests
    {
        #region Helper

        private static class Helpers
        {           
<#
    foreach( var isInc in isIncCombinations)
    {
#>
<#    
        string textDummyT = "Dummy<string>";
        string textArgI = "arg{0}";
        string textDummyTArgI = textDummyT + " " + textArgI;
        string textWrappedDummyTArgI = (isInc?"INotifyValue<":"") + "Dummy<string>" + (isInc?">":"") + " arg{0}";
    
        string textDI = "d{0}";
        string textDIItem = textDI + ".Item";

        for(int i=2;i<=maxNumParameter;i++)
        {
#>
            #region Helper for <#= i #> parameters

            private static readonly ObservingFunc<<#= Interpolate(textDummyT, ", ", i) #>, string> combineFunc<#=i#> = new ObservingFunc<<#= Interpolate(textDummyT, ", ", i) #>, string>((<#= Interpolate(textDI, ", ", i) #>) => <#= Interpolate(textDIItem, " + ", i) #>);

            [LensPut(typeof(Helpers), "PutCombine<#= isInc?"Inc":"" #>")]
            [ObservableProxy(typeof(Helpers), "CombineProxy<#= isInc?"Inc":"" #>")]
            public static string Combine<#= isInc?"Inc":"" #>(<#= Interpolate(textDummyTArgI, ", ", i) #>)
            {
                return combineFunc<#= i #>.Evaluate(<#= Interpolate(textArgI, ", ", i) #>);
            }
            
            public static INotifyValue<string> CombineProxy<#= isInc?"Inc":"" #>(<#= Interpolate(textWrappedDummyTArgI, ", ", i) #>)
            {
                return combineFunc<#= i #>.Observe(<#= Interpolate(textArgI, ", ", i) #>);
            }     

            public static void PutCombine<#= isInc?"Inc":"" #>(<#= Interpolate(textDummyTArgI, ", ", i) #>, string value)
            {
                var splittedValue = value.ToCharArray();
<# 
        for(int j=1;j<=i;j++)
        {
#>
                arg<#= j #>.Item = splittedValue[<#= j - 1 #>].ToString();
<#
        }
#>
            }

            #endregion

<#        
    }
#>
<#
}
#>
        }

        #endregion     
   
<#
    foreach( var isInc in isIncCombinations )
    {
        for(int i=2;i<=maxNumParameter;i++)
        { 
#>
        [TestMethod]
        public void LensPutWithProxy<#= isInc?"Inc":"" #>Param<#= i #>()
        {
<# 
            for(int j=1;j<=i;j++)
            {
#>
            var dummy<#= j #> = new ObservableDummy<string>("<#= (char)(j + 64) #>");
<#
            }
#>
            var test = Observable.Reversable(() => Helpers.Combine<#= isInc?"Inc":"" #>(<#= Interpolate("dummy{0}", ", ", i) #>));
            Assert.AreEqual("<#= GenerateTestString(i, i) #>", test.Value);

            var updated = false;
            test.ValueChanged += (o, e) =>
            {
                updated = true;
            };
            
<# 
            for(int j=1;j<=i;j++)
            {
#>
            var dummy<#= j #>Updated = false;
            dummy<#= j #>.ItemChanged += (o, e) =>
            {
                dummy<#= j #>Updated = true;
            };
<#
            }
#>
           
            dummy<#= i #>.Item = "<#= (char)(i + 96) #>";

            Assert.IsTrue(updated);
<# 
            for(int j=1;j<i;j++)
            {
#>
            Assert.IsFalse(dummy<#= j #>Updated);
<#
            }
#>
            Assert.IsTrue(dummy<#= i #>Updated);
            Assert.AreEqual("<#= GenerateTestString(i, i-1) #>", test.Value);

            updated = false;
            dummy<#= i #>Updated = false;
            test.Value = "<#= GenerateTestString(i, i-2) #>";

            Assert.IsTrue(updated);
            Assert.IsTrue(dummy<#= i - 1 #>Updated);
            Assert.AreEqual("<#= (char)(i - 1 + 96) #>", dummy<#= i - 1 #>.Item);
<# 
            for(int j=1;j<i;j++)
            {
                if(j == i - 1)
                {
                    continue;
                }
#>
            Assert.IsFalse(dummy<#= j #>Updated);
<#
            }
#>

        }

<#
        }
    }
#>
    }
}

<#+
    public string Interpolate(string str, string separator, int i){
        return String.Join(separator,Enumerable.Range(1, i).Select(x => String.Format(str, x)));
    }

    public string GenerateTestString(int length, int upperCount)
    {
        return String.Join("",Enumerable.Range(1, length).Select(x => (char)( x + ( x > upperCount?96:64 ) ) ));
    }
#>

