<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="..\TestGenerationSettings.t4" once="true"#>
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace NMF.Expressions.Test.Arithmetic
{
    [TestClass]
    public class BasicArithmeticExpressionTests
    {
<#
        // Operations to test with all types
        // Syntax:
        // op Operator: binary operator to use
        // name Name: name describing the operator (used for methode name generation)
        // arg* and result*: values used for testing (values must be castable to the values of 'type' below)
        // first evaluation: arg1 [operator] arg2 == result1
        // second evaluation: arg1 [operator] arg3 == result2 (second operator value is changed to value of arg3)
        foreach (var operation in new[] { 
            new {op = "+", name = "Add", arg1 = 5, arg2 = 7, result = 12, arg3 = 35, result2 = 42 },
            new {op = "-", name = "Substract", arg1 = 5, arg2 = 3, result = 2, arg3 = 45, result2 = 42 },
            new {op = "*", name = "Multiply", arg1 = 3, arg2 = 7, result = 21, arg3 = 6, result2 = 42 },
            new {op = "/", name = "Divide", arg1 = 16, arg2 = 2, result = 8, arg3 = 84, result2 = 42 }            
        } ){
#>
        #region <#=operation.name#>ExpressionTests

<#
                // Types to test the operations with
                foreach(var type in new[] { "int", "long", "uint", "ulong", "float", "double", "decimal" })
                {
                    // Test operations in checked and unchecked environments 
                    foreach(var checkType in new[] { "checked", "unchecked" })
                    {
                        // Test operations in observable and not observable items
                        foreach(var observable in new[] { false , true })
                        {
                            foreach( var isINotifyValue in new bool[] { false, true } )
                            {
#>
<#      // The test method (used for all permuations) #>
        [TestMethod]
<#      // The test method name generation
        // Syntax: [operation name][checked|unchecked]_[type]_[Observable_Update|NoObservable_NoUpdate] #>
        public void <#=operation.name#><#=this.UppercaseFirst(checkType)#>_<#=this.UppercaseFirst(type)#>_<#=observable?"Observable_Update":"NoObservable_NoUpdate"#><#= isINotifyValue?"INotify":"Dummy" #>()
        {
            <#=checkType#>
            {
                var updated = false;
                var dummy = <#= isINotifyValue?"new ConstantValue<" + (observable?"Observable":"") + "Dummy<" + type + ">>":"" #>(new <#= observable?"Observable":"" #>Dummy<<#=type#>>() { Item = (<#=type#>)<#=operation.arg1#> });

                var result = Observable.Expression(() => dummy<#= isINotifyValue?".Value":"" #>.Item <#=operation.op#> (<#=type#>)<#=operation.arg2#>);

                result.ValueChanged += (o, e) =>
                {
<#
// Old value check is not required for non observable
// But we need to test if the ValueChanged event handler was falsely called with 'updated = true'
if(observable)
{
#>
                    Assert.AreEqual((<#= type #>)<#= operation.result #>, e.OldValue);
<#
}
#>
                    updated = true;
                };

                Assert.AreEqual((<#=type#>)<#=operation.result#>, result.Value);
                Assert.IsFalse(updated);

                dummy<#= isINotifyValue?".Value":"" #>.Item = (<#=type#>)<#=operation.arg3#>;
<#              // The target value should only change if 'observable' is true #>
                Assert.AreEqual((<#=type#>)<#=observable?operation.result2:operation.result#>, result.Value);
                Assert.<#=observable?"IsTrue":"IsFalse"#>(updated);
            }
        }

<#
                            }
                        }
                    }
                }
#>
                
        #endregion

<#
    }
#>
    }
}