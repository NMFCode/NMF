<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="..\TestGenerationSettings.t4" once="true"#> 

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace NMF.Expressions.Test.Arithmetic
{
    [TestClass]
    public class BitwiseExpressionTests
    {
<#
        // Operations to test with all types
        // Syntax:
        // op Operator: binary operator to use
        // name Name: name describing the operator (used for methode name generation)
        // arg* and result* values used for testing (values must be castable to the values of 'type' below)
        // first evaluation: arg1 [operator] arg2 == result1
        // second evaluation: arg1 [operator] arg3 == result2 (second operator value is changed to value of arg3)
        foreach (var operation in new[] { 
            new {op = "&", name = "And", arg1 = 7, arg2 = 21, result = 5, arg3 = 3, result2 = 1 },
            new {op = "|", name = "Or", arg1 = 7, arg2 = 21, result = 23, arg3 = 13, result2 = 29 },
            new {op = "^", name = "Xor", arg1 = 5, arg2 = 3, result = 6, arg3 = 2, result2 = 1 }
        } ){
#>
        #region Bitwise<#=operation.name#>ExpressionTests

<#
                // Types to test the operations with
                foreach(var type in new[] { "int", "long", "uint", "ulong" })
                {
                    // Test operations in observable and not observable items
                    foreach(var observable in new[] { false , true })
                    {
                        foreach( var isINotifyValue in new bool[] { false, true } )
                            {
#>
<#      // The test method (used for all permuations) #>
        [TestMethod]
<#      // The test method name generation
        // Syntax: [operation name]_[type]_[Observable_Update|NoObservable_NoUpdate] #>
        public void <#=operation.name#><#=this.UppercaseFirst(type)#>_<#=observable?"Observable_Update":"NoObservable_NoUpdate"#><#= isINotifyValue?"INotify":"Dummy" #>()
        {
            var updated = false;
            var dummy = <#= isINotifyValue?"new ConstantValue<" + (observable?"Observable":"") + "Dummy<" + type + ">>":"" #>(new <#= observable?"Observable":"" #>Dummy<<#=type#>>() { Item = (<#=type#>)<#=operation.arg1#> });

            var result = Observable.Expression(() => (<#=type#>)<#=operation.arg2#> <#=operation.op#> dummy<#= isINotifyValue?".Value":"" #>.Item);

            result.ValueChanged += (o, e) =>
            {
                <#=observable?("Assert.AreEqual((" + type + ")"+ operation.result +", e.OldValue);"):""#>
                updated = true;
            };

            Assert.AreEqual((<#= type #>)<#= operation.result #>, result.Value);
            Assert.IsFalse(updated);

            dummy<#= isINotifyValue?".Value":"" #>.Item = (<#= type #>)<#= operation.arg3 #>;

<#          // The target value should only change if 'observable' is true #>
            Assert.AreEqual((<#=type#>)<#=observable?operation.result2:operation.result#>, result.Value);
            Assert.<#=observable?"IsTrue":"IsFalse"#>(updated);
        }

<#
                        }
                    }
                }
#>
                
        #endregion

<#
    }
#>
    }
}