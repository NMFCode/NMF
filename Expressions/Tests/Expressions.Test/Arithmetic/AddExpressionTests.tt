<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace NMF.Expressions.Test.Arithmetic
{
    [TestClass]
    public class AddExpressionTests
    {
<#
    foreach(var type in new[]{"int", "long", "uint", "ulong", "float", "double", "decimal"})
    {
        foreach(var checkType in new[]{"checked", "unchecked"})
        {
            foreach(var observable in new[]{false , true})
            {
#>
        [TestMethod]
        public void Add<#=this.UppercaseFirst(checkType)#>_<#=this.UppercaseFirst(type)#>_<#=observable?"Observable_Update":"NoObservable_NoUpdate"#>()
        {
            <#=checkType#>
            {
                var updated = false;
                var dummy = new <#=observable?"ObservableDummy":"Dummy"#><<#=type#>>() { Item = 5 };

                var result = Observable.Expression(() => dummy.Item + 7);

                result.ValueChanged += (o, e) =>
                {
<#                if (observable) { #>
                    Assert.AreEqual((<#=type#>)12, e.OldValue);
<#                }#>
                    updated = true;
                };

                Assert.AreEqual((<#=type#>)12, result.Value);
                Assert.IsFalse(updated);

                dummy.Item = 35;

                Assert.AreEqual((<#=type#>)<#=observable?"42":"12"#>, result.Value);
                Assert.<#=observable?"IsTrue":"IsFalse"#>(updated);
            }
        }

<#
            }
        }
    }
#>
        
    }
}


<#+
    public string UppercaseFirst(string s)
    {
        if (string.IsNullOrEmpty(s))
        {
            return string.Empty;
        }

        char[] charArray = s.ToCharArray();
        charArray[0] = char.ToUpper(charArray[0]);
        return new string(charArray);
    }
#>