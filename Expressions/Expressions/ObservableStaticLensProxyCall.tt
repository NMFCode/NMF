<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace NMF.Expressions
{
<# for(int i = 1; i <= 14; i++) { #>
    internal class ObservableStaticLensProxyCall<<# for(int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> : ObservableStaticProxyCall<<# for(int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>
    {
        public LensPut<<# for(int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> LensPut { get; set; }

        public ObservableStaticLensProxyCall(MethodCallExpression node, ObservableExpressionBinder binder, MethodInfo proxyMethod) : base(node, binder, proxyMethod)
        {
            var lensPutAttribute = node.Method.GetCustomAttribute(typeof(LensPutAttribute)) as LensPutAttribute;
            LensPut = LensPut<<# for(int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>.FromLensPutAttribute(lensPutAttribute, node.Method, Argument1 as INotifyReversableValue<T1>);
        }

        public ObservableStaticLensProxyCall(Func<<# for(int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>INotifyValue<TResult>> proxyFunction<# for(int j = 1; j <= i; j++) { #>, INotifyExpression<T<#= j #>> arg<#= j #><# } #>, LensPut<<# for(int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> lensPut) : base(proxyFunction<# for(int j = 1; j <= i; j++) { #>, arg<#= j #><# } #>)
        {
            LensPut = lensPut;
        }

        public override bool IsReversable
        {
            get
            {
                return LensPut != null && LensPut.CanApply;
            }
        }

        public override void SetValue(TResult value)
        {
			Successors.SetDummy();
            LensPut.SetValue(<# for(int j = 1; j <= i; j++) { #>Argument<#= j #>.Value, <# } #>value);
        }

        protected override INotifyExpression<TResult> ApplyParametersCore(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
        {
            var newArgument1 = Argument1.ApplyParameters(parameters, trace);
            return new ObservableStaticLensProxyCall<<# for(int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(ProxyFunction, newArgument1<# for(int j = 2; j <= i; j++) { #>, Argument<#= j #>.ApplyParameters(parameters, trace)<# } #>, LensPut.ApplyNewTarget(newArgument1 as INotifyReversableValue<T1>));
        }
    }
<# } #>
}
