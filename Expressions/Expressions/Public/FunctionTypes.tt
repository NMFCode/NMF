<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace NMF.Expressions
{
<#
    for(int i = 1; i <= 15; i++)
    {
#>
    /// <summary>
    /// Represents an observable expression with <#= i #> input parameters
    /// </summary>
    <# for(int j = 1; j <= i; j++) { #>
/// <typeparam name="T<#= j #>">The type of the input parameter <#= j #></typeparam>
    <# } #>
public partial class ObservingFunc<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>
    {
        internal INotifyExpression<TResult> expression;
        internal Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #> TResult> compiled;
<# for(int j = 1; j <= i; j++) { #>
        internal string parameter<#= j #>Name;
<# } #>
        internal bool isParameterFree;

        /// <summary>
        /// Creates a new observable expression for the given expression
        /// </summary>
        /// <param name="expression">The expression that is to be observed</param>
        public ObservingFunc(Expression<Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #> TResult>> expression)
        {
            if (expression == null) throw new ArgumentNullException("expression");

            compiled = expression.Compile();
            
<# for(int j = 1; j <= i; j++) { #>
            this.parameter<#= j #>Name = expression.Parameters[<#= j-1 #>].Name;
<# } #>
            this.expression = NotifySystem.CreateExpression<TResult>(expression.Body, expression.Parameters);
            this.isParameterFree = this.expression.IsParameterFree;
        }

        /// <summary>
        /// Creates a new observable expression for the given expression
        /// </summary>
        /// <param name="expression">The expression that is to be observed</param>
        internal ObservingFunc(INotifyExpression<TResult> expression, bool isParameterFree)
        {
            if (expression == null) throw new ArgumentNullException("expression");
            
            this.expression = expression;
            this.isParameterFree = isParameterFree;
        }

        /// <summary>
        /// Invokes the expression
        /// </summary>
<# for(int j = 1; j <= i; j++) { #>
        /// <param name="in<#= j #>">The input parameter <#= j #></param>
<# } #>
        /// <returns>An observable value that keeps track of any changes</returns>
        [ObservableProxy(typeof(ObservingFunc<<# for (int j = 1; j <= i; j++) { #>,<# } #>>), "Observe")]
        public TResult Evaluate(<# for (int j = 1; j < i; j++) { #>T<#= j #> in<#= j #>, <# } #>T<#= i #> in<#= i #>)
        {
            return compiled.Invoke(<# for (int j = 1; j < i; j++) { #>in<#= j #>, <# } #>in<#= i #>);
        }

        /// <summary>
        /// Invokes the expression
        /// </summary>
<# for(int j = 1; j <= i; j++) { #>
        /// <param name="in<#= j #>">The input parameter <#= j #></param>
<# } #>
        /// <returns>An observable value that keeps track of any changes</returns>
        public INotifyValue<TResult> Observe(<# for (int j = 1; j < i; j++) { #>T<#= j #> in<#= j #>, <# } #>T<#= i #> in<#= i #>)
        {
            var parameters = new Dictionary<string, object>();
            if (!isParameterFree)
            {
<# for(int j = 1; j <= i; j++) { #>
                parameters.Add(parameter<#= j #>Name, in<#= j #>);
<# } #>
            }
            return expression.ApplyParameters(parameters, new Dictionary<INotifiable, INotifiable>());
        }

        /// <summary>
        /// Invokes the expression
        /// </summary>
<# for(int j = 1; j <= i; j++) { #>
        /// <param name="in<#= j #>">The input parameter <#= j #></param>
<# } #>
        /// <returns>An observable value that keeps track of any changes</returns>
        public INotifyValue<TResult> Observe(<# for (int j = 1; j < i; j++) { #>INotifyValue<T<#= j #>> in<#= j #>, <# } #>INotifyValue<T<#= i #>> in<#= i #>)
        {
            var parameters = new Dictionary<string, object>();
            if (!isParameterFree)
            {
<# for(int j = 1; j <= i; j++) { #>
                parameters.Add(parameter<#= j #>Name, in<#= j #>);
<# } #>
            }
            return expression.ApplyParameters(parameters, new Dictionary<INotifiable, INotifiable>());
        }

<# for(int k = 1; k < i; k++) { #>
        /// <summary>
        /// Invokes the expression partially
        /// </summary>
<# for(int j = 1; j <= k; j++) { #>
        /// <param name="in<#= j #>">The input parameter <#= j #></param>
<# } #>
        /// <returns>An observable value that keeps track of any changes</returns>
        [ObservableProxy(typeof(ObservingFunc<<# for (int j = 1; j <= i; j++) { #>,<# } #>>), "ObservePartial")]
        public Func<<# for (int j = k+1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> EvaluatePartial(<# for (int j = 1; j < k; j++) { #>T<#= j #> in<#= j #>, <# } #>T<#= k #> in<#= k #>)
        {
            return (<# for (int j = k+1; j < i; j++) { #>in<#= j #>, <# } #>in<#= i #>) => Evaluate(<# for (int j = 1; j < i; j++) { #>in<#= j #>, <# } #>in<#= i #>);
        }

        /// <summary>
        /// Invokes the expression partially
        /// </summary>
<# for(int j = 1; j <= k; j++) { #>
        /// <param name="in<#= j #>">The input parameter <#= j #></param>
<# } #>
        /// <returns>An observable value that keeps track of any changes</returns>
        public ObservingFunc<<# for (int j = k+1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> ObservePartial(<# for (int j = 1; j < k; j++) { #>INotifyValue<T<#= j #>> in<#= j #>, <# } #>INotifyValue<T<#= k #>> in<#= k #>)
        {
            if (isParameterFree) return new ObservingFunc<<# for (int j = k+1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(expression, true);
            var parameters = new Dictionary<string, object>();
<# for(int j = 1; j <= k; j++) { #>
            parameters.Add(parameter<#= j #>Name, in<#= j #>);
<# } #>
            var result = expression.ApplyParameters(parameters, new Dictionary<INotifiable, INotifiable>());
            return new ObservingFunc<<# for (int j = k+1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(result, result.IsParameterFree);
        }
<# } #>

        /// <summary>
        /// Invokes the expression
        /// </summary>
<# for(int j = 1; j <= i; j++) { #>
        /// <param name="in<#= j #>">The input parameter <#= j #></param>
<# } #>
        /// <returns>An observable value that keeps track of any changes</returns>
        public virtual INotifyReversableValue<TResult> InvokeReversable(<# for (int j = 1; j < i; j++) { #>T<#= j #> in<#= j #>, <# } #>T<#= i #> in<#= i #>)
        {
            if (!IsReversable) throw new InvalidOperationException("Expression is not reversable");
            var parameters = new Dictionary<string, object>();
            if (!isParameterFree)
            {
<# for(int j = 1; j <= i; j++) { #>
                parameters.Add(parameter<#= j #>Name, in<#= j #>);
<# } #>
            }
            return expression.ApplyParameters(parameters, new Dictionary<INotifiable, INotifiable>()) as INotifyReversableExpression<TResult>;
        }

        /// <summary>
        /// Invokes the expression
        /// </summary>
<# for(int j = 1; j <= i; j++) { #>
        /// <param name="in<#= j #>">The input parameter <#= j #></param>
<# } #>
        /// <returns>An observable value that keeps track of any changes</returns>
        public virtual INotifyReversableValue<TResult> InvokeReversable(<# for (int j = 1; j < i; j++) { #>INotifyValue<T<#= j #>> in<#= j #>, <# } #>INotifyValue<T<#= i #>> in<#= i #>)
        {
            if (!IsReversable) throw new InvalidOperationException("Expression is not reversable");
            var parameters = new Dictionary<string, object>();
            if (!isParameterFree)
            {
<# for(int j = 1; j <= i; j++) { #>
                parameters.Add(parameter<#= j #>Name, in<#= j #>);
<# } #>
            }
            return expression.ApplyParameters(parameters, new Dictionary<INotifiable, INotifiable>()) as INotifyReversableExpression<TResult>;
        }


        /// <summary>
        /// Creates a new observable expression
        /// </summary>
        /// <param name="expression">The expression that is to be observed</param>
        /// <returns>An observable function</returns>
        public static implicit operator ObservingFunc<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #> TResult>(Expression<Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #> TResult>> expression)
        {
            return FromExpression(expression);
        }


        /// <summary>
        /// Creates a new observable expression from the given expression
        /// </summary>
        /// <param name="expression">The expression that is to be observed</param>
        /// <returns>An observable function</returns>
        public static ObservingFunc<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #> TResult> FromExpression(Expression<Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #> TResult>> expression)
        {
            if (expression == null) return null;
            return new ObservingFunc<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #> TResult>(expression);
        }

        /// <summary>
        /// Gets a value indicating whether this function can be reversed
        /// </summary>
        public virtual bool IsReversable
        {
            get
            {
                var reversable = expression as INotifyReversableExpression<TResult>;
                return reversable != null && reversable.IsReversable;
            }
        }
    }
<#
    } 
#>
}