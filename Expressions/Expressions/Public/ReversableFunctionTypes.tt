<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace NMF.Expressions
{
<#
    for(int i = 1; i <= 15; i++)
    {
#>
    /// <summary>
    /// Represents an observable expression with <#= i #> input parameters and a custom update handler
    /// </summary>
<# for(int j = 1; j <= i; j++) { #>
    /// <typeparam name="T<#= j #>">The type of the input parameter <#= j #></typeparam>
<# } #>
    public partial class ReversableObservingFunc<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> : ObservingFunc<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>
    {
        /// <summary>
        /// The method that handles value updates for this func
        /// </summary>
        public Action<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> UpdateHandler { get; private set; }

        /// <summary>
        /// Creates a new observable expression for the given expression
        /// </summary>
        /// <param name="expression">The expression that is to be observed</param>
        public ReversableObservingFunc(Expression<Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #> TResult>> expression, Action<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> updateHandler)
            : base(expression)
        {
            if (updateHandler == null) throw new ArgumentNullException("updateHandler");

            UpdateHandler = updateHandler;
        }

        /// <summary>
        /// Invokes the expression
        /// </summary>
<# for(int j = 1; j <= i; j++) { #>
        /// <param name="in<#= j #>">The input parameter <#= j #></param>
<# } #>
        /// <returns>An observable value that keeps track of any changes</returns>
        public override INotifyReversableValue<TResult> InvokeReversable(<# for (int j = 1; j < i; j++) { #>T<#= j #> in<#= j #>, <# } #>T<#= i #> in<#= i #>)
        {
            if (isParameterFree) return new ReversableProxyExpression<TResult>(expression, newValue => UpdateHandler(<# for (int j = 1; j <= i; j++) { #>in<#= j #>, <# } #>newValue));
            var parameters = new Dictionary<string, object>();
<# for(int j = 1; j <= i; j++) { #>
            parameters.Add(parameter<#= j #>Name, in<#= j #>);
<# } #>
            var result = expression.ApplyParameters(parameters, new Dictionary<INotifiable, INotifiable>());
            return new ReversableProxyExpression<TResult>(result, newValue => UpdateHandler(<# for (int j = 1; j <= i; j++) { #>in<#= j #>, <# } #>newValue));
        }

        /// <summary>
        /// Invokes the expression
        /// </summary>
<# for(int j = 1; j <= i; j++) { #>
        /// <param name="in<#= j #>">The input parameter <#= j #></param>
<# } #>
        /// <returns>An observable value that keeps track of any changes</returns>
        public override INotifyReversableValue<TResult> InvokeReversable(<# for (int j = 1; j < i; j++) { #>INotifyValue<T<#= j #>> in<#= j #>, <# } #>INotifyValue<T<#= i #>> in<#= i #>)
        {
            if (isParameterFree) return new ReversableProxyExpression<TResult>(expression, newValue => UpdateHandler(<# for (int j = 1; j <= i; j++) { #>in<#= j #>.Value, <# } #>newValue));
            var parameters = new Dictionary<string, object>();
<# for(int j = 1; j <= i; j++) { #>
            parameters.Add(parameter<#= j #>Name, in<#= j #>);
<# } #>
            var result = expression.ApplyParameters(parameters, new Dictionary<INotifiable, INotifiable>()) as INotifyReversableExpression<TResult>;
            return new ReversableProxyExpression<TResult>(result, newValue => UpdateHandler(<# for (int j = 1; j <= i; j++) { #>in<#= j #>.Value, <# } #>newValue));
        }

        /// <summary>
        /// Gets a value indicating whether this function can be reversed
        /// </summary>
        public override bool IsReversable
        {
            get
            {
                return true;
            }
        }
    }
<#
    } 
#>
}