<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace NMF.Expressions
{
<# for(int i = 0; i <= 14; i++) { #>
    internal class ObservableSimpleLensMethodProxyCall<T, <# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> : ObservableSimpleMethodProxyCall<T, <# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>
    {
        public LensPut<T, <# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> LensPut { get; private set; }

        public ObservableSimpleLensMethodProxyCall(MethodCallExpression node, ObservableExpressionBinder binder, MethodInfo proxyMethod) : base(node, binder, proxyMethod)
        {
            var lensPutAttribute = node.Method.GetCustomAttribute(typeof(LensPutAttribute)) as LensPutAttribute;
            LensPut = LensPut<T, <# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>.FromLensPutAttribute(lensPutAttribute, node.Method, Target as INotifyReversableValue<T>);
        }

        public ObservableSimpleLensMethodProxyCall(INotifyExpression<T> target, MethodInfo proxyFunction, <# for (int j = 1; j <= i; j++) { #>INotifyExpression<T<#= j #>> arg<#= j #>, <# } #>LensPut<T, <# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> lensPut) : base(target, proxyFunction<# for (int j = 1; j <= i; j++) { #>, arg<#= j #><# } #>)
        {
            LensPut = lensPut;
        }

        public override bool IsReversable
        {
            get
            {
                return LensPut != null && LensPut.CanApply;
            }
        }

        public override void SetValue(TResult value)
        {
            LensPut.SetValue(Target.Value, <# for (int j = 1; j <= i; j++) { #>Argument<#= j #>.Value, <# } #>value);
        }

        protected override INotifyExpression<TResult> ApplyParametersCore(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
        {
            var newTarget = Target.ApplyParameters(parameters, trace);
            return new ObservableSimpleLensMethodProxyCall<T, <# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(newTarget, ProxyMethod, <# for (int j = 1; j <= i; j++) { #>Argument<#= j #>.ApplyParameters(parameters, trace), <# } #>LensPut.ApplyNewTarget((INotifyReversableValue<T>)newTarget));
        }
    }
<# } #>
}
