<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace NMF.Expressions
{
<#
    for(int i = 0; i <= 14; i++)
    {
#>
    internal class ObservableLensMethodCall<T<# for(int j = 1; j <= i; j++) { #>, T<#= j #><# } #>, TResult> : ObservableMethodCall<T<# for(int j = 1; j <= i; j++) { #>, T<#= j #><# } #>, TResult>, INotifyReversableExpression<TResult>
    {
        public LensPut<T<# for(int j = 1; j <= i; j++) { #>, T<#= j #><# } #>, TResult> LensPut { get; set; }

        TResult INotifyReversableValue<TResult>.Value
		{
			get
			{
				return Value;
			}
			set
			{
				Successors.SetDummy();
				LensPut.SetValue(Target.Value<# for(int j = 1; j <= i; j++) { #>, Argument<#= j #>.Value<# } #>, value);
			}
		}

        public bool IsReversable
		{
			get
			{
				return LensPut != null && LensPut.CanApply;
			}
		}

        public ObservableLensMethodCall(MethodCallExpression node, ObservableExpressionBinder binder) : base(node, binder)
        {
		    var lensPutAttribute = node.Method.GetCustomAttribute(typeof(LensPutAttribute)) as LensPutAttribute;
            LensPut = LensPut<T<# for(int j = 1; j <= i; j++) { #>, T<#= j #><# } #>, TResult>.FromLensPutAttribute(lensPutAttribute, node.Method, Target as INotifyReversableValue<T>);
        }

        public ObservableLensMethodCall(INotifyExpression<T> target, MethodInfo method, LensPut<T<# for(int j = 1; j <= i; j++) { #>, T<#= j #><# } #>, TResult> lensPut<# for(int j = 1; j <= i; j++) { #>, INotifyExpression<T<#= j #>> argument<#= j #><# } #>) : base(target, method<# for(int j = 1; j <= i; j++) { #>, argument<#= j #><# } #>)
        {
            LensPut = lensPut;
        }

        protected override INotifyExpression<TResult> ApplyParametersCore(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
        {
		    var newTarget = Target.ApplyParameters(parameters, trace);
            return new ObservableLensMethodCall<T<# for(int j = 1; j <= i; j++) { #>, T<#= j #><# } #>, TResult>(newTarget, Method, LensPut.ApplyNewTarget(newTarget as INotifyReversableValue<T>)<# for(int j = 1; j <= i; j++) { #>, Argument<#= j #>.ApplyParameters(parameters, trace)<# } #>);
        }
    }
<#
	}
#>
}
