<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;

namespace NMF.Expressions
{
<#
    for(int i = 1; i <= 15; i++)
    {
#>
    internal class ObservableStaticProxyCall<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> : ObservableProxyCallBase<TResult>
    {
        public ObservableStaticProxyCall(MethodCallExpression node, ObservableExpressionBinder binder, MethodInfo proxyMethod)
            : this(ReflectionHelper.CreateDelegate<Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>INotifyValue<TResult>>>(proxyMethod)<# for (int j = 0; j < i; j++) { #>, binder.VisitObservable<T<#= j+1 #>>(ExpressionHelper.GetArg(node, <#= j #>))<# } #>) { }

        public ObservableStaticProxyCall(Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>INotifyValue<TResult>> proxyFunction<# for (int j = 1; j <= i; j++) { #>, INotifyExpression<T<#= j #>> arg<#= j #><# } #>)
        {
            if (proxyFunction == null) throw new ArgumentNullException("proxyFunction");
<# for (int j = 1; j <= i; j++) { #>
            if (arg<#= j #> == null) throw new ArgumentNullException("arg<#= j #>");
<# } #>

            ProxyFunction = proxyFunction;
<# for (int j = 1; j <= i; j++) { #>
            Argument<#= j #> = arg<#= j #>;
<# } #>
        }

<# for (int j = 1; j <= i; j++) { #>
        public INotifyExpression<T<#= j #>> Argument<#= j #> { get; private set; }
<# } #>

        public Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>INotifyValue<TResult>> ProxyFunction { get; private set; }

        public override IEnumerable<INotifiable> Dependencies
        {
            get
            {
                if (Proxy != null)
                    yield return Proxy;
            }
        }

        protected override INotifyValue<TResult> CreateProxy()
        {
            return ProxyFunction(Argument1.Value<# for (int j = 2; j <= i; j++) { #>, Argument<#= j #>.Value<# } #>);
        }

        public override bool IsParameterFree
        {
            get { return Argument1.IsParameterFree<# for (int j = 2; j <= i; j++) { #> && Argument<#= j #>.IsParameterFree<# } #>; }
        }

        protected override INotifyExpression<TResult> ApplyParametersCore(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
        {
            return new ObservableStaticProxyCall<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(ProxyFunction<# for (int j = 1; j <= i; j++) { #>, Argument<#= j #>.ApplyParameters(parameters, trace)<# } #>);
        }
		
        protected override void OnAttach()
        {
<# for (int j = 1; j <= i; j++) { #>
            Argument<#= j #>.Successors.SetDummy();
<# } #>

            RenewProxy();

<# for (int j = 1; j <= i; j++) { #>
            if (!Argument<#= j #>.Successors.HasSuccessors)
                Argument<#= j #>.Successors.Set(this);
<# } #>
        }
    }
<#
    } 
#>
}