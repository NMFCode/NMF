<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace NMF.Expressions
{
<#
    for(int i = 1; i <= 15; i++)
    {
#>
    internal class ObservableStaticLensMethodCall<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> : ObservableStaticMethodCall<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>, INotifyReversableExpression<TResult>
    {
        public LensPut<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> LensPut { get; set; }

        TResult INotifyReversableValue<TResult>.Value
		{
			get
			{
				return Value;
			}
			set
			{
				Successors.SetDummy();
				LensPut.SetValue(<# for (int j = 1; j <= i; j++) { #>Argument<#= j #>.Value, <# } #>value);
			}
		}

        public bool IsReversable
		{
			get
			{
				return LensPut != null && LensPut.CanApply;
			}
		}

        public ObservableStaticLensMethodCall(MethodCallExpression node, ObservableExpressionBinder binder) : base(node, binder)
        {
		    var lensPutAttribute = node.Method.GetCustomAttribute(typeof(LensPutAttribute)) as LensPutAttribute;
            LensPut = LensPut<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>.FromLensPutAttribute(lensPutAttribute, node.Method, Argument1 as INotifyReversableValue<T1>);
        }

        public ObservableStaticLensMethodCall(Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> function, LensPut<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> lensPut<# for (int j = 1; j <= i; j++) { #>, INotifyExpression<T<#= j #>> argument<#= j #><# } #>) : base(function<# for (int j = 1; j <= i; j++) { #>, argument<#= j #><# } #>)
        {
            LensPut = lensPut;
        }

        protected override INotifyExpression<TResult> ApplyParametersCore(IDictionary<string, object> parameters, IDictionary<INotifiable, INotifiable> trace)
        {
			var newArgument1 = Argument1.ApplyParameters(parameters, trace);
			if (newArgument1 == Argument1) return this;
            return new ObservableStaticLensMethodCall<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(Function, LensPut.ApplyNewTarget(newArgument1 as INotifyReversableValue<T1>), newArgument1<# for (int j = 2; j <= i; j++) { #>, Argument<#= j #>.ApplyParameters(parameters, trace)<# } #>);
        }
    }
<#
    }
#>
}
