//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.25
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.GlspTest.PetriNets
{
    
    
    /// <summary>
    /// The default implementation of the Transition class
    /// </summary>
    [XmlNamespaceAttribute("about:petriNet")]
    [XmlNamespacePrefixAttribute("pn")]
    [ModelRepresentationClassAttribute("about:petriNet#//Transition")]
    public partial class Transition : ModelElement, ITransition, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Input property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _input;
        
        private static Lazy<ITypedElement> _inputAttribute = new Lazy<ITypedElement>(RetrieveInputAttribute);
        
        private static Lazy<ITypedElement> _fromReference = new Lazy<ITypedElement>(RetrieveFromReference);
        
        /// <summary>
        /// The backing field for the From property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TransitionFromCollection _from;
        
        private static Lazy<ITypedElement> _toReference = new Lazy<ITypedElement>(RetrieveToReference);
        
        /// <summary>
        /// The backing field for the To property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TransitionToCollection _to;
        
        private static IClass _classInstance;
        
        public Transition()
        {
            this._from = new TransitionFromCollection(this);
            this._from.CollectionChanging += this.FromCollectionChanging;
            this._from.CollectionChanged += this.FromCollectionChanged;
            this._to = new TransitionToCollection(this);
            this._to.CollectionChanging += this.ToCollectionChanging;
            this._to.CollectionChanged += this.ToCollectionChanged;
        }
        
        /// <summary>
        /// The input property
        /// </summary>
        [DisplayNameAttribute("input")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("input")]
        [XmlAttributeAttribute(true)]
        public string Input
        {
            get
            {
                return this._input;
            }
            set
            {
                if ((this._input != value))
                {
                    string old = this._input;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInputChanging(e);
                    this.OnPropertyChanging("Input", e, _inputAttribute);
                    this._input = value;
                    this.OnInputChanged(e);
                    this.OnPropertyChanged("Input", e, _inputAttribute);
                }
            }
        }
        
        /// <summary>
        /// The from property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("from")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("from")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("outgoing")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IPlace> From
        {
            get
            {
                return this._from;
            }
        }
        
        /// <summary>
        /// The to property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("to")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("to")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("incoming")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IPlace> To
        {
            get
            {
                return this._to;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransitionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("about:petriNet#//Transition")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired when the Input property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InputChanged;
        
        /// <summary>
        /// Gets fired before the Input property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InputChanging;
        
        private static ITypedElement RetrieveInputAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMF.GlspTest.PetriNets.Transition.ClassInstance)).Resolve("input")));
        }
        
        /// <summary>
        /// Raises the InputChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInputChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InputChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InputChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInputChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InputChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFromReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.GlspTest.PetriNets.Transition.ClassInstance)).Resolve("from")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the From property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("From", e, _fromReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the From property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("From", e, _fromReference);
        }
        
        private static ITypedElement RetrieveToReference()
        {
            return ((ITypedElement)(((ModelElement)(NMF.GlspTest.PetriNets.Transition.ClassInstance)).Resolve("to")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the To property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("To", e, _toReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the To property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("To", e, _toReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FROM"))
            {
                if ((index < this.From.Count))
                {
                    return this.From[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "TO"))
            {
                if ((index < this.To.Count))
                {
                    return this.To[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "INPUT"))
            {
                return this.Input;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FROM"))
            {
                return this._from;
            }
            if ((feature == "TO"))
            {
                return this._to;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INPUT"))
            {
                this.Input = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "INPUT"))
            {
                return new InputProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("about:petriNet#//Transition")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Transition class
        /// </summary>
        public class TransitionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Transition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransitionReferencedElementsCollection(Transition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.From.Count);
                    count = (count + this._parent.To.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.From.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.To.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.From.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.To.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPlace fromCasted = item.As<IPlace>();
                if ((fromCasted != null))
                {
                    this._parent.From.Add(fromCasted);
                }
                IPlace toCasted = item.As<IPlace>();
                if ((toCasted != null))
                {
                    this._parent.To.Add(toCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.From.Clear();
                this._parent.To.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.From.Contains(item))
                {
                    return true;
                }
                if (this._parent.To.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> fromEnumerator = this._parent.From.GetEnumerator();
                try
                {
                    for (
                    ; fromEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fromEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fromEnumerator.Dispose();
                }
                IEnumerator<IModelElement> toEnumerator = this._parent.To.GetEnumerator();
                try
                {
                    for (
                    ; toEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPlace placeItem = item.As<IPlace>();
                if (((placeItem != null) 
                            && this._parent.From.Remove(placeItem)))
                {
                    return true;
                }
                if (((placeItem != null) 
                            && this._parent.To.Remove(placeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.From).Concat(this._parent.To).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the input property
        /// </summary>
        private sealed class InputProxy : ModelPropertyChange<ITransition, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InputProxy(ITransition modelElement) : 
                    base(modelElement, "input")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Input;
                }
                set
                {
                    this.ModelElement.Input = value;
                }
            }
        }
    }
}

