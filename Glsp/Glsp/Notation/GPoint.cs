//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.21
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Glsp.Notation
{
    
    
    /// <summary>
    /// The default implementation of the GPoint class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/glsp/notation")]
    [XmlNamespacePrefixAttribute("notation")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/glsp/notation#//GPoint")]
    public partial class GPoint : ModelElement, IGPoint, IModelElement
    {
        
        /// <summary>
        /// The backing field for the X property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private double _x = 0D;
        
        private static Lazy<ITypedElement> _xAttribute = new Lazy<ITypedElement>(RetrieveXAttribute);
        
        /// <summary>
        /// The backing field for the Y property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private double _y = 0D;
        
        private static Lazy<ITypedElement> _yAttribute = new Lazy<ITypedElement>(RetrieveYAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The x property
        /// </summary>
        [DefaultValueAttribute(0D)]
        [DisplayNameAttribute("x")]
        [CategoryAttribute("GPoint")]
        [XmlElementNameAttribute("x")]
        [XmlAttributeAttribute(true)]
        public double X
        {
            get
            {
                return this._x;
            }
            set
            {
                if ((this._x != value))
                {
                    double old = this._x;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXChanging(e);
                    this.OnPropertyChanging("X", e, _xAttribute);
                    this._x = value;
                    this.OnXChanged(e);
                    this.OnPropertyChanged("X", e, _xAttribute);
                }
            }
        }
        
        /// <summary>
        /// The y property
        /// </summary>
        [DefaultValueAttribute(0D)]
        [DisplayNameAttribute("y")]
        [CategoryAttribute("GPoint")]
        [XmlElementNameAttribute("y")]
        [XmlAttributeAttribute(true)]
        public double Y
        {
            get
            {
                return this._y;
            }
            set
            {
                if ((this._y != value))
                {
                    double old = this._y;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnYChanging(e);
                    this.OnPropertyChanging("Y", e, _yAttribute);
                    this._y = value;
                    this.OnYChanged(e);
                    this.OnPropertyChanged("Y", e, _yAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/glsp/notation#//GPoint")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the Y property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YChanging;
        
        /// <summary>
        /// Gets fired when the Y property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YChanged;
        
        private static ITypedElement RetrieveXAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Glsp.Notation.GPoint.ClassInstance)).Resolve("x")));
        }
        
        /// <summary>
        /// Raises the XChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveYAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMF.Glsp.Notation.GPoint.ClassInstance)).Resolve("y")));
        }
        
        /// <summary>
        /// Raises the YChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the YChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "X"))
            {
                return this.X;
            }
            if ((attribute == "Y"))
            {
                return this.Y;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "X"))
            {
                this.X = ((double)(value));
                return;
            }
            if ((feature == "Y"))
            {
                this.Y = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "X"))
            {
                return Observable.Box(new XProxy(this));
            }
            if ((attribute == "Y"))
            {
                return Observable.Box(new YProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/glsp/notation#//GPoint")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x property
        /// </summary>
        private sealed class XProxy : ModelPropertyChange<IGPoint, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XProxy(IGPoint modelElement) : 
                    base(modelElement, "x")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.X;
                }
                set
                {
                    this.ModelElement.X = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the y property
        /// </summary>
        private sealed class YProxy : ModelPropertyChange<IGPoint, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public YProxy(IGPoint modelElement) : 
                    base(modelElement, "y")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.Y;
                }
                set
                {
                    this.ModelElement.Y = value;
                }
            }
        }
    }
}

