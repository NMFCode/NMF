//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.21
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Glsp.Notation
{
    
    
    /// <summary>
    /// The public interface for GPoint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GPoint))]
    [XmlDefaultImplementationTypeAttribute(typeof(GPoint))]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/glsp/notation#//GPoint")]
    public interface IGPoint : IModelElement
    {
        
        /// <summary>
        /// The x property
        /// </summary>
        [DefaultValueAttribute(0D)]
        [DisplayNameAttribute("x")]
        [CategoryAttribute("GPoint")]
        [XmlElementNameAttribute("x")]
        [XmlAttributeAttribute(true)]
        double X
        {
            get;
            set;
        }
        
        /// <summary>
        /// The y property
        /// </summary>
        [DefaultValueAttribute(0D)]
        [DisplayNameAttribute("y")]
        [CategoryAttribute("GPoint")]
        [XmlElementNameAttribute("y")]
        [XmlAttributeAttribute(true)]
        double Y
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the Y property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> YChanging;
        
        /// <summary>
        /// Gets fired when the Y property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> YChanged;
    }
}

